# //  3186 ‚Äî Maximum Total Damage With Spell (11/10/2025)
# R·∫•t hay üëè ‚Äî b·∫°n ƒëang d√πng **Dynamic Programming (DP)** theo c√°ch kh√°c, th√¥ng minh h∆°n v√¨ t·∫≠n d·ª•ng `Counter` ƒë·ªÉ nh√≥m c√°c ph√©p gi·ªëng nhau.
# Gi·ªù m√¨nh s·∫Ω **gi·∫£i th√≠ch chi ti·∫øt thu·∫≠t to√°n + ch√∫ th√≠ch t·ª´ng d√≤ng code** nh√© üëá

# ---

# ```python
from typing import List
from collections import Counter

class Solution:
    def maximumTotalDamage(self, power: List[int]) -> int:
        # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói lo·∫°i ph√©p (v√¨ c√≥ th·ªÉ c√≥ nhi·ªÅu ph√©p c√πng power)
        counts = Counter(power)

        # L·∫•y danh s√°ch c√°c gi√° tr·ªã power duy nh·∫•t, s·∫Øp x·∫øp tƒÉng d·∫ßn,
        # v√† th√™m 3 ph·∫ßn t·ª≠ 0 ·ªü ƒë·∫ßu ƒë·ªÉ tr√°nh l·ªói truy c·∫≠p ch·ªâ s·ªë √¢m trong DP
        keys = [0, 0, 0] + sorted(list(counts.keys()))
        n = len(keys)

        # dp[i] = t·ªïng s√°t th∆∞∆°ng t·ªëi ƒëa c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c x√©t ƒë·∫øn ph√©p c√≥ gi√° tr·ªã keys[i]
        dp = [0] * n

        # Duy·ªát t·ª´ ph·∫ßn t·ª≠ th·ª© 3 tr·ªü ƒëi (v√¨ 3 ph·∫ßn t·ª≠ ƒë·∫ßu l√† 0)
        for i in range(3, n):
            # T·ªïng s√°t th∆∞∆°ng n·∫øu ch·ªçn t·∫•t c·∫£ ph√©p c√≥ gi√° tr·ªã keys[i]
            curr = counts[keys[i]] * keys[i]

            # N·∫øu c√°ch xa h∆°n 2 ƒë∆°n v·ªã so v·ªõi tr∆∞·ªõc ƒë√≥ ‚Üí kh√¥ng xung ƒë·ªôt
            if keys[i] - keys[i-1] > 2:
                dp[i] = dp[i-1] + curr

            # N·∫øu c√°ch 2 v·ªõi keys[i-2] ‚Üí ch·ªâ c·∫ßn so s√°nh dp[i-1] (kh√¥ng ch·ªçn) v√† dp[i-2] + curr (ch·ªçn)
            elif keys[i] - keys[i-2] > 2:
                dp[i] = max(dp[i-1], dp[i-2] + curr)

            # Ng∆∞·ª£c l·∫°i (c√°c gi√° tr·ªã qu√° g·∫ßn nhau, ch·ªâ c√≥ th·ªÉ l√πi 3 b∆∞·ªõc)
            else:
                dp[i] = max(dp[i-1], dp[i-3] + curr)

        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ l·ªõn nh·∫•t
        return dp[-1]


## üß† Gi·∫£i th√≠ch √Ω t∆∞·ªüng

# B√†i to√°n:

# > M·ªói ph√©p c√≥ gi√° tr·ªã `power[i]`.
# > N·∫øu ch·ªçn m·ªôt ph√©p c√≥ s·ª©c m·∫°nh `x`, ta **kh√¥ng th·ªÉ ch·ªçn** c√°c ph√©p c√≥ gi√° tr·ªã `x-2, x-1, x+1, x+2`.

# M·ª•c ti√™u:

# > T√≠nh **t·ªïng s√°t th∆∞∆°ng l·ªõn nh·∫•t** c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c.

# ---

# ## üí° √ù t∆∞·ªüng DP

# * G·ªçi `dp[i]` l√† t·ªïng s√°t th∆∞∆°ng t·ªëi ƒëa **x√©t ƒë·∫øn** gi√° tr·ªã ph√©p `keys[i]`.
# * ·ªû m·ªói b∆∞·ªõc, ta c√≥ hai l·ª±a ch·ªçn:

#   1. **Kh√¥ng ch·ªçn** ph√©p `keys[i]` ‚Üí `dp[i] = dp[i-1]`
#   2. **Ch·ªçn** ph√©p `keys[i]` ‚Üí c·ªông th√™m s√°t th∆∞∆°ng t·ª´ `keys[i]` v√† b·ªè qua nh·ªØng gi√° tr·ªã qu√° g·∫ßn n√≥ (kho·∫£ng c√°ch ‚â§ 2).

# ---

# ## üß© V√≠ d·ª• minh h·ªça

# Gi·∫£ s·ª≠:

# ```python
# power = [1, 2, 3, 6, 6, 8]
# ```

# ### B∆∞·ªõc 1Ô∏è‚É£: ƒê·∫øm s·ªë l∆∞·ª£ng

# ```
# counts = {1:1, 2:1, 3:1, 6:2, 8:1}
# keys = [0, 0, 0, 1, 2, 3, 6, 8]
# ```

# ### B∆∞·ªõc 2Ô∏è‚É£: T√≠nh DP

# |  i | keys[i] |   curr |                                  C√°ch t√≠nh | dp[i] |
# | -: | ------: | -----: | -----------------------------------------: | ----: |
# |  3 |       1 |  1√ó1=1 |                                    dp[2]+1 |     1 |
# |  4 |       2 |  1√ó2=2 | qu√° g·∫ßn (1‚Äì2), dp[4]=max(dp[3], dp[1]+2)=2 |     2 |
# |  5 |       3 |  1√ó3=3 | qu√° g·∫ßn (2‚Äì3), dp[5]=max(dp[4], dp[2]+3)=3 |     3 |
# |  6 |       6 | 2√ó6=12 |                  6‚Äì3>2 ‚Üí dp[6]=dp[5]+12=15 |    15 |
# |  7 |       8 |  1√ó8=8 |                   8‚Äì6>2 ‚Üí dp[7]=dp[6]+8=23 |    23 |

# ‚úÖ **K·∫øt qu·∫£:** `dp[-1] = 23`

# ---

# ## üîç T√≥m t·∫Øt logic:

# * D√πng `Counter` ƒë·ªÉ nh√≥m ph√©p gi·ªëng nhau ‚Üí ti·∫øt ki·ªám th·ªùi gian.
# * D√πng `dp` ƒë·ªÉ ch·ªçn ph√©p sao cho **kh√¥ng ch·ªçn hai ph√©p c√°ch nhau ‚â§ 2 ƒë∆°n v·ªã**.
# * D·ª±a v√†o **kho·∫£ng c√°ch gi·ªØa keys** m√† l√πi 1, 2, ho·∫∑c 3 b∆∞·ªõc ƒë·ªÉ t√≠nh gi√° tr·ªã t·ªët nh·∫•t.

# ---

# B·∫°n c√≥ mu·ªën m√¨nh th√™m **phi√™n b·∫£n c√≥ in b·∫£ng dp t·ª´ng b∆∞·ªõc (debug)** ƒë·ªÉ b·∫°n nh√¨n th·∫•y r√µ c√°ch n√≥ c·∫≠p nh·∫≠t kh√¥ng?























# import java.util.*;

# public class b64 {
#     static Scanner sc = new Scanner(System.in);

#     public static void main(String[] args) {
#         int n = sc.nextInt();
#         int[] power = new int[n];

#         for (int i = 0; i < n; i++) {
#             power[i] = sc.nextInt();
#         }

#         System.out.println(maximumTotalDamage(power));
#     }

#     public static long maximumTotalDamage(int[] power) {
#         // S·∫Øp x·∫øp m·∫£ng theo th·ª© t·ª± tƒÉng d·∫ßn ƒë·ªÉ x·ª≠ l√Ω d·ªÖ d√†ng h∆°n
#         Arrays.sort(power);

#         int n = power.length;
#         long[] dp = new long[n]; // dp[i] l∆∞u t·ªïng s√°t th∆∞∆°ng t·ªëi ƒëa c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c ƒë·∫øn v·ªã tr√≠ i
#         long md = 0; // md (max damage) l∆∞u gi√° tr·ªã dp l·ªõn nh·∫•t m√† kh√¥ng "va ch·∫°m" ph·∫°m vi 2 ƒë∆°n v·ªã
#         dp[0] = power[0]; // C∆° s·ªü: ch·ªâ c√≥ m·ªôt ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n th√¨ t·ªïng = power[0]

#         // Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ t·ª´ i = 1 ƒë·∫øn n-1
#         for (int i = 1, j = 0; i < n; i++) {
#             if (power[i] == power[i - 1]) {
#                 // N·∫øu c√πng gi√° tr·ªã power => c√≥ th·ªÉ c·ªông d·ªìn s√°t th∆∞∆°ng
#                 dp[i] = dp[i - 1] + power[i];
#             } else {
#                 // D·ªãch j sao cho power[j] + 2 < power[i]
#                 // Nghƒ©a l√†: t√¨m ph·∫ßn t·ª≠ xa nh·∫•t kh√¥ng "g·∫ßn k·ªÅ" (c√°ch nhau √≠t nh·∫•t 3)
#                 while (power[j] + 2 < power[i]) {
#                     md = Math.max(md, dp[j]);
#                     j++;
#                 }

#                 // T·ªïng s√°t th∆∞∆°ng t·∫°i i = gi√° tr·ªã l·ªõn nh·∫•t tr∆∞·ªõc ƒë√≥ (kh√¥ng tr√πng ph·∫°m vi) +
#                 // power[i]
#                 dp[i] = md + power[i];
#             }
#         }

#         // Tr·∫£ v·ªÅ t·ªïng s√°t th∆∞∆°ng l·ªõn nh·∫•t c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c
#         long max = 0;
#         for (long val : dp) {
#             max = Math.max(max, val);
#         }
#         return max;
#     }
# }

# // R·∫•t tuy·ªát üëè ‚Äî b·∫°n ƒëang xem m·ªôt **phi√™n b·∫£n t·ªëi ∆∞u v√† ng·∫Øn g·ªçn h∆°n** c·ªßa
# // thu·∫≠t to√°n cho b√†i
# // üëâ **LeetCode 3186. Maximum Total Damage With Spell Casting**

# // Gi·ªù m√¨nh s·∫Ω **gi·∫£i th√≠ch chi ti·∫øt t·ª´ng d√≤ng code v√† logic b√™n trong**, gi√∫p
# // b·∫°n hi·ªÉu **t·∫°i sao c√¥ng th·ª©c n√†y ho·∫°t ƒë·ªông**, kh√¥ng ch·ªâ ‚Äún√≥ ch·∫°y ƒë∆∞·ª£c‚Äù nh√© üëá

# // ---

# // ## üß† 1Ô∏è‚É£ T√≥m t·∫Øt √Ω t∆∞·ªüng b√†i to√°n

# // Ta c√≥ m·∫£ng `power[]`, m·ªói ph·∫ßn t·ª≠ l√† s√°t th∆∞∆°ng c·ªßa m·ªôt ph√©p thu·∫≠t.

# // N·∫øu ch·ªçn ph√©p c√≥ s√°t th∆∞∆°ng `x`,
# // b·∫°n **kh√¥ng th·ªÉ ch·ªçn** ph√©p n√†o c√≥ s√°t th∆∞∆°ng n·∫±m trong kho·∫£ng:

# // ```
# // [x - 2, x - 1, x + 1, x + 2]
# // ```

# // ‚û°Ô∏è M·ª•c ti√™u: ch·ªçn t·∫≠p h·ª£p ph√©p sao cho **t·ªïng s√°t th∆∞∆°ng l·ªõn nh·∫•t**.

# // ---

# // ## üí° 2Ô∏è‚É£ √ù t∆∞·ªüng t·ªïng qu√°t c·ªßa code

# // Thu·∫≠t to√°n n√†y th·ª±c hi·ªán:

# // 1. **S·∫Øp x·∫øp m·∫£ng `power`**
# // 2. D√πng **DP (m·ªôt chi·ªÅu)** ƒë·ªÉ ghi nh·ªõ ‚Äút·ªïng s√°t th∆∞∆°ng t·ªët nh·∫•t ƒë·∫øn hi·ªán
# // t·∫°i‚Äù.
# // 3. Bi·∫øn `md` l∆∞u **max damage** ƒë·∫°t ƒë∆∞·ª£c ·ªü c√°c ph√©p **kh√¥ng xung ƒë·ªôt** v·ªõi
# // ph√©p hi·ªán t·∫°i.
# // 4. Duy·ªát `i` t·ª´ tr√°i sang ph·∫£i,

# // * N·∫øu ph√©p hi·ªán t·∫°i gi·ªëng ph√©p tr∆∞·ªõc (`power[i] == power[i-1]`), c·ªông d·ªìn
# // l·∫°i.
# // * N·∫øu kh√°c, ki·ªÉm tra nh·ªØng ph√©p **qu√° xa h∆°n 2 ƒë∆°n v·ªã** (`power[j] + 2 <
# // power[i]`),
# // nghƒ©a l√† ph√©p t·∫°i `j` **kh√¥ng c√≤n xung ƒë·ªôt** v·ªõi ph√©p `i`, ta c·∫≠p nh·∫≠t `md =
# // max(md, dp[j])`.
# // * Sau ƒë√≥ `dp[i] = md + power[i]` (c·ªông ph√©p hi·ªán t·∫°i v√†o t·ªïng s√°t th∆∞∆°ng t·ªët
# // nh·∫•t tr∆∞·ªõc ƒë√≥).

# // ---

# // ## üß© 3Ô∏è‚É£ Gi·∫£i th√≠ch t·ª´ng ph·∫ßn chi ti·∫øt

# // ```java
# // Arrays.sort(power);
# // ```

# // üëâ S·∫Øp x·∫øp c√°c ph√©p theo s√°t th∆∞∆°ng tƒÉng d·∫ßn ƒë·ªÉ d·ªÖ so s√°nh ‚Äúkho·∫£ng c√°ch ‚â§ 2‚Äù.

# // ---

# // ```java
# // long[] dp = new long[power.length];
# // long md = 0;
# // dp[0] = power[0];
# // ```

# // üëâ

# // * `dp[i]`: t·ªïng s√°t th∆∞∆°ng t·ªëi ƒëa n·∫øu b·∫°n ch·ªçn ph√©p t·∫°i v·ªã tr√≠ `i`.
# // * `md`: "max damage" c·ªßa c√°c ph√©p **ƒë√£ x·ª≠ l√Ω m√† kh√¥ng xung ƒë·ªôt** v·ªõi ph√©p
# // hi·ªán t·∫°i.
# // * `dp[0] = power[0]`: ph√©p ƒë·∫ßu ti√™n, ch·ªâ c√≥ th·ªÉ l·∫•y ch√≠nh n√≥.

# // ---

# // ### üîÅ V√≤ng l·∫∑p ch√≠nh:

# // ```java
# // for (int i = 1, j = 0; i < power.length; i++) {
# // ```

# // `i`: ph√©p hi·ªán t·∫°i
# // `j`: ph√©p c≈© nh·∫•t ch∆∞a lo·∫°i kh·ªèi ph·∫°m vi c·∫•m (ƒëi·ªÅu ki·ªán c√°ch > 2)

# // ---

# // #### üìç Tr∆∞·ªùng h·ª£p 1 ‚Äî ph√©p tr√πng nhau

# // ```java
# // if (power[i] == power[i-1]) {
# // dp[i] = dp[i-1] + power[i];
# // }
# // ```

# // üëâ N·∫øu hai ph√©p c√≥ **s√°t th∆∞∆°ng b·∫±ng nhau**, b·∫°n c√≥ th·ªÉ c·ªông d·ªìn s√°t th∆∞∆°ng
# // v√¨ ch√∫ng kh√¥ng ‚Äúxung ƒë·ªôt‚Äù (gi·ªëng nhau kh√¥ng b·ªã c·∫•m).

# // **V√≠ d·ª•:**
# // `[6, 6, 6]` ‚Üí c√≥ th·ªÉ c·ªông t·∫•t c·∫£:
# // `dp = [6, 12, 18]`

# // ---

# // #### üìç Tr∆∞·ªùng h·ª£p 2 ‚Äî ph√©p m·ªõi kh√°c

# // ```java
# // else {
# // while (power[j] + 2 < power[i]) {
# // md = Math.max(md, dp[j]);
# // j++;
# // }
# // dp[i] = md + power[i];
# // }
# // ```

# // Gi·∫£i th√≠ch chi ti·∫øt üëá

# // * `while (power[j] + 2 < power[i])`:
# // Khi ph√©p `j` **c√°ch xa h∆°n 2 ƒë∆°n v·ªã** so v·ªõi ph√©p hi·ªán t·∫°i,
# // th√¨ ph√©p `j` **an to√†n** (kh√¥ng b·ªã xung ƒë·ªôt).
# // ‚Üí C·∫≠p nh·∫≠t `md = max(md, dp[j])`.

# // * Sau khi c·∫≠p nh·∫≠t xong,
# // `dp[i] = md + power[i]`
# // Nghƒ©a l√† t·ªïng s√°t th∆∞∆°ng t·ªëi ƒëa khi ch·ªçn ph√©p hi·ªán t·∫°i =
# // ‚Äút·ªïng s√°t th∆∞∆°ng t·ªët nh·∫•t kh√¥ng xung ƒë·ªôt tr∆∞·ªõc ƒë√≥‚Äù + ‚Äús√°t th∆∞∆°ng ph√©p n√†y‚Äù.

# // ---

# // ### ‚úÖ Sau v√≤ng l·∫∑p

# // ```java
# // long max = 0;
# // for (long n : dp) {
# // max = Math.max(max, n);
# // }
# // return max;
# // ```

# // üëâ T√¨m t·ªïng s√°t th∆∞∆°ng l·ªõn nh·∫•t trong `dp` ‚Äî ƒë√¢y l√† k·∫øt qu·∫£ cu·ªëi c√πng.

# // ---

# // ## üìò 4Ô∏è‚É£ V√≠ d·ª• minh h·ªça c·ª• th·ªÉ

# // ```
# // Input: power = [1, 1, 3, 4]
# // ```

# // Sau khi s·∫Øp x·∫øp:

# // ```
# // power = [1, 1, 3, 4]
# // ```

# // | i | power[i] | dp[i] | j | md | Gi·∫£i th√≠ch |
# // | - | -------- | ----- | --- | -- |
# // -------------------------------------------------------- |
# // | 0 | 1 | 1 | 0 | 0 | B·∫Øt ƒë·∫ßu |
# // | 1 | 1 | 2 | 0 | 0 | C·ªông d·ªìn v√¨ tr√πng |
# // | 2 | 3 | 3 | 0‚Üí1 | 2 | 1 v√† 3 c√°ch 2, n√™n md=dp[1]=2 |
# // | 3 | 4 | 6 | 0‚Üí2 | 3 | 4 c√°ch 1 v·ªõi 3, nh∆∞ng 1 c√°ch 3 h∆°n 2 ‚Üí md=3,
# // dp[3]=3+3=6 |

# // ‚Üí **K·∫øt qu·∫£ = 6**

# // ---

# // ## ‚è±Ô∏è ƒê·ªô ph·ª©c t·∫°p

# // | Lo·∫°i | M·ª©c ƒë·ªô |
# // | --------- | --------------------------------------- |
# // | Th·ªùi gian | O(n) (v√¨ `i` v√† `j` ch·ªâ tƒÉng m·ªôt chi·ªÅu) |
# // | B·ªô nh·ªõ | O(n) |

# // ---

# // ## üîç T√≥m t·∫Øt logic c·ªët l√µi

# // | Th√†nh ph·∫ßn | √ù nghƒ©a |
# // | ------------------------------- |
# // ---------------------------------------------------- |
# // | `dp[i]` | T·ªïng s√°t th∆∞∆°ng t·ªëi ƒëa khi ch·ªçn ph√©p t·∫°i i |
# // | `md` | Max damage c·ªßa ph√©p kh√¥ng xung ƒë·ªôt |
# // | `while (power[j]+2 < power[i])` | Lo·∫°i b·ªè ph√©p kh√¥ng ·∫£nh h∆∞·ªüng n·ªØa |
# // | `dp[i] = md + power[i]` | Ch·ªçn ph√©p hi·ªán t·∫°i + k·∫øt qu·∫£ t·ªëi ∆∞u an to√†n tr∆∞·ªõc
# // ƒë√≥ |
# // | `dp[i] = dp[i-1] + power[i]` | N·∫øu ph√©p tr√πng nhau, c·ªông d·ªìn lu√¥n |

# // ---

# // N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ **v·∫Ω s∆° ƒë·ªì d√≤ng th·ªùi gian `i, j` di chuy·ªÉn** cho v√≠
# // d·ª• `[1, 1, 3, 4, 6, 6]`, gi√∫p b·∫°n th·∫•y r√µ c√°ch `md` c·∫≠p nh·∫≠t ‚Äî nh√¨n h√¨nh l√†
# // hi·ªÉu 100%.
# // B·∫°n c√≥ mu·ªën m√¨nh v·∫Ω minh h·ªça ƒë√≥ kh√¥ng?

# // ---

# // ## üìù ƒê·ªÅ b√†i (phi√™n b·∫£n ti·∫øng Vi·ªát)

# // * Cho m·∫£ng `power`, trong ƒë√≥ m·ªói ph·∫ßn t·ª≠ l√† s√°t th∆∞∆°ng (damage) c·ªßa m·ªôt ph√©p
# // thu·∫≠t m√† b·∫°n c√≥ th·ªÉ thi tri·ªÉn (c√≥ th·ªÉ c√≥ ph√©p tr√πng s√°t th∆∞∆°ng).
# // * Khi b·∫°n thi tri·ªÉn m·ªôt ph√©p c√≥ s√°t th∆∞∆°ng `x = power[i]`, b·∫°n **kh√¥ng th·ªÉ**
# // thi tri·ªÉn b·∫•t k·ª≥ ph√©p thu·∫≠t c√≥ s√°t th∆∞∆°ng trong kho·∫£ng:

# // ```
# // x - 2, x - 1, x + 1, x + 2
# // ```

# // t·ª©c l√† 2 gi√° tr·ªã s√°t th∆∞∆°ng b√™n c·∫°nh ƒë·ªÅu b·ªã ‚Äúkh√≥a‚Äù.
# // * M·ªói ph√©p ch·ªâ thi tri·ªÉn ƒë∆∞·ª£c **m·ªôt l·∫ßn**.
# // * Y√™u c·∫ßu: **l·∫•y t·ªïng s√°t th∆∞∆°ng t·ªëi ƒëa** m√† b·∫°n c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c b·∫±ng c√°ch
# // ch·ªçn m·ªôt t·∫≠p c√°c ph√©p th·ªèa m√£n r√†ng bu·ªôc tr√™n.

# // V√≠ d·ª•:

# // * `power = [1, 1, 3, 4]` ‚Üí output = 6
# // Gi·∫£i th√≠ch: b·∫°n c√≥ th·ªÉ ch·ªçn hai ph√©p c√≥ s√°t th∆∞∆°ng 1 (t·ªïng = 2) v√† ph√©p c√≥
# // s√°t th∆∞∆°ng 4 (t·ªïng = 4), c·ªông l·∫°i = 6.
# // * `power = [7, 1, 6, 6]` ‚Üí output = 13
# // Gi·∫£i: ch·ªçn ph√©p 1 + hai ph√©p 6 = 1 + 6 + 6 = 13.

# // ƒê·ªÅ b√†i g·ªëc: n·∫øu ch·ªçn ph√©p s√°t th∆∞∆°ng `x`, b·∫°n **kh√¥ng ƒë∆∞·ª£c ch·ªçn** ph√©p c√≥ s√°t
# // th∆∞∆°ng `x ¬± 1` ho·∫∑c `x ¬± 2`. ([Leetcode][1])

# // ---

# // ## üí° √ù t∆∞·ªüng & ph√¢n t√≠ch

# // ƒê√¢y l√† b√†i to√°n ki·ªÉu **quy ho·∫°ch ƒë·ªông + ch·ªçn/kh√¥ng ch·ªçn** v·ªõi r√†ng bu·ªôc ‚Äúc√°ch
# // nhau ¬±1 ho·∫∑c ¬±2 kh√¥ng ƒë∆∞·ª£c ch·ªçn‚Äù.

# // M·ªôt c√°ch ƒë·ªÉ hi·ªÉu l√†:

# // * Ta c√≥ nhi·ªÅu gi√° tr·ªã `x` c√≥ th·ªÉ xu·∫•t hi·ªán nhi·ªÅu l·∫ßn (c√≥ ph√©p thu·∫≠t tr√πng s√°t
# // th∆∞∆°ng).
# // * N·∫øu b·∫°n quy·∫øt ƒë·ªãnh ‚Äúl·∫•y‚Äù c√°c ph√©p c√≥ s√°t th∆∞∆°ng `x`, th√¨ b·∫°n kh√¥ng th·ªÉ l·∫•y
# // c√°c ph√©p c√≥ s√°t th∆∞∆°ng `x-2, x-1, x+1, x+2`.

# // ƒêi·ªÅu n√†y g·ª£i nh·ªõ b√†i to√°n House Robber (v·ªõi kho·∫£ng c√°ch 1) ho·∫∑c ‚Äúdelete and
# // earn‚Äù (LeetCode) ‚Äî nh∆∞ng ·ªü ƒë√¢y r√†ng bu·ªôc ‚Äúc√°ch 2 b∆∞·ªõc‚Äù (¬±2) thay v√¨ ¬±1.

# // **C√°ch ti·∫øp c·∫≠n ph·ªï bi·∫øn**:

# // 1. **ƒê·∫øm t·∫ßn su·∫•t** t·ª´ng gi√° tr·ªã s√°t th∆∞∆°ng `x` ‚Äî g·ªçi `cnt[x] = s·ªë l·∫ßn xu·∫•t
# // hi·ªán` c·ªßa `x`.

# // 2. **S·∫Øp x·∫øp** c√°c gi√° tr·ªã s√°t th∆∞∆°ng **ƒë·ªôc nh·∫•t** (unique) theo th·ª© t·ª± tƒÉng
# // d·∫ßn. G·ªçi m·∫£ng `vals` l√† danh s√°ch c√°c gi√° tr·ªã s√°t th∆∞∆°ng duy nh·∫•t, ƒë√£ s·∫Øp
# // x·∫øp.

# // 3. **X√¢y d·ª±ng m·∫£ng ti·∫øp theo (next index)**:
# // V·ªõi m·ªói gi√° tr·ªã `vals[i]`, n·∫øu b·∫°n ‚Äúl·∫•y‚Äù n√≥, b·∫°n ph·∫£i nh·∫£y ƒë·∫øn ch·ªâ s·ªë `j` sao
# // cho `vals[j] > vals[i] + 2`.
# // D√πng binary search ƒë·ªÉ t√¨m `j = first index trong vals c√≥ gi√° tr·ªã > vals[i] +
# // 2`.

# // 4. **DP / memoization** ho·∫∑c **DP d∆∞·ªõi d·∫°ng b·∫£ng**:

# // ƒê·ªãnh nghƒ©a `dp[i]` l√† ‚Äút·ªïng s√°t th∆∞∆°ng t·ªëi ƒëa n·∫øu b·∫°n xem x√©t t·ª´ v·ªã tr√≠ `i`
# // (gi√° tr·ªã `vals[i]`) tr·ªü ƒëi‚Äù.

# // Khi ·ªü `i`, b·∫°n c√≥ hai l·ª±a ch·ªçn:

# // * **B·ªè (skip)** gi√° tr·ªã `vals[i]` ‚Üí sang `i + 1`, t·ª©c `dp[i+1]`
# // * **L·∫•y (take)** t·∫•t c·∫£ c√°c ph√©p c√≥ s√°t th∆∞∆°ng `vals[i]` ‚Üí th√™m `vals[i] *
# // cnt[vals[i]]` + `dp[j]`, v·ªõi `j = nextIndex[i]`

# // => `dp[i] = max( skip, take )`

# // 5. K·∫øt qu·∫£ l√† `dp[0]`.

# // ƒê·ªô ph·ª©c t·∫°p: s·∫Øp x·∫øp `O(n log n)`, x√¢y `nextIndex` v·ªõi binary search m·ªói ph·∫ßn
# // t·ª≠, v√† DP l√† `O(n)`. ([Leetcode][1])

# // ---

# // ## üìÇ S∆° ƒë·ªì & v√≠ d·ª• c·ª• th·ªÉ

# // Gi·∫£ s·ª≠:

# // ```
# // power = [1, 1, 3, 4]
# // ```

# // * ƒê·∫øm: `cnt[1] = 2`, `cnt[3] = 1`, `cnt[4] = 1`
# // * Gi√° tr·ªã duy nh·∫•t ƒë√£ s·∫Øp x·∫øp: `vals = [1, 3, 4]`
# // * T√≠nh nextIndex:

# // * V·ªõi `vals[0] = 1`, t√¨m gi√° tr·ªã > 3 ‚Üí `vals[1] = 3`, `vals[2] = 4` ‚Üí first >
# // 3 l√† `vals[2]` (index = 2)
# // * V·ªõi `vals[1] = 3`, t√¨m > 5 ‚Üí kh√¥ng c√≥ ‚Üí nextIndex = len
# // * V·ªõi `vals[2] = 4`, t√¨m > 6 ‚Üí kh√¥ng c√≥ ‚Üí nextIndex = len

# // V·∫≠y next = `[2, 3, 3]` (n·∫øu len = 3).

# // DP t·ª´ ph·∫£i sang tr√°i:

# // * `i = 2` (value 4):
# // take = `4 * cnt[4] + dp[next[2]] = 4 * 1 + dp[3] = 4 + 0 = 4`
# // skip = `dp[3] = 0`
# // ‚Üí `dp[2] = 4`

# // * `i = 1` (value 3):
# // take = `3 * cnt[3] + dp[next[1]] = 3 * 1 + 0 = 3`
# // skip = `dp[2] = 4`
# // ‚Üí `dp[1] = max(3, 4) = 4`

# // * `i = 0` (value 1):
# // take = `1 * cnt[1] + dp[next[0]] = 1 * 2 + dp[2] = 2 + 4 = 6`
# // skip = `dp[1] = 4`
# // ‚Üí `dp[0] = max(6, 4) = 6`

# // K·∫øt qu·∫£ = `6`.

# // ---

# // N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ vi·∫øt **code Python + Java** v·ªõi ch√∫ th√≠ch cho ƒë·ªÅ
# // n√†y v√† gi·∫£i th√≠ch t·ª´ng d√≤ng. B·∫°n mu·ªën m√¨nh g·ª≠i code ƒë√≥ kh√¥ng?

# // [1]:
# // https://leetcode.ca/2024-06-25-3186-Maximum-Total-Damage-With-Spell-Casting/?utm_source=chatgpt.com
# // "3186 - Maximum Total Damage With Spell Casting - leetcode.ca"
