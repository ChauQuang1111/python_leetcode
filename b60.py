# 2300. Successful Pairs of Spells and Potions(08/10/2025)
# R·∫•t hay ‚Äî b·∫°n ƒëang h·ªèi v·ªÅ **m·ªôt l·ªùi gi·∫£i kh√°c** cho b√†i **2300. Successful Pairs of Spells and Potions** m√† **kh√¥ng d√πng binary search**, m√† d√πng **ƒë·∫øm t·∫ßn su·∫•t + m·∫£ng t√≠ch l≈©y (prefix sum / cumulative sum)** ‚úÖ

# D∆∞·ªõi ƒë√¢y l√† **phi√™n b·∫£n ƒë√£ th√™m ch√∫ th√≠ch chi ti·∫øt t·ª´ng d√≤ng** + **gi·∫£i th√≠ch thu·∫≠t to√°n ƒë·∫ßy ƒë·ªß** üëá

# ---

# ### ‚úÖ Code c√≥ ch√∫ th√≠ch

# ```python
# from typing import List
from typing import List
class Solution:
    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:
        max_spells = max(spells)  # 1Ô∏è‚É£ T√¨m gi√° tr·ªã spell l·ªõn nh·∫•t ƒë·ªÉ x√°c ƒë·ªãnh k√≠ch th∆∞·ªõc m·∫£ng ƒë·∫øm
        smaller_count = [0] * (max_spells + 1)  # 2Ô∏è‚É£ M·∫£ng ƒë·∫øm s·ªë potion c√≥ th·ªÉ gh√©p v·ªõi spell >= gi√° tr·ªã n√†o ƒë√≥

        # 3Ô∏è‚É£ V·ªõi m·ªói potion, t√≠nh "gi√° tr·ªã spell t·ªëi thi·ªÉu" c·∫ßn ƒë·ªÉ t·∫°o ra c·∫∑p th√†nh c√¥ng
        for num in potions:
            curr = success // num  # Spell c·∫ßn √≠t nh·∫•t l√† success / num (l√†m tr√≤n l√™n)
            if success % num != 0:  # N·∫øu kh√¥ng chia h·∫øt ‚Üí ph·∫£i l√†m tr√≤n l√™n
                curr += 1
            if curr > max_spells:   # N·∫øu spell l·ªõn nh·∫•t v·∫´n kh√¥ng ƒë·ªß m·∫°nh ‚Üí b·ªè qua
                continue
            smaller_count[curr] += 1  # Spell t·ª´ curr tr·ªü l√™n ƒë·ªÅu "th√†nh c√¥ng" v·ªõi potion n√†y

        # 4Ô∏è‚É£ T√≠nh t·ªïng t√≠ch l≈©y ƒë·ªÉ bi·∫øt v·ªõi m·ªói spell ‚â§ x, c√≥ bao nhi√™u potion th√†nh c√¥ng
        for i in range(1, len(smaller_count)):
            smaller_count[i] += smaller_count[i - 1]

        # 5Ô∏è‚É£ V·ªõi m·ªói spell, l·∫•y ra s·ªë potion th·ªèa ƒëi·ªÅu ki·ªán
        ans = []
        for num in spells:
            ans.append(smaller_count[num])
        return ans
# ```

# ---

# ### üß† Gi·∫£i th√≠ch thu·∫≠t to√°n

# #### üéØ M·ª•c ti√™u

# Ta c·∫ßn ƒë·∫øm **s·ªë l∆∞·ª£ng potions** sao cho:

# ```
# spell * potion >= success
# ```

# ---

# #### üß© √ù t∆∞·ªüng ch√≠nh

# Thay v√¨ duy·ªát ho·∫∑c t√¨m nh·ªã ph√¢n, ta **chuy·ªÉn h∆∞·ªõng v·∫•n ƒë·ªÅ**:

# * V·ªõi m·ªói `potion`, ta t√≠nh **gi√° tr·ªã spell nh·ªè nh·∫•t c·∫ßn thi·∫øt** ƒë·ªÉ th√†nh c√¥ng:

#   ```
#   spell_min = ceil(success / potion)
#   ```
# * T·ª©c l√†:
#   N·∫øu `spell >= spell_min` ‚Üí c·∫∑p n√†y **th√†nh c√¥ng**.
#   N·∫øu `spell < spell_min` ‚Üí **th·∫•t b·∫°i**.

# ---

# #### ‚öôÔ∏è C√°ch ho·∫°t ƒë·ªông c·ª• th·ªÉ

# | potion | success | success // potion | C·∫ßn l√†m tr√≤n | spell_min |
# | :----: | :-----: | :---------------: | :----------: | :-------: |
# |    2   |    10   |         5         |   ‚úÖ +1 ‚Üí 6   |     6     |
# |    3   |    10   |         3         |   ‚úÖ +1 ‚Üí 4   |     4     |
# |    5   |    10   |         2         |       ‚ùå      |     2     |

# V·∫≠y:

# * Potion c√≥ `spell_min = 6`: ch·ªâ spell ‚â• 6 th√†nh c√¥ng.
# * Potion c√≥ `spell_min = 4`: ch·ªâ spell ‚â• 4 th√†nh c√¥ng.
# * Potion c√≥ `spell_min = 2`: ch·ªâ spell ‚â• 2 th√†nh c√¥ng.

# Ta **tƒÉng ƒë·∫øm t·∫°i ch·ªâ s·ªë `spell_min`** ‚Üí nghƒ©a l√† m·ªçi spell t·ª´ gi√° tr·ªã ƒë√≥ tr·ªü l√™n **ƒë∆∞·ª£c c·ªông th√™m 1** potion th√†nh c√¥ng.

# ---

# #### üîÑ Sau ƒë√≥ d√πng prefix sum:

# * `smaller_count[i]` = t·ªïng s·ªë potion c√≥ th·ªÉ gh√©p th√†nh c√¥ng v·ªõi spell ‚â§ i.

# ---

# #### üßÆ V√≠ d·ª• c·ª• th·ªÉ

# ```
# spells = [3, 5, 10]
# potions = [2, 3, 5]
# success = 10
# ```

# **B∆∞·ªõc 1:**

# | Potion | success // num | L√†m tr√≤n | spell_min | Ghi v√†o m·∫£ng smaller_count |
# | :----- | :------------- | :------- | :-------- | :------------------------- |
# | 2      | 5              | +1       | 6         | smaller_count[6] += 1      |
# | 3      | 3              | +1       | 4         | smaller_count[4] += 1      |
# | 5      | 2              | 0        | 2         | smaller_count[2] += 1      |

# **smaller_count (ban ƒë·∫ßu):**

# ```
# [0, 0, 1, 0, 1, 0, 1]
# ```

# **B∆∞·ªõc 2: T√≠nh t·ªïng t√≠ch l≈©y**

# ```
# [0, 0, 1, 1, 2, 2, 3]
# ```

# **B∆∞·ªõc 3: L·∫•y k·∫øt qu·∫£ cho t·ª´ng spell**

# | Spell | smaller_count[spell] | K·∫øt qu·∫£     |
# | :---- | :------------------- | :---------- |
# | 3     | 1                    | ‚úÖ 1 potion  |
# | 5     | 2                    | ‚úÖ 2 potions |
# | 10    | 3                    | ‚úÖ 3 potions |

# ‚Üí **Output:** `[1, 2, 3]`

# ---

# ### ‚öñÔ∏è ƒê·ªô ph·ª©c t·∫°p

# * **Th·ªùi gian:** `O(max(spells) + len(potions))`
#   (Nhanh h∆°n `O(n log n)` c·ªßa c√°ch binary search n·∫øu gi√° tr·ªã spell nh·ªè)
# * **Kh√¥ng gian:** `O(max(spell))`

# ---

# üëâ **T√≥m l·∫°i**:
# Thu·∫≠t to√°n n√†y d√πng **m·∫£ng ƒë·∫øm + prefix sum** ƒë·ªÉ thay th·∫ø cho **binary search**, gi√∫p t·ªëi ∆∞u khi `max(spells)` nh·ªè h∆°n s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠.

# ---

# B·∫°n c√≥ mu·ªën m√¨nh v·∫Ω **bi·ªÉu ƒë·ªì minh h·ªça (tr·ª•c spell v√† s·ªë potion th√†nh c√¥ng)** ƒë·ªÉ d·ªÖ h√¨nh dung h∆°n kh√¥ng?

# Dƒ© nhi√™n üòä ‚Äî ƒë√¢y l√† **gi·∫£i th√≠ch chi ti·∫øt ƒë·ªÅ b√†i LeetCode 2300: ‚ÄúSuccessful Pairs of Spells and Potions‚Äù**

# ---

# ### üß© **ƒê·ªÅ b√†i**

# B·∫°n ƒë∆∞·ª£c cho:

# * M·ªôt m·∫£ng **spells** g·ªìm `n` ph·∫ßn t·ª≠ (m·ªói ph·∫ßn t·ª≠ l√† *s·ª©c m·∫°nh ph√©p thu·∫≠t*).
# * M·ªôt m·∫£ng **potions** g·ªìm `m` ph·∫ßn t·ª≠ (m·ªói ph·∫ßn t·ª≠ l√† *s·ª©c m·∫°nh thu·ªëc ti√™n*).
# * M·ªôt s·ªë nguy√™n **success** ‚Äî ƒë√¢y l√† *m·ª©c ng∆∞·ª°ng th√†nh c√¥ng*.

# M·ªôt c·∫∑p `(spell, potion)` ƒë∆∞·ª£c g·ªçi l√† **th√†nh c√¥ng (successful)** n·∫øu:

# ```
# spell * potion >= success
# ```

# ---

# ### üéØ **Y√™u c·∫ßu**

# V·ªõi **m·ªói spell** trong m·∫£ng `spells`, h√£y **ƒë·∫øm** xem c√≥ bao nhi√™u potion trong `potions` sao cho c·∫∑p ƒë√≥ l√† *th√†nh c√¥ng*.

# Tr·∫£ v·ªÅ m·ªôt m·∫£ng `ans` c√≥ c√πng ƒë·ªô d√†i v·ªõi `spells`, trong ƒë√≥:

# ```
# ans[i] = s·ªë l∆∞·ª£ng potion sao cho spells[i] * potion >= success
# ```

# ---

# ### üí° **V√≠ d·ª•**

# #### üßÆ Input:

# ```python
# spells = [5, 1, 3]
# potions = [1, 2, 3, 4, 5]
# success = 7
# ```

# #### ‚úÖ Output:

# ```python
# [4, 0, 3]
# ```

# #### üîç Gi·∫£i th√≠ch:

# * Spell = 5:

#   * 5√ó1=5 ‚ùå
#   * 5√ó2=10 ‚úÖ
#   * 5√ó3=15 ‚úÖ
#   * 5√ó4=20 ‚úÖ
#   * 5√ó5=25 ‚úÖ
#     ‚Üí C√≥ **4 potion th√†nh c√¥ng**

# * Spell = 1:

#   * 1√ó1=1 ‚ùå
#   * 1√ó2=2 ‚ùå
#   * 1√ó3=3 ‚ùå
#   * 1√ó4=4 ‚ùå
#   * 1√ó5=5 ‚ùå
#     ‚Üí C√≥ **0 potion th√†nh c√¥ng**

# * Spell = 3:

#   * 3√ó1=3 ‚ùå
#   * 3√ó2=6 ‚ùå
#   * 3√ó3=9 ‚úÖ
#   * 3√ó4=12 ‚úÖ
#   * 3√ó5=15 ‚úÖ
#     ‚Üí C√≥ **3 potion th√†nh c√¥ng**

# ‚û°Ô∏è K·∫øt qu·∫£: `[4, 0, 3]`

# ---

# ### ‚öôÔ∏è **T∆∞ duy gi·∫£i**

# 1. S·∫Øp x·∫øp `potions` tƒÉng d·∫ßn.
# 2. V·ªõi m·ªói `spell`, t√¨m potion nh·ªè nh·∫•t sao cho `spell * potion >= success`.
# 3. D√πng **binary search** (t√¨m ki·∫øm nh·ªã ph√¢n) ƒë·ªÉ nhanh h∆°n (O(n log m)).

# V√≠ d·ª•:

# ```python
# import bisect

# def successfulPairs(spells, potions, success):
#     potions.sort()
#     m = len(potions)
#     res = []

#     for s in spells:
#         # T√¨m v·ªã tr√≠ ƒë·∫ßu ti√™n trong potions sao cho s * potions[idx] >= success
#         idx = bisect.bisect_left(potions, success / s)
#         res.append(m - idx)
    
#     return res
# ```

# ---

# N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ **gi·∫£i th√≠ch chi ti·∫øt t·ª´ng d√≤ng code** ho·∫∑c **v·∫Ω b·∫£ng m√¥ ph·ªèng ch·∫°y v√≠ d·ª•** cho b√†i n√†y ‚Äî b·∫°n mu·ªën ph·∫ßn n√†o tr∆∞·ªõc?
