# //  Delete Nodes From Linked List Present (01/11/2025)

# // ```python
# // # ƒê·ªãnh nghƒ©a l·ªõp ListNode cho danh s√°ch li√™n k·∫øt ƒë∆°n
from typing import Optional


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val      # Gi√° tr·ªã c·ªßa node hi·ªán t·∫°i
        self.next = next    # Con tr·ªè t·ªõi node k·∫ø ti·∫øp


class Solution:
    def modifiedList(self, nums: list[int], head: Optional[ListNode]) -> Optional[ListNode]:
        if not head:
            return None  # N·∫øu danh s√°ch li√™n k·∫øt r·ªóng th√¨ tr·∫£ v·ªÅ None

        sety = set(nums)  # Chuy·ªÉn m·∫£ng nums th√†nh t·∫≠p h·ª£p ƒë·ªÉ t√¨m ki·∫øm nhanh h∆°n O(1)

        # --- B∆∞·ªõc 1: Lo·∫°i b·ªè c√°c node ƒë·∫ßu c√≥ gi√° tr·ªã thu·ªôc sety ---
        while head and head.val in sety:
            head = head.next  # Di chuy·ªÉn head t·ªõi node ti·∫øp theo

        # N·∫øu t·∫•t c·∫£ c√°c node b·ªã lo·∫°i b·ªè th√¨ danh s√°ch r·ªóng
        if not head:
            return None

        # --- B∆∞·ªõc 2: Duy·ªát qua ph·∫ßn c√≤n l·∫°i c·ªßa danh s√°ch ---
        prev = head          # prev l√† node tr∆∞·ªõc node ƒëang x√©t
        curr = head.next     # curr l√† node hi·ªán t·∫°i

        while curr:  # Duy·ªát ƒë·∫øn khi h·∫øt danh s√°ch
            if curr.val in sety:
                # N·∫øu node hi·ªán t·∫°i c√≥ gi√° tr·ªã n·∫±m trong sety ‚Üí b·ªè qua node n√†y
                prev.next = curr.next
            else:
                # N·∫øu node h·ª£p l·ªá ‚Üí gi·ªØ l·∫°i node n√†y
                prev = curr
            curr = curr.next  # Di chuy·ªÉn sang node k·∫ø ti·∫øp

        # --- B∆∞·ªõc 3: Tr·∫£ v·ªÅ danh s√°ch ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a ---
        return head




# // **Gi·∫£i th√≠ch thu·∫≠t to√°n:**

# // 1. **T·∫°o t·∫≠p h·ª£p (`sety`)** t·ª´ `nums` ƒë·ªÉ c√≥ th·ªÉ ki·ªÉm tra nhanh xem m·ªôt gi√° tr·ªã c√≥ c·∫ßn b·ªã x√≥a kh√¥ng (`O(1)` th·ªùi gian truy c·∫≠p).
# // 2. **B·ªè qua c√°c node ƒë·∫ßu ti√™n** n·∫øu gi√° tr·ªã c·ªßa ch√∫ng n·∫±m trong `nums`.
# // 3. Sau khi ƒë√£ ƒë·∫øn ƒë∆∞·ª£c node ƒë·∫ßu ti√™n kh√¥ng b·ªã x√≥a, ta b·∫Øt ƒë·∫ßu **duy·ªát danh s√°ch**:

# //    * N·∫øu `head.val` **kh√¥ng** n·∫±m trong `sety`, gi·ªØ l·∫°i node ƒë√≥.
# //    * N·∫øu `head.val` **n·∫±m trong** `sety`, b·ªè qua node ƒë√≥.
# // 4. **X·ª≠ l√Ω node cu·ªëi c√πng**, ƒë·∫£m b·∫£o r·∫±ng n·∫øu n√≥ c·∫ßn b·ªã x√≥a th√¨ ng·∫Øt li√™n k·∫øt.
# // 5. **Tr·∫£ v·ªÅ node ƒë·∫ßu ti√™n h·ª£p l·ªá (`temp`)**, l√† ƒë·∫ßu c·ªßa danh s√°ch m·ªõi.

# // ‚è± **ƒê·ªô ph·ª©c t·∫°p th·ªùi gian:** O(n)
# // üíæ **ƒê·ªô ph·ª©c t·∫°p b·ªô nh·ªõ:** O(k), v·ªõi k l√† s·ªë ph·∫ßn t·ª≠ trong `nums` (do d√πng `set`).

# // ---

# // ## üß© **ƒê·ªÅ b√†i g·ªëc (LeetCode 3217: Delete Nodes From Linked List Present in Array)**

# // B·∫°n ƒë∆∞·ª£c cho:

# // 1. M·ªôt **m·∫£ng s·ªë nguy√™n `nums`**.
# // 2. M·ªôt **danh s√°ch li√™n k·∫øt ƒë∆°n `head`** (linked list) ‚Äî m·ªói node trong danh s√°ch ch·ª©a m·ªôt gi√° tr·ªã nguy√™n.

# // ---

# // ### üéØ **Y√™u c·∫ßu**

# // H√£y **x√≥a t·∫•t c·∫£ c√°c node** trong linked list **c√≥ gi√° tr·ªã xu·∫•t hi·ªán trong m·∫£ng `nums`**.

# // Sau khi x√≥a xong, **tr·∫£ v·ªÅ con tr·ªè ƒë·∫øn ƒë·∫ßu danh s√°ch m·ªõi (head m·ªõi)**.

# // ---

# // ### üß† **V√≠ d·ª• minh h·ªça**

# // #### üì• Input:

# // ```
# // nums = [1, 2, 3]
# // linked list: 1 -> 2 -> 3 -> 4 -> 5
# // ```

# // #### ‚öôÔ∏è Qu√° tr√¨nh x·ª≠ l√Ω:

# // * C√°c s·ªë c·∫ßn x√≥a l√†: `1, 2, 3`
# // * Duy·ªát qua danh s√°ch:

# //   * Node 1 (gi√° tr·ªã 1) ‚Üí b·ªã x√≥a (v√¨ c√≥ trong nums)
# //   * Node 2 ‚Üí b·ªã x√≥a
# //   * Node 3 ‚Üí b·ªã x√≥a
# //   * Node 4 ‚Üí gi·ªØ l·∫°i
# //   * Node 5 ‚Üí gi·ªØ l·∫°i

# // #### üì§ Output:

# // ```
# // 4 -> 5
# // ```

# // ---

# // ### üí° **√ù t∆∞·ªüng thu·∫≠t to√°n**

# // 1. D√πng m·ªôt **HashSet** (t·∫≠p h·ª£p) ƒë·ªÉ l∆∞u t·∫•t c·∫£ c√°c gi√° tr·ªã trong `nums` ‚Üí gi√∫p ki·ªÉm tra nhanh xem m·ªôt gi√° tr·ªã c√≥ n·∫±m trong `nums` kh√¥ng (O(1)).
# // 2. Duy·ªát qua danh s√°ch li√™n k·∫øt:

# //    * N·∫øu gi√° tr·ªã c·ªßa node hi·ªán t·∫°i **c√≥ trong HashSet** ‚Üí b·ªè qua node ƒë√≥ (x√≥a).
# //    * N·∫øu kh√¥ng ‚Üí gi·ªØ l·∫°i node.
# // 3. Tr·∫£ v·ªÅ con tr·ªè `head` m·ªõi c·ªßa danh s√°ch sau khi ƒë√£ x√≥a.

# // ---

# // ### ‚öôÔ∏è **V√≠ d·ª• 2**

# // #### Input:

# // ```
# // nums = [2, 5, 8]
# // head = 2 -> 8 -> 3 -> 5 -> 10 -> 2
# // ```

# // #### Qu√° tr√¨nh:

# // * 2: x√≥a (v√¨ c√≥ trong nums)
# // * 8: x√≥a
# // * 3: gi·ªØ l·∫°i
# // * 5: x√≥a
# // * 10: gi·ªØ l·∫°i
# // * 2: x√≥a

# // #### Output:

# # // ```
# # // 3 -> 10
# # // ```

# # // ---

# # // ### üßÆ **ƒê·ªô ph·ª©c t·∫°p**

# # // * **Th·ªùi gian:** O(n + m)
# # //   (v·ªõi n = s·ªë ph·∫ßn t·ª≠ trong linked list, m = ƒë·ªô d√†i nums)
# # // * **Kh√¥ng gian:** O(m) cho HashSet.

# # // ---

# # // üëâ **T√≥m l·∫°i:**

# # // > B√†i n√†y y√™u c·∫ßu x√≥a c√°c node trong danh s√°ch li√™n k·∫øt n·∫øu gi√° tr·ªã c·ªßa ch√∫ng n·∫±m trong m·∫£ng `nums`.
# # // > C√°ch nhanh nh·∫•t l√† d√πng `HashSet` ƒë·ªÉ l∆∞u `nums`, r·ªìi duy·ªát qua danh s√°ch v√† b·ªè qua nh·ªØng node c√≥ gi√° tr·ªã tr√πng.

# # // ---

# # // B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt **code Java** (ho·∫∑c Python) c√≥ ch√∫ th√≠ch r√µ t·ª´ng b∆∞·ªõc cho b√†i n√†y kh√¥ng?
