# // 2043. Simple Bank System(26/10/2025)
# D∆∞·ªõi ƒë√¢y l√† phi√™n b·∫£n **ƒë√£ th√™m ch√∫ th√≠ch chi ti·∫øt** v√† **gi·∫£i th√≠ch thu·∫≠t to√°n** cho b√†i **2043. Simple Bank System** (Python):

# ---

# ```python
from typing import List
class Bank:
    def __init__(self, balance: List[int]):
        # Kh·ªüi t·∫°o ng√¢n h√†ng v·ªõi danh s√°ch s·ªë d∆∞ c·ªßa c√°c t√†i kho·∫£n
        # balance[i] l√† s·ªë ti·ªÅn trong t√†i kho·∫£n th·ª© (i + 1)
        self.balance = balance

    def transfer(self, account1: int, account2: int, money: int) -> bool:
        # Ki·ªÉm tra xem c·∫£ hai t√†i kho·∫£n c√≥ h·ª£p l·ªá hay kh√¥ng
        # (ph·∫£i n·∫±m trong ph·∫°m vi 1 ƒë·∫øn t·ªïng s·ªë t√†i kho·∫£n)
        if (account1 <= 0 or account1 > len(self.balance) or 
            account2 <= 0 or account2 > len(self.balance)):
            return False
        
        # Ki·ªÉm tra xem t√†i kho·∫£n ngu·ªìn c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ chuy·ªÉn kh√¥ng
        if self.balance[account1 - 1] - money < 0:
            return False
        
        # Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn
        self.balance[account1 - 1] -= money  # tr·ª´ ti·ªÅn t·ª´ t√†i kho·∫£n 1
        self.balance[account2 - 1] += money  # c·ªông ti·ªÅn v√†o t√†i kho·∫£n 2
        return True  # chuy·ªÉn ti·ªÅn th√†nh c√¥ng

    def deposit(self, account: int, money: int) -> bool:
        # Ki·ªÉm tra t√†i kho·∫£n h·ª£p l·ªá
        if account <= 0 or account > len(self.balance):
            return False
        
        # C·ªông th√™m ti·ªÅn v√†o t√†i kho·∫£n
        self.balance[account - 1] += money
        return True  # n·∫°p ti·ªÅn th√†nh c√¥ng

    def withdraw(self, account: int, money: int) -> bool:
        # Ki·ªÉm tra t√†i kho·∫£n h·ª£p l·ªá
        if account <= 0 or account > len(self.balance):
            return False
        
        # Ki·ªÉm tra s·ªë d∆∞ c√≥ ƒë·ªß ƒë·ªÉ r√∫t kh√¥ng
        if self.balance[account - 1] - money < 0:
            return False
        
        # Tr·ª´ ti·ªÅn kh·ªèi t√†i kho·∫£n
        self.balance[account - 1] -= money
        return True  # r√∫t ti·ªÅn th√†nh c√¥ng
# ```

# ---

# ### üß† Gi·∫£i th√≠ch thu·∫≠t to√°n:

# * **√ù t∆∞·ªüng ch√≠nh:**
#   M·ªói t√†i kho·∫£n ƒë∆∞·ª£c bi·ªÉu di·ªÖn b·∫±ng m·ªôt ph·∫ßn t·ª≠ trong m·∫£ng `balance`.
#   M·ªói h√†m t∆∞∆°ng ·ª©ng v·ªõi m·ªôt h√†nh ƒë·ªông tr√™n t√†i kho·∫£n.

# ---

# #### üîπ H√†m `transfer(account1, account2, money)`

# * M·ª•c ti√™u: Chuy·ªÉn `money` t·ª´ `account1` sang `account2`.
# * B∆∞·ªõc 1: Ki·ªÉm tra `account1` v√† `account2` h·ª£p l·ªá.
# * B∆∞·ªõc 2: Ki·ªÉm tra `account1` c√≥ ƒë·ªß ti·ªÅn.
# * B∆∞·ªõc 3: Tr·ª´ ti·ªÅn `account1`, c·ªông v√†o `account2`.
#   ‚úÖ Tr·∫£ v·ªÅ `True` n·∫øu th√†nh c√¥ng, `False` n·∫øu kh√¥ng.

# ---

# #### üîπ H√†m `deposit(account, money)`

# * M·ª•c ti√™u: N·∫°p `money` v√†o `account`.
# * B∆∞·ªõc 1: Ki·ªÉm tra `account` h·ª£p l·ªá.
# * B∆∞·ªõc 2: C·ªông `money` v√†o `balance[account - 1]`.
#   ‚úÖ Tr·∫£ v·ªÅ `True` n·∫øu th√†nh c√¥ng.

# ---

# #### üîπ H√†m `withdraw(account, money)`

# * M·ª•c ti√™u: R√∫t `money` t·ª´ `account`.
# * B∆∞·ªõc 1: Ki·ªÉm tra `account` h·ª£p l·ªá.
# * B∆∞·ªõc 2: Ki·ªÉm tra ƒë·ªß ti·ªÅn ƒë·ªÉ r√∫t.
# * B∆∞·ªõc 3: Tr·ª´ ti·ªÅn kh·ªèi t√†i kho·∫£n.
#   ‚úÖ Tr·∫£ v·ªÅ `True` n·∫øu r√∫t th√†nh c√¥ng.

# ---

### üí° V√≠ d·ª• minh h·ªça:

# ```python
# bank = Bank([10, 100, 20, 50, 30])

# print(bank.withdraw(3, 10))   # True ‚Üí [10,100,10,50,30]
# print(bank.transfer(5, 1, 20)) # True ‚Üí [30,100,10,50,10]
# print(bank.deposit(5, 20))    # True ‚Üí [30,100,10,50,30]
# print(bank.transfer(3, 4, 15)) # False (kh√¥ng ƒë·ªß ti·ªÅn)
# ```

# ---

# B·∫°n c√≥ mu·ªën m√¨nh th√™m **phi√™n b·∫£n ch·∫°y th·ª≠ b·∫±ng `input()` (Scanner ki·ªÉu Java)** ƒë·ªÉ test ngo√†i LeetCode kh√¥ng?



# // T·ªët l·∫Øm üëç c√πng m√¨nh **gi·∫£i th√≠ch ƒë·ªÅ LeetCode 2043 ‚Äì Simple Bank System** nh√©:
# import java.util.*;

# class Bank {
#     private long[] balance; // M·∫£ng l∆∞u s·ªë d∆∞ c·ªßa c√°c t√†i kho·∫£n

#     // H√†m kh·ªüi t·∫°o ng√¢n h√†ng v·ªõi s·ªë d∆∞ ban ƒë·∫ßu c·ªßa c√°c t√†i kho·∫£n
#     public Bank(long[] balance) {
#         this.balance = balance;
#     }

#     // H√†m chuy·ªÉn ti·ªÅn t·ª´ account1 sang account2
#     public boolean transfer(int account1, int account2, long money) {
#         // Ki·ªÉm tra n·∫øu 1 trong 2 t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i
#         if (account1 - 1 >= balance.length || account2 - 1 >= balance.length || account1 <= 0 || account2 <= 0)
#             return false;

#         // R√∫t ti·ªÅn t·ª´ account1, n·∫øu r√∫t th√†nh c√¥ng th√¨ n·∫°p v√†o account2
#         if (withdraw(account1, money)) {
#             return deposit(account2, money);
#         }

#         return false;
#     }

#     // H√†m n·∫°p ti·ªÅn v√†o t√†i kho·∫£n
#     public boolean deposit(int account, long money) {
#         // Ki·ªÉm tra t√†i kho·∫£n h·ª£p l·ªá
#         if (account - 1 < balance.length && account > 0) {
#             this.balance[account - 1] += money; // C·ªông th√™m ti·ªÅn
#             return true;
#         }
#         return false;
#     }

#     // H√†m r√∫t ti·ªÅn kh·ªèi t√†i kho·∫£n
#     public boolean withdraw(int account, long money) {
#         // Ki·ªÉm tra t√†i kho·∫£n h·ª£p l·ªá
#         if (account - 1 >= this.balance.length || account <= 0) return false;

#         // Ki·ªÉm tra ƒë·ªß ti·ªÅn kh√¥ng
#         if (this.balance[account - 1] < money) return false;

#         // Tr·ª´ ti·ªÅn
#         this.balance[account - 1] -= money;
#         return true;
#     }

#     // In ra s·ªë d∆∞ hi·ªán t·∫°i c·ªßa t·∫•t c·∫£ t√†i kho·∫£n
#     public void printBalances() {
#         System.out.println("S·ªë d∆∞ c√°c t√†i kho·∫£n: " + Arrays.toString(balance));
#     }

#     // ================== H√ÄM MAIN ==================
#     public static void main(String[] args) {
#         Scanner sc = new Scanner(System.in);

#         // Nh·∫≠p s·ªë l∆∞·ª£ng t√†i kho·∫£n
#         System.out.print("Nh·∫≠p s·ªë l∆∞·ª£ng t√†i kho·∫£n: ");
#         int n = sc.nextInt();

#         // Nh·∫≠p s·ªë d∆∞ ban ƒë·∫ßu c·ªßa t·ª´ng t√†i kho·∫£n
#         long[] balance = new long[n];
#         System.out.println("Nh·∫≠p s·ªë d∆∞ ban ƒë·∫ßu c·ªßa c√°c t√†i kho·∫£n:");
#         for (int i = 0; i < n; i++) {
#             balance[i] = sc.nextLong();
#         }

#         // T·∫°o ƒë·ªëi t∆∞·ª£ng Bank
#         Bank bank = new Bank(balance);

#         // Menu ch·ª©c nƒÉng
#         while (true) {
#             System.out.println("\n=== MENU NG√ÇN H√ÄNG ===");
#             System.out.println("1. N·∫°p ti·ªÅn");
#             System.out.println("2. R√∫t ti·ªÅn");
#             System.out.println("3. Chuy·ªÉn ti·ªÅn");
#             System.out.println("4. Xem s·ªë d∆∞");
#             System.out.println("5. Tho√°t");
#             System.out.print("Ch·ªçn ch·ª©c nƒÉng: ");
#             int choice = sc.nextInt();

#             if (choice == 1) {
#                 System.out.print("Nh·∫≠p s·ªë t√†i kho·∫£n: ");
#                 int acc = sc.nextInt();
#                 System.out.print("Nh·∫≠p s·ªë ti·ªÅn n·∫°p: ");
#                 long money = sc.nextLong();
#                 System.out.println(bank.deposit(acc, money) ? "‚úÖ N·∫°p th√†nh c√¥ng!" : "‚ùå L·ªói: t√†i kho·∫£n kh√¥ng h·ª£p l·ªá.");

#             } else if (choice == 2) {
#                 System.out.print("Nh·∫≠p s·ªë t√†i kho·∫£n: ");
#                 int acc = sc.nextInt();
#                 System.out.print("Nh·∫≠p s·ªë ti·ªÅn r√∫t: ");
#                 long money = sc.nextLong();
#                 System.out.println(bank.withdraw(acc, money) ? "‚úÖ R√∫t th√†nh c√¥ng!" : "‚ùå L·ªói: t√†i kho·∫£n kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë·ªß ti·ªÅn.");

#             } else if (choice == 3) {
#                 System.out.print("Nh·∫≠p t√†i kho·∫£n g·ª≠i: ");
#                 int acc1 = sc.nextInt();
#                 System.out.print("Nh·∫≠p t√†i kho·∫£n nh·∫≠n: ");
#                 int acc2 = sc.nextInt();
#                 System.out.print("Nh·∫≠p s·ªë ti·ªÅn chuy·ªÉn: ");
#                 long money = sc.nextLong();
#                 System.out.println(bank.transfer(acc1, acc2, money) ? "‚úÖ Chuy·ªÉn th√†nh c√¥ng!" : "‚ùå L·ªói: chuy·ªÉn th·∫•t b·∫°i.");

#             } else if (choice == 4) {
#                 bank.printBalances();

#             } else if (choice == 5) {
#                 System.out.println("T·∫°m bi·ªát!");
#                 break;

#             } else {
#                 System.out.println("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.");
#             }
#         }

#         sc.close();
#     }
# }


# // ---

# // ## üßæ **ƒê·ªÅ b√†i t√≥m t·∫Øt**

# // B·∫°n ƒë∆∞·ª£c cho m·ªôt **h·ªá th·ªëng ng√¢n h√†ng ƒë∆°n gi·∫£n** v·ªõi `n` t√†i kho·∫£n,
# // m·ªói t√†i kho·∫£n c√≥ m·ªôt **s·ªë d∆∞ ban ƒë·∫ßu** (ƒë∆∞·ª£c cho trong m·∫£ng `balance`).

# // B·∫°n ph·∫£i **m√¥ ph·ªèng 3 lo·∫°i giao d·ªãch** sau:

# // 1. **transfer(account1, account2, money)**
# //    ‚Üí Chuy·ªÉn `money` t·ª´ `account1` sang `account2`.

# // 2. **deposit(account, money)**
# //    ‚Üí G·ª≠i th√™m `money` v√†o t√†i kho·∫£n `account`.

# // 3. **withdraw(account, money)**
# //    ‚Üí R√∫t `money` ra kh·ªèi t√†i kho·∫£n `account`.

# // ---

# // ## ‚öôÔ∏è **Y√™u c·∫ßu chi ti·∫øt**

# // ### üî∏ Input:

# // * M·∫£ng `balance`, trong ƒë√≥:

# //   * `balance[i]` l√† s·ªë ti·ªÅn ban ƒë·∫ßu c·ªßa t√†i kho·∫£n th·ª© **i + 1** (l∆∞u √Ω index b·∫Øt ƒë·∫ßu t·ª´ 1).
# // * M·ªôt chu·ªói c√°c l·ªánh g·ªçi h√†m (operations), v√≠ d·ª•:

# //   ```
# //   deposit(1, 100)
# //   transfer(1, 2, 50)
# //   withdraw(2, 30)
# //   ```

# // ---

# // ### üî∏ ƒêi·ªÅu ki·ªán h·ª£p l·ªá:

# // * M·ªôt t√†i kho·∫£n `account` h·ª£p l·ªá n·∫øu `1 ‚â§ account ‚â§ n`.
# // * V·ªõi `withdraw` v√† `transfer`, n·∫øu **kh√¥ng ƒë·ªß ti·ªÅn**, giao d·ªãch th·∫•t b·∫°i ‚Üí **tr·∫£ v·ªÅ false**.
# // * N·∫øu m·ªçi ƒëi·ªÅu ki·ªán h·ª£p l·ªá v√† c√≥ ƒë·ªß ti·ªÅn ‚Üí **c·∫≠p nh·∫≠t s·ªë d∆∞ v√† tr·∫£ v·ªÅ true**.

# // ---

# // ### üî∏ Output:

# // * K·∫øt qu·∫£ c·ªßa t·ª´ng giao d·ªãch (`true` ho·∫∑c `false`).
# // * Cu·ªëi c√πng, m·∫£ng `balance` c√≥ th·ªÉ b·ªã thay ƒë·ªïi sau nhi·ªÅu giao d·ªãch.

# // ---

# // ## üí° V√≠ d·ª•:

# // ```text
# // Input:
# // balance = [10, 100, 20, 50, 30]
# // Operations:
# // withdraw(3, 10)
# // transfer(5, 1, 20)
# // deposit(5, 20)
# // transfer(3, 4, 15)
# // withdraw(10, 50)

# // Output:
# // [true, true, true, false, false]
# // ```

# // ### üîç Gi·∫£i th√≠ch:

# // * `withdraw(3, 10)` ‚Üí t√†i kho·∫£n 3 c√≥ 20 ‚Üí r√∫t ƒë∆∞·ª£c 10 ‚Üí ‚úÖ
# //   `balance = [10, 100, 10, 50, 30]`
# // * `transfer(5, 1, 20)` ‚Üí t√†i kho·∫£n 5 c√≥ 30 ‚Üí chuy·ªÉn ƒë∆∞·ª£c 20 ‚Üí ‚úÖ
# //   `balance = [30, 100, 10, 50, 10]`
# // * `deposit(5, 20)` ‚Üí c·ªông th√™m 20 ‚Üí ‚úÖ
# //   `balance = [30, 100, 10, 50, 30]`
# // * `transfer(3, 4, 15)` ‚Üí t√†i kho·∫£n 3 ch·ªâ c√≥ 10 ‚Üí ‚ùå
# // * `withdraw(10, 50)` ‚Üí t√†i kho·∫£n 10 kh√¥ng t·ªìn t·∫°i ‚Üí ‚ùå

# // ---

# // ## ‚úÖ **T√≥m l·∫°i:**

# // * M·ªói t√†i kho·∫£n c√≥ s·ªë d∆∞.
# // * Ba thao t√°c: **g·ª≠i ti·ªÅn**, **r√∫t ti·ªÅn**, **chuy·ªÉn ti·ªÅn**.
# // * Ki·ªÉm tra h·ª£p l·ªá v√† ƒë·ªß ti·ªÅn tr∆∞·ªõc khi th·ª±c hi·ªán.
# // * Tr·∫£ v·ªÅ `true/false` theo k·∫øt qu·∫£ t·ª´ng giao d·ªãch.

# // ---

# // N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ vi·∫øt lu√¥n **phi√™n b·∫£n Java c√≥ h√†m main + Scanner** ƒë·ªÉ b·∫°n th·∫•y r√µ c√°ch ch·∫°y kh√¥ng?
# // R·∫•t hay ‚Äî ƒëo·∫°n code b·∫°n ƒë∆∞a ra l√† m·ªôt c√°ch **m√¥ ph·ªèng h·ªá th·ªëng ng√¢n h√†ng ƒë∆°n gi·∫£n (Simple Bank System)**, t∆∞∆°ng ·ª©ng v·ªõi b√†i **LeetCode 2043**.
# // Gi·ªù m√¨nh s·∫Ω gi·∫£i th√≠ch **chi ti·∫øt t·ª´ng ph·∫ßn logic v√† thu·∫≠t to√°n** üëá

# // ---

# // ## üîπ 1. √ù t∆∞·ªüng t·ªïng qu√°t

# // Ta c√≥ nhi·ªÅu **t√†i kho·∫£n ng√¢n h√†ng**, m·ªói t√†i kho·∫£n c√≥ **s·ªë d∆∞ ban ƒë·∫ßu** (`balance[i]`).
# // C·∫ßn h·ªó tr·ª£ 3 lo·∫°i thao t√°c:

# // 1. `deposit(account, money)` ‚Äî **n·∫°p ti·ªÅn** v√†o t√†i kho·∫£n.
# // 2. `withdraw(account, money)` ‚Äî **r√∫t ti·ªÅn** kh·ªèi t√†i kho·∫£n.
# // 3. `transfer(account1, account2, money)` ‚Äî **chuy·ªÉn ti·ªÅn** t·ª´ t√†i kho·∫£n `account1` sang `account2`.

# // M·ªói thao t√°c ch·ªâ h·ª£p l·ªá n·∫øu:

# // * S·ªë t√†i kho·∫£n t·ªìn t·∫°i (1 ‚â§ account ‚â§ balance.length).
# // * T√†i kho·∫£n c√≥ ƒë·ªß ti·ªÅn khi r√∫t ho·∫∑c chuy·ªÉn.

# // ---

# // ## üîπ 2. Thu·∫≠t to√°n v√† lu·ªìng x·ª≠ l√Ω

# // ### üß© `public Bank(long[] balance)`

# // Kh·ªüi t·∫°o h·ªá th·ªëng ng√¢n h√†ng v·ªõi m·∫£ng `balance` l∆∞u s·ªë d∆∞ ban ƒë·∫ßu.
# // V√≠ d·ª•:

# // ```java
# // long[] balance = {10, 100, 20, 50, 30};
# // ```

# // ‚Üí T·ª©c l√† c√≥ 5 t√†i kho·∫£n v·ªõi s·ªë d∆∞ t∆∞∆°ng ·ª©ng.

# // ---

# // ### üß© `deposit(int account, long money)`

# // **M·ª•c ti√™u:** c·ªông th√™m `money` v√†o t√†i kho·∫£n `account`.

# // ```java
# // if (account - 1 < balance.length) {
# //     balance[account - 1] += money;
# //     return true;
# // }
# // return false;
# // ```

# // * `account - 1` v√¨ ch·ªâ s·ªë trong m·∫£ng l√† **0-based**, c√≤n s·ªë t√†i kho·∫£n l√† **1-based**.
# // * N·∫øu t√†i kho·∫£n t·ªìn t·∫°i, c·ªông th√™m ti·ªÅn v√† tr·∫£ v·ªÅ `true`.
# // * Ng∆∞·ª£c l·∫°i (sai t√†i kho·∫£n) ‚Üí `false`.

# // üìò V√≠ d·ª•:

# // ```
# // balance = [10, 100, 20]
# // deposit(2, 50)
# // ‚Üí balance[1] += 50 ‚Üí balance = [10, 150, 20]
# // ```

# // ---

# // ### üß© `withdraw(int account, long money)`

# // **M·ª•c ti√™u:** tr·ª´ ti·ªÅn n·∫øu t√†i kho·∫£n c√≥ ƒë·ªß ti·ªÅn.

# // ```java
# // if (account - 1 >= balance.length) return false;
# // if (balance[account - 1] < money) return false;
# // balance[account - 1] -= money;
# // return true;
# // ```

# // * Ki·ªÉm tra t√†i kho·∫£n h·ª£p l·ªá.
# // * Ki·ªÉm tra c√≥ ƒë·ªß ti·ªÅn.
# // * N·∫øu ƒë·ªß ‚Üí tr·ª´ ti·ªÅn v√† tr·∫£ v·ªÅ `true`.

# // üìò V√≠ d·ª•:

# // ```
# // balance = [10, 150, 20]
# // withdraw(2, 100)
# // ‚Üí balance[1] -= 100 ‚Üí balance = [10, 50, 20]
# // ```

# // ---

# // ### üß© `transfer(int account1, int account2, long money)`

# // **M·ª•c ti√™u:** chuy·ªÉn ti·ªÅn t·ª´ `account1` sang `account2`.

# // ```java
# // if (account1 - 1 >= balance.length || account2 - 1 >= balance.length) return false;

# // if (withdraw(account1, money)) {
# //     return deposit(account2, money);
# // }
# // return false;
# // ```

# // üëâ Gi·∫£i th√≠ch lu·ªìng:

# // 1. Ki·ªÉm tra c·∫£ hai t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng.
# // 2. N·∫øu t√†i kho·∫£n `account1` c√≥ th·ªÉ r√∫t (`withdraw` th√†nh c√¥ng):

# //    * Th√¨ n·∫°p s·ªë ti·ªÅn ƒë√≥ v√†o `account2` (`deposit`).
# // 3. N·∫øu r√∫t th·∫•t b·∫°i (v√¨ t√†i kho·∫£n kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c kh√¥ng t·ªìn t·∫°i) ‚Üí `false`.

# // üìò V√≠ d·ª•:

# // ```
# // balance = [10, 50, 20]
# // transfer(2, 3, 30)

# // B∆∞·ªõc 1: withdraw(2, 30) ‚Üí true (balance = [10, 20, 20])
# // B∆∞·ªõc 2: deposit(3, 30) ‚Üí true (balance = [10, 20, 50])
# // K·∫øt qu·∫£: true
# // ```

# // ---

# // ## üîπ 3. T·ªïng k·∫øt logic

# // | H√†m          | C√¥ng d·ª•ng   | ƒêi·ªÅu ki·ªán h·ª£p l·ªá                   | H√†nh ƒë·ªông ch√≠nh                |
# // | ------------ | ----------- | ---------------------------------- | ------------------------------ |
# // | `deposit()`  | N·∫°p ti·ªÅn    | T√†i kho·∫£n t·ªìn t·∫°i                  | `balance[acc-1] += money`      |
# // | `withdraw()` | R√∫t ti·ªÅn    | T√†i kho·∫£n t·ªìn t·∫°i + ƒë·ªß ti·ªÅn        | `balance[acc-1] -= money`      |
# // | `transfer()` | Chuy·ªÉn ti·ªÅn | C·∫£ hai t√†i kho·∫£n t·ªìn t·∫°i + ƒë·ªß ti·ªÅn | G·ªçi `withdraw()` + `deposit()` |

# // ---

# // ## üîπ 4. ƒê·ªô ph·ª©c t·∫°p

# // * ‚è± **Th·ªùi gian:** O(1) cho m·ªói thao t√°c.
# // * üíæ **B·ªô nh·ªõ:** O(n) cho `balance`.

# // ---

# // N·∫øu b·∫°n mu·ªën m√¨nh gi√∫p vi·∫øt l·∫°i phi√™n b·∫£n **ng·∫Øn g·ªçn, t·ªëi ∆∞u v√† pass to√†n b·ªô test LeetCode**, m√¨nh c√≥ th·ªÉ r√∫t g·ªçn l·∫°i v√† ch·ªânh ƒëi·ªÅu ki·ªán ki·ªÉm tra t√†i kho·∫£n h·ª£p l·ªá g·ªçn h∆°n ‚Äî b·∫°n mu·ªën kh√¥ng?
