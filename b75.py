# // 3461. Check If Digits Are Equal in String After Operations I(23/10/2025)
# R·∫•t hay üëè
# ƒê√¢y l√† **phi√™n b·∫£n t·ªëi ∆∞u O(n)** c·ªßa b√†i *LeetCode 3461 ‚Äì Check If Digits Are Equal in String After Operations I*,
# s·ª≠ d·ª•ng **to√°n t·ªï h·ª£p v√† modulo 10** ƒë·ªÉ tr√°nh ph·∫£i m√¥ ph·ªèng t·ª´ng b∆∞·ªõc (O(n¬≤)).

# C√πng m√¨nh **gi·∫£i th√≠ch chi ti·∫øt thu·∫≠t to√°n v√† th√™m ch√∫ th√≠ch tr·ª±c ti·∫øp v√†o code** nh√© üëá

# ---

# ```python
class Solution:
    def hasSameDigits(self, s: str) -> bool:
        n = len(s)

        # üîπ Tr∆∞·ªùng h·ª£p c∆° b·∫£n: n·∫øu chu·ªói c√≥ <= 3 ch·ªØ s·ªë
        # th√¨ sau v√†i ph√©p c·ªông mod 10, hai ch·ªØ s·ªë ƒë·∫ßu-cu·ªëi s·∫Ω l√† k·∫øt qu·∫£ cu·ªëi c√πng.
        # V√¨ v·∫≠y ch·ªâ c·∫ßn so s√°nh s[0] v√† s[-1].
        if n <= 3:
            return s[0] == s[-1]

        # v1, v2 l√† hai gi√° tr·ªã "t·ªï h·ª£p c√≥ tr·ªçng s·ªë" (s·∫Ω gi·∫£i th√≠ch ·ªü d∆∞·ªõi)
        v1 = v2 = 0

        # c = h·ªá s·ªë t·ªï h·ª£p C(n-2, i) ban ƒë·∫ßu (kh·ªüi t·∫°o = 1)
        c = 1

        # ‚ú® Chuy·ªÉn chu·ªói th√†nh danh s√°ch s·ªë nhanh h∆°n int(ch)
        # v√¨ ord('0') == 48 ‚Üí ord(ch) - 48 cho ta gi√° tr·ªã s·ªë nguy√™n 0‚Äì9
        s_int = [ord(ch) - 48 for ch in s]

        # n1 = n - 1 d√πng nhi·ªÅu l·∫ßn ƒë·ªÉ gi·∫£m ph√©p t√≠nh
        n1 = n - 1

        # üî∏ √ù t∆∞·ªüng to√°n h·ªçc:
        # Sau (n-2) ph√©p g·ªôp, m·ªói ch·ªØ s·ªë s[i] s·∫Ω c√≥ tr·ªçng s·ªë C(n-2, i) trong k·∫øt qu·∫£ cu·ªëi c√πng.
        # Hai ch·ªØ s·ªë cu·ªëi c√πng (v·ªã tr√≠ 0 v√† 1 sau r√∫t g·ªçn)
        # c√≥ th·ªÉ bi·ªÉu di·ªÖn nh∆∞ t·ªïng t·ªï h·ª£p c·ªßa c√°c ch·ªØ s·ªë ƒë·∫ßu-cu·ªëi.
        # => N·∫øu (v1 - v2) chia h·∫øt cho 10 ‚Üí hai ch·ªØ s·ªë cu·ªëi gi·ªëng nhau.
        #
        # v1: c·ªông t·ª´ tr√°i sang ph·∫£i
        # v2: c·ªông t·ª´ ph·∫£i sang tr√°i
        for i in range(n):
            v1 += s_int[i] * c          # c·ªông theo h∆∞·ªõng tr√°i ‚Üí ph·∫£i
            v2 += s_int[n1 - i] * c     # c·ªông theo h∆∞·ªõng ph·∫£i ‚Üí tr√°i
            # C·∫≠p nh·∫≠t h·ªá s·ªë t·ªï h·ª£p C(n-2, i+1) t·ª´ C(n-2, i)
            # c√¥ng th·ª©c: C(k, i+1) = C(k, i) * (k - i) / (i + 1)
            c = c * (n1 - 2 - i) // (i + 1)

        # üîπ N·∫øu hi·ªáu hai t·ªïng chia h·∫øt cho 10 ‚Üí hai ch·ªØ s·ªë cu·ªëi c√πng b·∫±ng nhau
        return (v1 - v2) % 10 == 0
# ```

# ---

# ### üß© Gi·∫£i th√≠ch thu·∫≠t to√°n (tr·ª±c quan h∆°n)

# Thay v√¨ m√¥ ph·ªèng t·ª´ng v√≤ng `(a[i] + a[i+1]) % 10`,
# ta c√≥ th·ªÉ ch·ª©ng minh r·∫±ng **m·ªói ch·ªØ s·ªë ban ƒë·∫ßu s[i]** s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn **ch·ªØ s·ªë cu·ªëi c√πng**
# v·ªõi tr·ªçng s·ªë l√† **C(n-2, i)** (h·ªá s·ªë t·ªï h·ª£p).

# > V√¨ ·ªü m·ªói l·∫ßn ‚Äúr√∫t g·ªçn‚Äù, ch·ªØ s·ªë ·ªü v·ªã tr√≠ i s·∫Ω ƒë∆∞·ª£c c·ªông d·ªìn l√™n theo d·∫°ng tam gi√°c Pascal.

# V√¨ v·∫≠y, hai ch·ªØ s·ªë cu·ªëi c√πng `x` v√† `y` s·∫Ω l√†:

# ```
# x = ‚àë s[i] * C(n-2, i)
# y = ‚àë s[n-1-i] * C(n-2, i)
# ```

# ‚Üí N·∫øu `(x - y) % 10 == 0`, th√¨ `x` v√† `y` gi·ªëng nhau.

# ---

# ### ‚öôÔ∏è ƒê·ªô ph·ª©c t·∫°p

# | Th√†nh ph·∫ßn | ƒê·ªô ph·ª©c t·∫°p                   |
# | ---------- | ----------------------------- |
# | Th·ªùi gian  | **O(n)**                      |
# | B·ªô nh·ªõ     | **O(1)** (kh√¥ng c·∫ßn m·∫£ng ph·ª•) |

# ---

### üß† V√≠ d·ª• minh h·ªça

# `Input: s = "3902"`

# * n = 4
# * C(2, i): [1, 2, 1]
# * `v1 = 3*1 + 9*2 + 0*1 + 2*0 = 21`
# * `v2 = 2*1 + 0*2 + 9*1 + 3*0 = 11`
# * `(v1 - v2) % 10 = (21 - 11) % 10 = 0 ‚Üí True`

# ‚úÖ Output: `true`

# ---

# B·∫°n c√≥ mu·ªën m√¨nh **v·∫Ω s∆° ƒë·ªì tam gi√°c Pascal** ƒë·ªÉ minh h·ªça r√µ h∆°n v√¨ sao xu·∫•t hi·ªán t·ªï h·ª£p `C(n-2, i)` trong c√¥ng th·ª©c n√†y kh√¥ng?

# import java.util.*;

# public class b76 {
#   static Scanner sc = new Scanner(System.in);

#   public static void main(String[] args) {
#     String s = sc.nextLine();

#     boolean result = hasSameDigits(s);

#     System.out.println(result);

#     sc.close();
#   }

#   // H√†m ch√≠nh ƒë·ªÉ ki·ªÉm tra hai ch·ªØ s·ªë cu·ªëi c√πng c√≥ b·∫±ng nhau kh√¥ng
#   public static boolean hasSameDigits(String s) {
#     int[] arr = new int[s.length()];

#     // ‚úÖ B∆∞·ªõc 1: Chuy·ªÉn chu·ªói th√†nh m·∫£ng s·ªë nguy√™n
#     for (int i = 0; i < arr.length; i++)
#       arr[i] = s.charAt(i) - '0'; // chuy·ªÉn k√Ω t·ª± '0'-'9' th√†nh 0-9

#     // ‚úÖ B∆∞·ªõc 2: L·∫∑p cho ƒë·∫øn khi ch·ªâ c√≤n 2 ph·∫ßn t·ª≠
#     for (int length = arr.length; length > 2; length--) {
#       // V·ªõi m·ªói c·∫∑p li·ªÅn k·ªÅ, t√≠nh (a[i] + a[i+1]) % 10
#       for (int i = 0; i < length - 1; i++) {
#         arr[i] = (arr[i] + arr[i + 1]) % 10;
#       }
#     }

#     // ‚úÖ B∆∞·ªõc 3: So s√°nh hai ch·ªØ s·ªë cu·ªëi c√πng
#     return arr[0] == arr[1];
#   }
# }

# // D∆∞·ªõi ƒë√¢y l√† ph·∫ßn **gi·∫£i th√≠ch chi ti·∫øt ƒë·ªÅ b√†i** c·ªßa b√†i 3461. Check If Digits
# // Are Equal in String After Operations I ‚Äî b·∫°n xem k·ªπ r·ªìi n·∫øu mu·ªën m√¨nh c√≥ th·ªÉ
# // ti·∫øp ph·∫ßn *√Ω t∆∞·ªüng gi·∫£i* ho·∫∑c *c√†i code m·∫´u* nh√©.

# // ---

# // ### üìå ƒê·ªÅ b√†i

# // B·∫°n ƒë∆∞·ª£c cho m·ªôt chu·ªói `s` ch·ªâ g·ªìm c√°c k√Ω t·ª± s·ªë (0-9).
# // Th·ª±c hi·ªán thao t√°c l·∫∑p l·∫°i nhi·ªÅu l·∫ßn cho t·ªõi khi chu·ªói ch·ªâ c√≤n **ch√≠nh x√°c 2
# // ch·ªØ s·ªë** nh∆∞ sau:

# // * M·ªói l·∫ßn, t·ª´ v·ªã tr√≠ ƒë·∫ßu ti√™n c·ªßa chu·ªói, v·ªõi m·ªói c·∫∑p hai ch·ªØ s·ªë li·ªÅn k·ªÅ, l·∫•y
# // t·ªïng c·ªßa ch√∫ng mod 10.
# // * T·ª´ chu·ªói ban ƒë·∫ßu, t·∫°o ra chu·ªói m·ªõi l√† t·∫•t c·∫£ k·∫øt qu·∫£ c·ªßa c√°c t√≠nh to√°n n√†y,
# // gi·ªØ nguy√™n th·ª© t·ª±.
# // * Thay th·∫ø chu·ªói hi·ªán t·∫°i b·∫±ng chu·ªói m·ªõi.
# // Khi chu·ªói c√≤n 2 ch·ªØ s·ªë th√¨ d·ª´ng l·∫°i.
# // Cu·ªëi c√πng: n·∫øu hai ch·ªØ s·ªë c√≤n l·∫°i **gi·ªëng nhau** th√¨ tr·∫£ v·ªÅ `true`, ng∆∞·ª£c l·∫°i
# // `false`.
# // ([AlgoMonster][1])

# // ---

# // ### üßÆ V√≠ d·ª•

# // * V√≠ d·ª• 1: `s = "3902"`

# // * L·∫ßn 1: c·∫∑p (3,9)‚Üí(3+9)%10=2; (9,0)‚Üí9; (0,2)‚Üí2 ‚Üí chu·ªói m·ªõi = `"292"`
# // ([Progiez][2])
# // * L·∫ßn 2: c·∫∑p (2,9)‚Üí1; (9,2)‚Üí1 ‚Üí chu·ªói m·ªõi = `"11"`
# // * C√≤n 2 ch·ªØ s·ªë, v√† `"11"` c√≥ hai ch·ªØ s·ªë gi·ªëng nhau ‚Üí tr·∫£ v·ªÅ `true`.
# // * V√≠ d·ª• 2: `s = "34789"`

# // * Th·ª±c hi·ªán l·∫ßn l∆∞·ª£t s·∫Ω c√≤n chu·ªói `"48"` cu·ªëi c√πng, v√† v√¨ `4 != 8` n√™n tr·∫£ v·ªÅ
# // `false`. ([Progiez][2])

# // ---

# // ### üîç Gi·∫£i th√≠ch chi ti·∫øt

# // * Chu·ªói ban ƒë·∫ßu d√†i `n`.
# // * M·ªói l·∫ßn thao t√°c s·∫Ω gi·∫£m ƒë·ªô d√†i chu·ªói ƒëi **1** (v√¨ m·ªói c·∫∑p li·ªÅn k·ªÅ t·∫°o ra
# // m·ªôt ph·∫ßn t·ª≠ m·ªõi).
# // ‚Üí N·∫øu `n` l√† ƒë·ªô d√†i ban ƒë·∫ßu, sau `n-2` l·∫ßn th√¨ chu·ªói c√≤n 2 ch·ªØ s·ªë.
# // ([AlgoMonster][1])
# // * C√¥ng th·ª©c m·ªói ph·∫ßn t·ª≠ m·ªõi t·∫°i l·∫ßn i: n·∫øu chu·ªói hi·ªán t·∫°i l√† `a[0..k]` (k+1
# // ph·∫ßn t·ª≠), th√¨ m·ªõi s·∫Ω l√† b·∫£ng `b[0..k-1]` v·ªõi `b[j] = (a[j] + a[j+1]) % 10`.
# // * D·ª´ng khi ch·ªâ c√≤n 2 ph·∫ßn t·ª≠, so s√°nh `a[0] == a[1]`.

# // ---

# // ### ‚úÖ Nh·ªØng ƒëi·ªÉm c·∫ßn l∆∞u √Ω

# // * Lu√¥n d√πng `% 10` khi t√≠nh t·ªïng. N·∫øu b·ªè mod th√¨ c√≥ th·ªÉ ra 2 ch·ªØ s·ªë ho·∫∑c l·ªõn
# // h∆°n 9, sai y√™u c·∫ßu. ([AlgoMonster][1])
# // * V√¨ chu·ªói c√≥ th·ªÉ ban ƒë·∫ßu kh√° d√†i, m√¥ ph·ªèng tr·ª±c ti·∫øp s·∫Ω t·ªën th·ªùi gian ~
# // O(n¬≤) trong tr∆∞·ªùng h·ª£p d√†i `n`. (n + (n-1) + (n-2) + ‚Ä¶ ~ O(n¬≤)).
# // ([AlgoMonster][1])
# // * ƒê·ªÅ b√†i ƒë·ªãnh r√µ ‚Äúch·ªâ g·ªìm ch·ªØ s·ªë‚Äù v√† ‚Äúth·ª±c hi·ªán cho ƒë·∫øn khi c√≤n ch√≠nh x√°c hai
# // ch·ªØ s·ªë‚Äù. ([LeetCode][3])

# // ---

# // N·∫øu b·∫°n mu·ªën, m√¨nh **c√≥ th·ªÉ gi·∫£i th√≠ch th√™m** v·ªÅ c√°ch t·ªëi ∆∞u h∆°n (n·∫øu c√≥),
# // ho·∫∑c **vi·∫øt code m·∫´u** (Python, C++ ho·∫∑c Java) cho b√†i n√†y ‚Äî b·∫°n mu·ªën theo
# // ng√¥n ng·ªØ n√†o?

# // R·∫•t hay üëè
# // ƒê√¢y l√† **phi√™n b·∫£n t·ªëi ∆∞u h∆°n** c·ªßa b√†i *LeetCode 3461 ‚Äì Check If Digits Are
# // Equal in String After Operations I*.
# // C√πng m√¨nh **ph√¢n t√≠ch chi ti·∫øt thu·∫≠t to√°n** nh√©.

# // ---

# // ## üß† √ù t∆∞·ªüng c·ªët l√µi

# // M·ª•c ti√™u:

# // > B·∫Øt ƒë·∫ßu v·ªõi chu·ªói s·ªë `s`, l·∫∑p l·∫°i vi·ªác l·∫•y `(a[i] + a[i+1]) % 10` cho ƒë·∫øn
# // khi c√≤n 2 ch·ªØ s·ªë, r·ªìi ki·ªÉm tra ch√∫ng c√≥ b·∫±ng nhau kh√¥ng.

# // Thay v√¨ t·∫°o chu·ªói m·ªõi sau m·ªói v√≤ng (g√¢y t·ªën b·ªô nh·ªõ v√† th·ªùi gian), ta c√≥ th·ªÉ
# // **t√≠nh tr·ª±c ti·∫øp tr√™n c√πng m·ªôt m·∫£ng `arr`** ‚Äî *ch√≠nh l√† √Ω t∆∞·ªüng trong code
# // c·ªßa b·∫°n*.

# // ---

# // ## üîç Gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc

# // ### 1Ô∏è‚É£ Chuy·ªÉn chu·ªói sang m·∫£ng s·ªë nguy√™n

# // ```java
# // for (int i = 0; i < arr.length; i++)
# // arr[i] = s.charAt(i) - '0';
# // ```

# // ‚Üí M·ªói k√Ω t·ª± `'0'`‚Äì`'9'` trong `s` ƒë∆∞·ª£c ƒë·ªïi th√†nh s·ªë 0‚Äì9 t∆∞∆°ng ·ª©ng.
# // V√≠ d·ª•:
# // `s = "3902"` ‚Üí `arr = [3, 9, 0, 2]`

# // ---

# // ### 2Ô∏è‚É£ L·∫∑p d·∫ßn r√∫t g·ªçn chu·ªói

# // ```java
# // for (int length = arr.length; length > 2; length--) {
# // for (int i = 0; i < length - 1; i++) {
# // arr[i] = (arr[i] + arr[i + 1]) % 10;
# // }
# // }
# // ```

# // ·ªû m·ªói v√≤ng `length`:

# // * `arr[i]` ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh `(arr[i] + arr[i+1]) % 10`.
# // * Sau m·ªói v√≤ng, ta **gi·∫£m chi·ªÅu d√†i h·ªØu d·ª•ng c·ªßa m·∫£ng ƒëi 1**, v√¨ ƒë√£ r√∫t g·ªçn
# // xong m·ªôt l·ªõp.

# // > üîπ Kh√¥ng c·∫ßn t·∫°o m·∫£ng m·ªõi ‚Äî ch·ªâ ‚Äúghi ƒë√®‚Äù tr·ª±c ti·∫øp l√™n `arr`.

# // ### üîÑ V√≠ d·ª• minh h·ªça

# // `arr = [3, 9, 0, 2]`

# // | B∆∞·ªõc | Chi·ªÅu d√†i | T√≠nh to√°n | K·∫øt qu·∫£ `arr` (ph·∫ßn c√≥ √Ω nghƒ©a) |
# // | ------- | --------- | ---------------------------------- |
# // ------------------------------- |
# // | Ban ƒë·∫ßu | 4 | | [3, 9, 0, 2] |
# // | 1 | 4‚Üí3 | (3+9)%10=2, (9+0)%10=9, (0+2)%10=2 | [2, 9, 2, ‚Ä¶] |
# // | 2 | 3‚Üí2 | (2+9)%10=1, (9+2)%10=1 | [1, 1, ‚Ä¶] |

# // C√≤n l·∫°i `[1,1]` ‚Üí hai ch·ªØ s·ªë gi·ªëng nhau ‚úÖ ‚Üí `true`.

# // ---

# // ### 3Ô∏è‚É£ Ki·ªÉm tra hai ch·ªØ s·ªë cu·ªëi c√πng

# // ```java
# // return arr[0] == arr[1];
# // ```

# // Khi v√≤ng l·∫∑p k·∫øt th√∫c, hai ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n trong `arr` ch√≠nh l√† hai ch·ªØ s·ªë
# // c√≤n l·∫°i sau khi r√∫t g·ªçn.

# // ---

# // ## ‚öôÔ∏è ƒê·ªô ph·ª©c t·∫°p

# // | Lo·∫°i | Ph√¢n t√≠ch | ƒê·ªô ph·ª©c t·∫°p |
# // | ------------- | ------------------------------------------------- |
# // ----------- |
# // | **Th·ªùi gian** | T·ªïng s·ªë ph√©p c·ªông ~ n + (n-1) + ... + 3 ‚âà O(n¬≤/2) |
# // **O(n¬≤)** |
# // | **B·ªô nh·ªõ** | D√πng 1 m·∫£ng c·ªë ƒë·ªãnh, kh√¥ng t·∫°o m·ªõi | **O(n)** |

# // ---

# // ## ‚úÖ ∆Øu ƒëi·ªÉm

# // * Kh√¥ng c·∫ßn t·∫°o chu·ªói m·ªõi (hi·ªáu qu·∫£ h∆°n b·∫£n d√πng `StringBuilder`).
# // * D·ªÖ hi·ªÉu, tr·ª±c quan, ƒë√∫ng v·ªõi m√¥ ph·ªèng c·ªßa ƒë·ªÅ.
# // * C√≥ th·ªÉ d·ªÖ d√†ng in trung gian ƒë·ªÉ debug n·∫øu c·∫ßn.

# // ---

# // N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ ch·ªâ c√°ch **r√∫t g·ªçn c√¥ng th·ª©c ƒë·ªÉ l√†m O(n)** (kh√¥ng
# // c·∫ßn m√¥ ph·ªèng t·ª´ng b∆∞·ªõc) ‚Äî d√πng **to√°n t·ªï h·ª£p + modulo 10**.
# // B·∫°n c√≥ mu·ªën m√¨nh tr√¨nh b√†y c√°ch t·ªëi ∆∞u ƒë√≥ kh√¥ng?
