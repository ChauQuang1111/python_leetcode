# 3408. Design Task Manager(18/09/2025)
# Ok üëç m√¨nh s·∫Ω th√™m ch√∫ th√≠ch tr·ª±c ti·∫øp v√†o code c·ªßa b·∫°n ƒë·ªÉ d·ªÖ hi·ªÉu h∆°n.

# ```python
import heapq
from typing import List

class TaskManager:

    def __init__(self, tasks: List[List[int]]):
        self.tasks = []     # heap (min-heap) l∆∞u tr·ªØ c√°c task theo d·∫°ng (-priority, -taskId, userId)
        self.valid = {}     # dictionary: √°nh x·∫° taskId -> phi√™n b·∫£n h·ª£p l·ªá nh·∫•t c·ªßa task

        # Kh·ªüi t·∫°o heap v√† valid t·ª´ danh s√°ch ban ƒë·∫ßu
        for user, task, priority in tasks:
            # L∆∞u th√†nh tuple: (-priority, -taskId, user)
            #   - D√πng s·ªë √¢m ƒë·ªÉ bi·∫øn min-heap th√†nh max-heap (priority cao nh·∫•t ·ªü ƒë·∫ßu)
            #   - D√πng -taskId ƒë·ªÉ ∆∞u ti√™n taskId nh·ªè h∆°n khi priority b·∫±ng nhau
            t = (-priority, -task, user)
            self.tasks.append(t)
            self.valid[-task] = t   # ghi nh·ªõ phi√™n b·∫£n h·ª£p l·ªá nh·∫•t cho taskId n√†y
        
        heapq.heapify(self.tasks)   # bi·∫øn self.tasks th√†nh heap h·ª£p l·ªá
       

    def add(self, userId: int, taskId: int, priority: int) -> None:
        # Th√™m task m·ªõi v√†o heap v√† valid
        t = (-priority, -taskId, userId)
        self.valid[-taskId] = t     # ghi nh·ªõ taskId n√†y phi√™n b·∫£n h·ª£p l·ªá nh·∫•t
        heapq.heappush(self.tasks, t)
        

    def edit(self, taskId: int, newPriority: int) -> None:
        # L·∫•y task c≈© t·ª´ valid
        old_pri, old_task, old_user = self.valid[-taskId]
        # T·∫°o task m·ªõi v·ªõi priority c·∫≠p nh·∫≠t
        t = (-newPriority, old_task, old_user)
        self.valid[-taskId] = t     # c·∫≠p nh·∫≠t phi√™n b·∫£n h·ª£p l·ªá
        heapq.heappush(self.tasks, t)  # ƒë·∫©y v√†o heap (b·∫£n c≈© v·∫´n n·∫±m trong heap nh∆∞ng s·∫Ω b·ªã b·ªè qua sau)

    def rmv(self, taskId: int) -> None:
        # X√≥a task kh·ªèi valid (kh√¥ng c·∫ßn x√≥a ngay trong heap ‚Üí lazy deletion)
        del self.valid[-taskId]

    def execTop(self) -> int:
        # Tr·∫£ v·ªÅ userId c·ªßa task ∆∞u ti√™n nh·∫•t, ƒë·ªìng th·ªùi lo·∫°i b·ªè task ƒë√≥ kh·ªèi h·ªá th·ªëng
        while self.tasks:
            pri, tsk, usr = heapq.heappop(self.tasks)  # l·∫•y task ∆∞u ti√™n nh·∫•t ra

            if tsk not in self.valid:
                # N·∫øu taskId n√†y kh√¥ng c√≤n trong valid ‚Üí ƒë√£ b·ªã remove
                continue
            
            if self.valid[tsk][0] != pri or self.valid[tsk][2] != usr:
                # N·∫øu priority ho·∫∑c userId kh√¥ng kh·ªõp v·ªõi b·∫£n m·ªõi nh·∫•t trong valid ‚Üí l√† b·∫£n c≈©
                continue
            
            # ƒê√¢y l√† b·∫£n h·ª£p l·ªá nh·∫•t ‚Üí x√≥a kh·ªèi valid v√† return userId
            del self.valid[tsk]
            return usr
            
        return -1   # n·∫øu kh√¥ng c√≤n task h·ª£p l·ªá n√†o
# ```

# ---

# ### ‚úÖ T√≥m g·ªçn √Ω nghƒ©a t·ª´ng ph·∫ßn

# * **Heap (`self.tasks`)**: ch·ª©a t·∫•t c·∫£ phi√™n b·∫£n (c·∫£ c≈© v√† m·ªõi).
# * **Valid (`self.valid`)**: ch·ªâ gi·ªØ phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa m·ªói `taskId`.
# * **Lazy deletion**: khi `edit` ho·∫∑c `rmv`, b·∫£n c≈© kh√¥ng x√≥a kh·ªèi heap ngay m√† ƒë∆∞·ª£c b·ªè qua trong `execTop`.
# * **∆Øu ti√™n trong heap**:

#   1. `priority` cao h∆°n ‚Üí ƒë·ª©ng tr∆∞·ªõc.
#   2. N·∫øu b·∫±ng nhau ‚Üí `taskId` nh·ªè h∆°n ‚Üí ƒë·ª©ng tr∆∞·ªõc.



# B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt th√™m **1 v√≠ d·ª• ch·∫°y th·ª≠ step-by-step** (t·ª´ng l·ªánh `add`, `edit`, `execTop`) ƒë·ªÉ th·∫•y c√°ch heap v√† valid thay ƒë·ªïi theo kh√¥ng?

# R·ªìi üëç, m√¨nh s·∫Ω gi·∫£i th√≠ch chi ti·∫øt t·ª´ng b∆∞·ªõc thu·∫≠t to√°n c·ªßa ƒëo·∫°n code `TaskManager` b·∫°n ƒë∆∞a.

# ---

# ## üìù √ù t∆∞·ªüng b√†i to√°n

# Ta c·∫ßn m·ªôt **Task Manager** h·ªó tr·ª£ 4 thao t√°c:

# 1. **add(userId, taskId, priority)**
#    Th√™m m·ªôt task m·ªõi cho user v·ªõi `taskId` v√† `priority`.

# 2. **edit(taskId, newPriority)**
#    Thay ƒë·ªïi ƒë·ªô ∆∞u ti√™n c·ªßa task c√≥ s·∫µn.

# 3. **rmv(taskId)**
#    X√≥a m·ªôt task theo `taskId`.

# 4. **execTop()**
#    L·∫•y v√† x√≥a task c√≥ **priority cao nh·∫•t**, n·∫øu b·∫±ng nhau th√¨ `taskId` nh·ªè h∆°n s·∫Ω ∆∞u ti√™n, tr·∫£ v·ªÅ `userId` c·ªßa task ƒë√≥.

# ---

# ## ‚ö° Chi ti·∫øt thu·∫≠t to√°n trong code

# ### 1. D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ

# * `self.tasks`: **heap** (∆∞u ti√™n max) ƒë·ªÉ l∆∞u t·∫•t c·∫£ task theo d·∫°ng tuple:

#   ```python
#   t = (-priority, -taskId, userId)
#   ```

#   * D√πng `-priority` ƒë·ªÉ bi·∫øn min-heap c·ªßa Python th√†nh max-heap (priority cao h∆°n s·∫Ω ƒë·ª©ng tr∆∞·ªõc).
#   * D√πng `-taskId` v√¨ n·∫øu hai task c√≥ c√πng priority ‚Üí taskId nh·ªè h∆°n ƒë∆∞·ª£c ∆∞u ti√™n.
#   * `userId` d√πng ƒë·ªÉ bi·∫øt ai s·ªü h·ªØu task.

# * `self.valid`: dictionary ƒë·ªÉ gi·ªØ **task h·ª£p l·ªá nh·∫•t hi·ªán t·∫°i** theo `taskId`.

#   ```python
#   self.valid[-taskId] = t
#   ```

#   D√πng `-taskId` l√†m key ƒë·ªÉ kh·ªõp v·ªõi heap.

# üëâ L√Ω do: M·ªôt task c√≥ th·ªÉ b·ªã ch·ªânh s·ª≠a nhi·ªÅu l·∫ßn (`edit`) ‚Üí heap s·∫Ω ch·ª©a nhi·ªÅu b·∫£n copy c≈©. `valid` gi√∫p ph√¢n bi·ªát b·∫£n **m·ªõi nh·∫•t** v√† b·ªè qua b·∫£n c≈©.

# ---

# ### 2. `__init__`

# ```python
# for user, task, priority in tasks:
#     t = (-priority, -task, user)
#     self.tasks.append(t)
#     self.valid[-task] = t
# heapify(self.tasks)
# ```

# * Kh·ªüi t·∫°o heap `tasks` v·ªõi t·∫•t c·∫£ task.
# * M·ªói task g·∫Øn v√†o `valid` ‚Üí ch·ªâ gi·ªØ phi√™n b·∫£n m·ªõi nh·∫•t.

# ---

# ### 3. `add(userId, taskId, priority)`

# ```python
# t = (-priority, -taskId, userId)
# self.valid[-taskId] = t
# heappush(self.tasks, t)
# ```

# * T·∫°o tuple m·ªõi `t`.
# * L∆∞u v√†o `valid` (ghi ƒë√® n·∫øu `taskId` ƒë√£ t·ªìn t·∫°i).
# * ƒê·∫©y v√†o heap.

# ---

# ### 4. `edit(taskId, newPriority)`

# ```python
# old_pri, old_task, old_user = self.valid[-taskId]
# t = (-newPriority, old_task, old_user)
# self.valid[-taskId] = t
# heappush(self.tasks, t)
# ```

# * L·∫•y ra task c≈© t·ª´ `valid`.
# * T·∫°o tuple m·ªõi v·ªõi priority c·∫≠p nh·∫≠t.
# * Ghi ƒë√® v√†o `valid`.
# * ƒê·∫©y th√™m v√†o heap (b·∫£n c≈© v·∫´n n·∫±m trong heap nh∆∞ng s·∫Ω b·ªã b·ªè qua khi `execTop`).

# ---

# ### 5. `rmv(taskId)`

# ```python
# del self.valid[-taskId]
# ```

# * X√≥a task kh·ªèi `valid`.
# * B·∫£n ghi c≈© trong heap v·∫´n c√≤n, nh∆∞ng khi `execTop` s·∫Ω b·ªã b·ªè qua v√¨ kh√¥ng c√≥ trong `valid`.

# ---

# ### 6. `execTop`

# ```python
# while self.tasks:
#     pri, tsk, usr = heappop(self.tasks)

#     if tsk not in self.valid:
#         continue  # task ƒë√£ b·ªã remove

#     if self.valid[tsk][0] != pri or self.valid[tsk][2] != usr:
#         continue  # ƒë√¢y l√† b·∫£n c≈©, b·ªè qua

#     del self.valid[tsk]
#     return usr
# return -1
# ```

# * L·∫•y task ∆∞u ti√™n nh·∫•t t·ª´ heap (`heappop`).
# * N·∫øu `tsk` kh√¥ng c√≥ trong `valid` ‚Üí ƒë√£ b·ªã `rmv` ‚Üí b·ªè qua.
# * N·∫øu `pri` ho·∫∑c `usr` kh√¥ng kh·ªõp v·ªõi b·∫£n m·ªõi nh·∫•t trong `valid` ‚Üí ƒë√¢y l√† b·∫£n c≈© (do `edit`) ‚Üí b·ªè qua.
# * Khi g·∫∑p b·∫£n **h·ª£p l·ªá nh·∫•t** ‚Üí x√≥a kh·ªèi `valid` v√† return `userId`.
# * N·∫øu heap tr·ªëng ‚Üí return `-1`.

# ---

# ## ‚úÖ T√≥m t·∫Øt c∆° ch·∫ø

# * D√πng **heap** ƒë·ªÉ l·∫•y ra task ∆∞u ti√™n cao nh·∫•t.
# * D√πng **valid** ƒë·ªÉ lo·∫°i b·ªè c√°c b·∫£n ghi c≈© (lazy deletion).
# * M·ªói thao t√°c `add` ho·∫∑c `edit` ch·ªâ c·∫ßn th√™m b·∫£n m·ªõi v√†o heap, kh√¥ng c·∫ßn xo√° b·∫£n c≈© ngay.
# * `execTop` ch·ªãu tr√°ch nhi·ªám b·ªè qua b·∫£n ghi l·ªói th·ªùi.

# ---

# B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt **phi√™n b·∫£n Java** t∆∞∆°ng t·ª± (s·ª≠ d·ª•ng `PriorityQueue` + `HashMap`) cho b√†i n√†y kh√¥ng?

# D∆∞·ªõi ƒë√¢y l√† ph·∫ßn **gi·∫£i th√≠ch r√µ r√†ng, ng·∫Øn g·ªçn** cho b√†i **LeetCode 3408 ‚Äî Design Task Manager**, k√®m √Ω t∆∞·ªüng d·ªØ li·ªáu & ƒë·ªô ph·ª©c t·∫°p. (M√¨nh tham kh·∫£o m√¥ t·∫£ b√†i t·ª´ LeetCode v√† c√°c gi·∫£i th√≠ch chu·∫©n). ([leetcode.com][1])

# ---

# ## 1) M·ª•c ti√™u b√†i to√°n (t√≥m t·∫Øt)

# B·∫°n ph·∫£i tri·ªÉn khai m·ªôt h·ªá th·ªëng qu·∫£n l√Ω task h·ªó tr·ª£ kh·ªüi t·∫°o v·ªõi danh s√°ch ban ƒë·∫ßu v√† c√°c thao t√°c sau:

# * **Constructor**: kh·ªüi t·∫°o t·ª´ danh s√°ch `tasks`, m·ªói ph·∫ßn t·ª≠ l√† `[userId, taskId, priority]`.
# * **add(userId, taskId, priority)**: th√™m task m·ªõi (taskId l√† duy nh·∫•t).
# * **edit(taskId, newPriority)**: thay ƒë·ªïi priority c·ªßa task ƒë√£ t·ªìn t·∫°i.
# * **rmv(taskId)**: x√≥a task.
# * **execTop()**: *th·ª±c thi* (l·∫•y v√† x√≥a) task c√≥ **priority cao nh·∫•t**; n·∫øu c√≥ nhi·ªÅu task c√πng priority th√¨ ch·ªçn `taskId` l·ªõn h∆°n (ho·∫∑c theo quy t·∫Øc ƒë·ªÅ b√†i ‚Äî trong m·ªôt s·ªë gi·∫£i ph√°p d√πng taskId l·ªõn h∆°n l√†m tie-break). N·∫øu kh√¥ng c√≥ task tr·∫£ v·ªÅ `-1`.

# (Chi ti·∫øt t√™n h√†m/qui t·∫Øc tie-break h∆°i kh√°c ·ªü c√°c ngu·ªìn/phi√™n b·∫£n, √Ω ch√≠nh: h·ªá th·ªëng c·∫ßn add/edit/remove v√† tr·∫£ v·ªÅ task priority cao nh·∫•t). ([Leetcode][2])

# ---

# ## 2) Y√™u c·∫ßu ch·ª©c nƒÉng quan tr·ªçng

# * Truy xu·∫•t v√† c·∫≠p nh·∫≠t theo `taskId` ph·∫£i nhanh (cho `edit`, `rmv`).
# * L·∫•y task c√≥ **priority cao nh·∫•t** ph·∫£i nhanh (cho `execTop`).
# * C√°c thao t√°c ch·∫°y hi·ªáu qu·∫£ v·ªõi nhi·ªÅu ph√©p update/x√≥a (t·ªëi ∆∞u kho·∫£ng `O(log n)` m·ªói thao t√°c l√† ti√™u chu·∫©n).

# ---

# ## 3) C√°ch l∆∞u tr·ªØ d·ªØ li·ªáu (√Ω t∆∞·ªüng chu·∫©n)

# D√πng k·∫øt h·ª£p 2 c·∫•u tr√∫c:

# 1. **Map (hash)**: `taskId -> (userId, priority)` ƒë·ªÉ tra c·ª©u v√† c·∫≠p nh·∫≠t task theo `taskId` trong O(1).
# 2. **C·∫•u tr√∫c s·∫Øp x·∫øp / heap / balanced BST** ƒë·ªÉ l·∫•y nhanh task c√≥ priority cao nh·∫•t:

#    * C√≥ th·ªÉ d√πng **max-heap / priority queue** l∆∞u `(priority, taskId)`; ƒë·ªÉ tie-break theo taskId d√πng th·ª© t·ª± ph√π h·ª£p.
#    * V√¨ priority c√≥ th·ªÉ thay ƒë·ªïi ho·∫∑c task b·ªã x√≥a, heap s·∫Ω ch·ª©a c√°c b·∫£n *c≈©* ‚Üí c·∫ßn k·ªπ thu·∫≠t **lazy deletion**: khi pop top, ki·ªÉm tra xem priority hi·ªán t·∫°i c·ªßa `taskId` trong map c√≥ kh·ªõp kh√¥ng; n·∫øu kh√¥ng kh·ªõp th√¨ b·ªè v√† pop ti·∫øp.
#    * Ho·∫∑c d√πng **ordered set / TreeSet / std::set** (C++) l∆∞u tr·ª±c ti·∫øp c√°c c·∫∑p `(-priority, -taskId)` (ƒë·∫£m b·∫£o ordering), ƒë·ªìng th·ªùi gi·ªØ iterator/handle ƒë·ªÉ x√≥a ph·∫ßn t·ª≠ c≈© khi `edit`/`rmv` (x√≥a O(log n)). ƒê√¢y l√† c√°ch ‚Äús·∫°ch‚Äù n·∫øu ng√¥n ng·ªØ h·ªó tr·ª£ x√≥a theo iterator nhanh. ([zxi.mytechroad.com][3])

# ---

# ## 4) C√°c thao t√°c tri·ªÉn khai (chi ti·∫øt thu·∫≠t to√°n)

# * **Constructor(tasks)**

#   * Duy·ªát list `tasks`, v·ªõi m·ªói `[userId, taskId, priority]`:

#     * l∆∞u `taskMap[taskId] = (userId, priority)`.
#     * push `(priority, taskId)` v√†o heap (ho·∫∑c insert v√†o set).
#   * T·ªïng chi ph√≠: O(n log n) n·∫øu insert v√†o heap/set.

# * **add(userId, taskId, priority)**

#   * `taskMap[taskId] = (userId, priority)`; push `(priority, taskId)` v√†o heap.
#   * O(log n) cho push.

# * **edit(taskId, newPriority)**

#   * C·∫≠p nh·∫≠t map: `taskMap[taskId].priority = newPriority`.
#   * Push `(newPriority, taskId)` v√†o heap (kh√¥ng x√≥a b·∫£n c≈© ngay).
#   * (N·∫øu d√πng ordered set v·ªõi handle ‚Üí erase old pair r·ªìi insert new pair, v·∫´n O(log n)).
#   * O(log n).

# * **rmv(taskId)**

#   * Xo√° entry kh·ªèi `taskMap`.
#   * N·∫øu d√πng set v·ªõi handle: erase pair trong set O(log n).
#   * N·∫øu d√πng heap + lazy deletion: ch·ªâ x√≥a kh·ªèi `taskMap` (b·∫£n c≈© trong heap s·∫Ω b·ªã b·ªè khi g·∫∑p ·ªü top).
#   * O(log n) n·∫øu x√≥a tr·ª±c ti·∫øp, amortized O(1) (map removal) + lazy cost later if heap used.

# * **execTop()**

#   * N·∫øu heap r·ªóng ‚Üí tr·∫£ `-1`.
#   * L·∫∑p: l·∫•y top `(p, id)` t·ª´ heap. Ki·ªÉm tra `taskMap`:

#     * N·∫øu `id` kh√¥ng c√≤n trong `taskMap` (ƒë√£ rmv) ho·∫∑c `taskMap[id].priority != p` (phi√™n b·∫£n c≈©), th√¨ `pop` v√† ti·∫øp t·ª•c.
#     * N·∫øu kh·ªõp ‚Üí l·∫•y `userId = taskMap[id].userId`, x√≥a `taskMap[id]` (task ƒë√£ th·ª±c thi), `pop` kh·ªèi heap, tr·∫£ `userId`.
#   * M·ªói ph·∫ßn t·ª≠ b·ªã b·ªè kh·ªèi heap ch·ªâ m·ªôt l·∫ßn ‚Üí t·ªïng amortized O(log n) per pop.

# ---

# ## 5) V√≠ d·ª• ng·∫Øn

# Gi·∫£ s·ª≠ tasks ban ƒë·∫ßu: `[[1, 101, 5], [2, 102, 7], [3,103,7]]`

# * execTop() ‚Üí tr·∫£ user c√≥ task priority 7; n·∫øu c√≥ 2 task priority 7 th√¨ theo tie-break (v√≠ d·ª• ch·ªçn taskId l·ªõn h∆°n) ch·ªçn m·ªôt trong hai theo quy t·∫Øc.
# * edit(101, 8) ‚Üí c·∫≠p nh·∫≠t priority, push phi√™n b·∫£n m·ªõi v√†o heap; execTop() ti·∫øp theo s·∫Ω tr·∫£ userId c·ªßa task 101.

# ---

# ## 6) L·ª±a ch·ªçn d·ªØ li·ªáu & ∆∞u/nh∆∞·ª£c

# * **Heap + HashMap (lazy deletion)**

#   * ∆Øu: tri·ªÉn khai ƒë∆°n gi·∫£n, m·ªói add/edit l√† O(log n).
#   * Nh∆∞·ª£c: heap ch·ª©a nhi·ªÅu b·∫£n stale, nh∆∞ng m·ªói b·∫£n stale b·ªã pop t·ªëi ƒëa 1 l·∫ßn ‚Üí amortized t·ªët.
# * **Ordered set / Tree (map) + HashMap + iterator handle**

#   * ∆Øu: c√≥ th·ªÉ x√≥a tr·ª±c ti·∫øp b·∫£n c≈© O(log n) ‚Üí heap s·∫°ch h∆°n.
#   * Nh∆∞·ª£c: c·∫ßn c·∫•u tr√∫c h·ªó tr·ª£ erase b·∫±ng iterator (C++ `set` ho·∫∑c Java `TreeSet` + custom objects + maintain references).

# ---

# ## 7) ƒê·ªô ph·ª©c t·∫°p (t√≥m t·∫Øt)

# * Constructor: O(n log n).
# * `add`, `edit`, `rmv`, `execTop`: **amortized O(log n)**.
# * Kh√¥ng gian: O(n) (heap + map). ([walkccc.me][4])

# ---

# N·∫øu b·∫°n mu·ªën m√¨nh:

# * Vi·∫øt **m√£ m·∫´u** (Java / Python / C++) theo ki·ªÉu **heap + map (lazy deletion)**, ho·∫∑c
# * Vi·∫øt **m√£ d√πng TreeSet** (x√≥a tr·ª±c ti·∫øp) trong Java/C++,

# h√£y n√≥i r√µ b·∫°n mu·ªën ng√¥n ng·ªØ n√†o ‚Äî m√¨nh s·∫Ω vi·∫øt code ho√†n ch·ªânh k√®m gi·∫£i th√≠ch.

# [1]: https://leetcode.com/problems/design-task-manager/?utm_source=chatgpt.com "Design Task Manager - LeetCode"
# [2]: https://leetcode.ca/2025-01-21-3408-Design-Task-Manager/?utm_source=chatgpt.com "3408 - Design Task Manager - leetcode.ca"
# [3]: https://zxi.mytechroad.com/blog/priority-queue/leetcode-3408-design-task-manager/?utm_source=chatgpt.com "Ëä±Ëä±ÈÖ±LeetCode 3408. Design Task Manager - Huahua's Tech Road"
# [4]: https://walkccc.me/LeetCode/problems/3408/?utm_source=chatgpt.com "3408. Design Task Manager - LeetCode Solutions - walkccc.me"
