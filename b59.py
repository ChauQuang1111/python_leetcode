# // 1488. Avoid Flood in The City(07/10/2025)
### üîç M·ª•c ti√™u b√†i to√°n
# > Cho m·∫£ng `rains`, trong ƒë√≥:
# >
# > * `rains[i] > 0`: m∆∞a ·ªü h·ªì `rains[i]`
# > * `rains[i] == 0`: h√¥m ƒë√≥ tr·ªùi kh√¥, c√≥ th·ªÉ h√∫t n∆∞·ªõc kh·ªèi **m·ªôt h·ªì b·∫•t k·ª≥**
# >
# > Tr·∫£ v·ªÅ m·∫£ng `res`:
# >
# > * `res[i] = -1` n·∫øu h√¥m ƒë√≥ m∆∞a
# > * `res[i] = lake` n·∫øu h√¥m ƒë√≥ h√∫t h·ªì `lake`
# >   N·∫øu kh√¥ng th·ªÉ tr√°nh ng·∫≠p ‚Üí tr·∫£ v·ªÅ `[]`

from collections import deque
from typing import List

class Solution:
    def avoidFlood(self, rains: List[int]) -> List[int]:
        h = {}               # L∆∞u h·ªì n√†o ƒë√£ b·ªã ƒë·∫ßy, v√† ng√†y b·ªã ƒë·∫ßy: lake -> index
        q = deque([])        # H√†ng ƒë·ª£i l∆∞u c√°c ng√†y kh√¥ (c√≥ th·ªÉ h√∫t n∆∞·ªõc)
        res = []             # K·∫øt qu·∫£ cu·ªëi c√πng

        for i, x in enumerate(rains):  # Duy·ªát t·ª´ng ng√†y
            if x:  # N·∫øu h√¥m nay c√≥ m∆∞a (x > 0)
                if x in h:
                    # N·∫øu h·ªì x ƒë√£ b·ªã ƒë·∫ßy tr∆∞·ªõc ƒë√≥, c·∫ßn t√¨m 1 ng√†y kh√¥ sau ƒë√≥ ƒë·ªÉ h√∫t
                    for j in q:
                        if j > h[x]:  # t√¨m ng√†y kh√¥ sau ng√†y h·ªì b·ªã ƒë·∫ßy
                            res[j] = x  # h√∫t h·ªì x trong ng√†y kh√¥ ƒë√≥
                            q.remove(j) # x√≥a ng√†y ƒë√≥ kh·ªèi h√†ng ƒë·ª£i
                            break
                    else:
                        # N·∫øu kh√¥ng c√≥ ng√†y kh√¥ n√†o ph√π h·ª£p => ng·∫≠p
                        return []

                res.append(-1)  # H√¥m nay m∆∞a => kh√¥ng h√∫t h·ªì n√†o
                h[x] = i        # C·∫≠p nh·∫≠t h·ªì x b·ªã ƒë·∫ßy v√†o ng√†y i

            else:  # N·∫øu h√¥m nay tr·ªùi kh√¥
                res.append(1)   # T·∫°m th·ªùi g√°n 1 (n·∫øu sau n√†y kh√¥ng c·∫ßn h√∫t h·ªì n√†o)
                q.append(i)     # Th√™m ng√†y kh√¥ n√†y v√†o danh s√°ch ƒë·ªÉ d√πng sau

        return res
# ```

# ---

# ### üß© Gi·∫£i th√≠ch ho·∫°t ƒë·ªông qua v√≠ d·ª•

# **Input**

# ```python
# rains = [1, 2, 0, 1, 2]
# ```

# **B∆∞·ªõc t·ª´ng ng√†y:**

# | Ng√†y | rains[i] | H√†nh ƒë·ªông                                             | `h` (h·ªì b·ªã ƒë·∫ßy) | `q` (ng√†y kh√¥) | `res`                               |
# | ---- | -------- | ----------------------------------------------------- | --------------- | -------------- | ----------------------------------- |
# | 0    | 1        | H·ªì 1 m∆∞a ‚Üí ƒë·∫ßy                                        | {1:0}           | []             | [-1]                                |
# | 1    | 2        | H·ªì 2 m∆∞a ‚Üí ƒë·∫ßy                                        | {1:0, 2:1}      | []             | [-1, -1]                            |
# | 2    | 0        | Ng√†y kh√¥, th√™m v√†o h√†ng ƒë·ª£i                           | {1:0, 2:1}      | [2]            | [-1, -1, 1]                         |
# | 3    | 1        | H·ªì 1 ƒë√£ ƒë·∫ßy ‚Üí c·∫ßn h√∫t tr∆∞·ªõc                           | {1:0, 2:1}      | []             | [-1, -1, 1, -1] ‚Üí c·∫≠p nh·∫≠t res[2]=1 |
# | 4    | 2        | H·ªì 2 ƒë√£ ƒë·∫ßy ‚Üí KH√îNG c√≥ ng√†y kh√¥ sau 1 n·ªØa ‚Üí **ng·∫≠p!** |                 |                | []                                  |

# **Output:**

# ```
# []
# ```

# ---

# ### üí° Gi·∫£i th√≠ch ng·∫Øn g·ªçn thu·∫≠t to√°n

# 1. Duy·ªát t·ª´ng ng√†y:

#    * N·∫øu **m∆∞a ·ªü h·ªì x**:

#      * N·∫øu h·ªì **ƒë√£ ƒë·∫ßy tr∆∞·ªõc ƒë√≥**, ph·∫£i t√¨m **ng√†y kh√¥ sau l·∫ßn ƒë·∫ßy tr∆∞·ªõc** ƒë·ªÉ h√∫t n∆∞·ªõc.
#      * N·∫øu kh√¥ng c√≥ ‚Üí ng·∫≠p (tr·∫£ v·ªÅ `[]`).
#    * N·∫øu **kh√¥ng m∆∞a (0)**:

#      * Ghi nh·∫≠n ƒë√¢y l√† **ng√†y kh√¥ c√≥ th·ªÉ d√πng ƒë·ªÉ h√∫t** (cho v√†o `q`).

# 2. `res` ghi l·∫°i:

#    * `-1`: ng√†y m∆∞a
#    * `1` ho·∫∑c h·ªì c·ª• th·ªÉ: ng√†y kh√¥

# ---

# ### ‚úÖ V√≠ d·ª• ch·∫°y ƒë∆∞·ª£c

# ```python
# rains = [1, 2, 3, 4]
# print(Solution().avoidFlood(rains))
# ```

# **Output**

# ```
# [-1, -1, -1, -1]
# ```

# ---

# ### ‚öôÔ∏è ƒê·ªô ph·ª©c t·∫°p

# * M·ªói ng√†y c√≥ th·ªÉ ph·∫£i duy·ªát qua `q` ‚Üí O(n¬≤) trong tr∆∞·ªùng h·ª£p x·∫•u nh·∫•t.
# * C√≥ th·ªÉ t·ªëi ∆∞u b·∫±ng `bisect` (O(n log n)) nh∆∞ b·∫£n b·∫°n xem tr∆∞·ªõc.

# ---

# B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt **phi√™n b·∫£n t·ªëi ∆∞u h∆°n** c·ªßa c√πng ƒëo·∫°n code n√†y (d√πng `bisect` thay v√¨ `deque` ƒë·ªÉ t√¨m nhanh ng√†y kh√¥ ph√π h·ª£p) kh√¥ng?









# import java.util.*;

# public class b60 {
#     static Scanner sc = new Scanner(System.in);

#     public static void main(String[] args) {

#         int n = sc.nextInt();

#         int[] rains = new int[n];

#         for (int i = 0; i < n; i++) {
#             rains[i] = sc.nextInt();
#         }

#         int[] result = avoidFlood(rains);

#         if (result.length == 0) {
#             System.out.println("Output: []");
#             System.out.println("Gi·∫£i th√≠ch: Kh√¥ng th·ªÉ tr√°nh ƒë∆∞·ª£c ng·∫≠p l·ª•t!");
#         } else {
#             // In k·∫øt qu·∫£ d·∫°ng m·∫£ng chu·∫©n
#             System.out.print("Output: [");
#             for (int i = 0; i < result.length; i++) {
#                 System.out.print(result[i]);
#                 if (i < result.length - 1)
#                     System.out.print(",");
#             }
#             System.out.println("]");

#             // Gi·∫£i th√≠ch ng·∫Øn
#             System.out.println("Gi·∫£i th√≠ch: -1 l√† ng√†y m∆∞a, s·ªë d∆∞∆°ng l√† h·ªì ƒë∆∞·ª£c h√∫t.");
#         }
#         sc.close();
#     }

#     public static int[] avoidFlood(int[] rains) {
#         int n = rains.length;
#         int[] fa = new int[n + 1]; // M·∫£ng "cha" d√πng cho Union-Find (DSU)
#         for (int i = 0; i <= n; i++) {
#             fa[i] = i; // Ban ƒë·∫ßu, m·ªói v·ªã tr√≠ l√† "cha" c·ªßa ch√≠nh n√≥
#         }

#         int[] ans = new int[n]; // K·∫øt qu·∫£ cu·ªëi c√πng
#         Map<Integer, Integer> fullDay = new HashMap<>(); // L∆∞u ng√†y h·ªì b·ªã ƒë·∫ßy: lake -> day

#         for (int i = 0; i < n; i++) {
#             int lake = rains[i];

#             // N·∫øu h√¥m nay kh√¥ng m∆∞a, c√≥ th·ªÉ d√πng ƒë·ªÉ h√∫t n∆∞·ªõc t·ª´ 1 h·ªì n√†o ƒë√≥
#             if (lake == 0) {
#                 ans[i] = 1; // t·∫°m ƒë·∫∑t 1 (n·∫øu kh√¥ng ƒë∆∞·ª£c d√πng sau n√†y)
#                 continue;
#             }

#             // N·∫øu h·ªì n√†y t·ª´ng b·ªã ƒë·∫ßy tr∆∞·ªõc ƒë√≥
#             Integer j = fullDay.get(lake);
#             if (j != null) {
#                 // C·∫ßn t√¨m m·ªôt ng√†y kh√¥ (dryDay) sau ng√†y j, tr∆∞·ªõc ng√†y i ƒë·ªÉ h√∫t n∆∞·ªõc
#                 int dryDay = find(j + 1, fa);
#                 if (dryDay >= i) {
#                     // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c ng√†y ph√π h·ª£p ‚Üí ch·∫Øc ch·∫Øn b·ªã ng·∫≠p
#                     return new int[] {};
#                 }

#                 // D√πng ng√†y dryDay ƒë·ªÉ h√∫t n∆∞·ªõc c·ªßa h·ªì lake
#                 ans[dryDay] = lake;

#                 // ƒê√°nh d·∫•u r·∫±ng dryDay ƒë√£ ƒë∆∞·ª£c d√πng (b·ªè kh·ªèi DSU)
#                 fa[dryDay] = find(dryDay + 1, fa);
#             }

#             // Ng√†y m∆∞a th√¨ kh√¥ng th·ªÉ h√∫t ‚Üí ƒë·∫∑t -1
#             ans[i] = -1;

#             // ƒê√°nh d·∫•u r·∫±ng ng√†y i kh√¥ng th·ªÉ d√πng ƒë·ªÉ h√∫t n·ªØa
#             fa[i] = i + 1;

#             // L∆∞u ng√†y h·ªì lake b·ªã ƒë·∫ßy g·∫ßn nh·∫•t
#             fullDay.put(lake, i);
#         }
#         return ans;
#     }

#     // H√†m t√¨m "ng√†y kh√¥ ti·∫øp theo" d√πng DSU (Union-Find)
#     public static int find(int x, int[] fa) {
#         if (fa[x] != x) {
#             fa[x] = find(fa[x], fa); // Path compression
#         }
#         return fa[x];
#     }
# }

# // Okk üëá m√¨nh s·∫Ω gi·∫£i th√≠ch **r·∫•t d·ªÖ hi·ªÉu** ƒë·ªÅ b√†i **LeetCode 1488 ‚Äì Avoid
# // Flood in The City** cho b·∫°n nha:

# // ---

# // ## üß© **ƒê·ªÅ b√†i**

# // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt th√†nh ph·ªë v·ªõi nhi·ªÅu **h·ªì n∆∞·ªõc (lakes)**.
# // M·ªói ng√†y, tr·ªùi c√≥ th·ªÉ **m∆∞a** v√†o m·ªôt h·ªì n√†o ƒë√≥, ho·∫∑c **tr·ªùi kh√¥ (sunny)** ƒë·ªÉ
# // b·∫°n c√≥ th·ªÉ **x·∫£ n∆∞·ªõc** ra kh·ªèi m·ªôt h·ªì n√†o ƒë√≥.

# // B·∫°n ƒë∆∞·ª£c cho m·ªôt m·∫£ng `rains[]`, trong ƒë√≥:

# // * `rains[i] = x` nghƒ©a l√† **ng√†y th·ª© i** tr·ªùi **m∆∞a v√†o h·ªì x**.
# // * `rains[i] = 0` nghƒ©a l√† **ng√†y th·ª© i kh√¥ng m∆∞a** ‚Üí b·∫°n **c√≥ th·ªÉ ch·ªçn m·ªôt h·ªì
# // b·∫•t k·ª≥ ƒë·ªÉ x·∫£ n∆∞·ªõc** (l√†m kh√¥ h·ªì ƒë√≥).

# // ---

# // ## ‚öôÔ∏è **Lu·∫≠t ch∆°i / ƒêi·ªÅu ki·ªán**

# // * Khi tr·ªùi **m∆∞a v√†o h·ªì x**, n·∫øu h·ªì ƒë√≥ **ƒë√£ ƒë·∫ßy n∆∞·ªõc** m√† l·∫°i **m∆∞a th√™m**,
# // th√¨ **b·ªã ng·∫≠p (flood)** üíß ‚Üí **FAIL** (ph·∫£i tr√°nh tr∆∞·ªùng h·ª£p n√†y).
# // * Khi **tr·ªùi kh√¥**, b·∫°n c√≥ th·ªÉ ch·ªçn **m·ªôt h·ªì ƒëang ƒë·∫ßy n∆∞·ªõc** ƒë·ªÉ **x·∫£ n∆∞·ªõc**
# // (l√†m kh√¥ h·ªì ƒë√≥).
# // * B·∫°n ph·∫£i **quy·∫øt ƒë·ªãnh ch·ªçn h·ªì n√†o ƒë·ªÉ x·∫£ n∆∞·ªõc** sao cho **kh√¥ng bao gi·ªù x·∫£y
# // ra flood** trong su·ªët chu·ªói ng√†y.

# // ---

# // ## üéØ **Nhi·ªám v·ª•**

# // Tr·∫£ v·ªÅ **m·ªôt m·∫£ng k·∫øt qu·∫£** c√πng k√≠ch th∆∞·ªõc v·ªõi `rains`:

# // * N·∫øu `rains[i] > 0` (m∆∞a): b·∫°n **ph·∫£i ƒë·ªÉ k·∫øt qu·∫£ l√† -1** (v√¨ b·∫°n kh√¥ng l√†m
# // g√¨ ƒë∆∞·ª£c h√¥m ƒë√≥).
# // * N·∫øu `rains[i] == 0` (kh√¥): b·∫°n **ph·∫£i ch·ªçn m·ªôt h·ªì ƒë·ªÉ x·∫£ n∆∞·ªõc** (v√≠ d·ª• h·ªì s·ªë
# // `x`), n√™n `res[i] = x`.

# // N·∫øu **kh√¥ng c√≥ c√°ch n√†o tr√°nh ƒë∆∞·ª£c flood**, tr·∫£ v·ªÅ m·∫£ng r·ªóng `[]`.

# // ---

# // ## üß† **V√≠ d·ª• 1**

# // ### Input:

# // ```
# // rains = [1, 2, 0, 1, 2]
# // ```

# // ### Gi·∫£i th√≠ch t·ª´ng ng√†y:

# // | Ng√†y | rains[i] | H√†nh ƒë·ªông | Tr·∫°ng th√°i h·ªì |
# // | ---- | -------- | ------------------------------------ | ------------------
# // |
# // | 1 | 1 | M∆∞a v√†o h·ªì 1 | h·ªì 1 ƒë·∫ßy |
# // | 2 | 2 | M∆∞a v√†o h·ªì 2 | h·ªì 1,2 ƒë·ªÅu ƒë·∫ßy |
# // | 3 | 0 | Tr·ªùi kh√¥, ta ch·ªçn x·∫£ h·ªì 1 (v√≠ d·ª•) | h·ªì 1 kh√¥, h·ªì 2 ƒë·∫ßy |
# // | 4 | 1 | M∆∞a l·∫°i v√†o h·ªì 1 (ƒë∆∞·ª£c v√¨ ƒë√£ kh√¥) | h·ªì 1,2 ƒë·∫ßy |
# // | 5 | 2 | M∆∞a v√†o h·ªì 2 (nh∆∞ng h·ªì 2 ƒëang ƒë·∫ßy ‚ùå) | ‚Üí flood! |

# // ‚ùå V·∫≠y c√°ch ch·ªçn h·ªì 1 ·ªü ng√†y 3 sai.

# // ---

# // ### C√°ch ƒë√∫ng:

# // Ng√†y 3 n√™n **x·∫£ h·ªì 2** thay v√¨ h·ªì 1.
# // ‚Üí V√¨ h·ªì 2 s·∫Ω b·ªã m∆∞a l·∫°i s·ªõm h∆°n.

# // | Ng√†y | rains[i] | H√†nh ƒë·ªông | Tr·∫°ng th√°i h·ªì |
# // | ---- | -------- | ------------ | ------------------- |
# // | 1 | 1 | M∆∞a v√†o h·ªì 1 | h·ªì 1 ƒë·∫ßy |
# // | 2 | 2 | M∆∞a v√†o h·ªì 2 | h·ªì 1,2 ƒë·∫ßy |
# // | 3 | 0 | X·∫£ h·ªì 2 | h·ªì 1 ƒë·∫ßy, h·ªì 2 kh√¥ |
# // | 4 | 1 | M∆∞a l·∫°i h·ªì 1 | h·ªì 1 ƒë·∫ßy (ƒë√£ kh√¥) |
# // | 5 | 2 | M∆∞a l·∫°i h·ªì 2 | h·ªì 2 ƒë·∫ßy (ƒë√£ kh√¥) ‚úÖ |

# // ### Output:

# // ```
# // [-1, -1, 2, -1, -1]
# // ```

# // ---

# // ## üß© **V√≠ d·ª• 2**

# // ### Input:

# // ```
# // rains = [1, 2, 3, 4]
# // ```

# // ‚Üí To√†n m∆∞a, kh√¥ng c√≥ ng√†y kh√¥ ‚Üí flood kh√¥ng x·∫£y ra.

# // ‚úÖ Output:

# // ```
# // [-1, -1, -1, -1]
# // ```

# // ---

# // ## üß© **V√≠ d·ª• 3**

# // ### Input:

# // ```
# // rains = [1, 2, 0, 0, 2, 1]
# // ```

# // K·∫øt qu·∫£ h·ª£p l·ªá (m·ªôt trong nhi·ªÅu c√°ch):

# // ```
# // [-1, -1, 2, 1, -1, -1]
# // ```

# // * Ng√†y 3: x·∫£ h·ªì 2
# // * Ng√†y 4: x·∫£ h·ªì 1
# // ‚Üí Sau ƒë√≥ c√°c h·ªì ƒë·ªÅu an to√†n.

# // ---

# // ## üßÆ **√ù t∆∞·ªüng thu·∫≠t to√°n (t√≥m t·∫Øt)**

# // 1. D√πng m·ªôt `set` ƒë·ªÉ l∆∞u c√°c **h·ªì ƒëang ƒë·∫ßy n∆∞·ªõc**.
# // 2. D√πng `map` ƒë·ªÉ l∆∞u **ng√†y k·∫ø ti·∫øp m√† h·ªì ƒë√≥ s·∫Ω b·ªã m∆∞a l·∫°i**.
# // 3. Duy·ªát t·ª´ng ng√†y:

# // * N·∫øu l√† **m∆∞a (rains[i] > 0)**:

# // * N·∫øu h·ªì ƒë√≥ **ƒë√£ ƒë·∫ßy**, m√† **ch∆∞a ƒë∆∞·ª£c x·∫£ tr∆∞·ªõc khi m∆∞a l·∫°i**, ‚Üí flood ‚ùå
# // * Ng∆∞·ª£c l·∫°i, **th√™m v√†o set** l√† h·ªì ƒë·∫ßy.
# // * N·∫øu l√† **ng√†y kh√¥ (rains[i] == 0)**:

# // * Ch·ªçn **h·ªì n√†o c·∫ßn x·∫£ s·ªõm nh·∫•t** (s·∫Ω m∆∞a l·∫°i s·ªõm nh·∫•t).
# // * N·∫øu kh√¥ng c√≥ h·ªì n√†o c·∫ßn x·∫£, th√¨ x·∫£ ƒë·∫°i h·ªì n√†o (v√≠ d·ª• 1).

# // ---

# // ## üßæ **T√≥m l·∫°i**

# // | Tr·∫°ng th√°i | √ù nghƒ©a |
# // | ------------------------- |
# // ---------------------------------------------------- |
# // | `rains[i] > 0` | m∆∞a v√†o h·ªì ƒë√≥ ‚Üí k·∫øt qu·∫£ l√† `-1` |
# // | `rains[i] == 0` | tr·ªùi kh√¥ ‚Üí ch·ªçn h·ªì n√†o ƒë·ªÉ x·∫£ n∆∞·ªõc (gi√° tr·ªã l√† s·ªë h·ªì) |
# // | N·∫øu kh√¥ng th·ªÉ tr√°nh flood | tr·∫£ v·ªÅ `[]` |

# // ---

# // B·∫°n c√≥ mu·ªën m√¨nh gi·∫£i th√≠ch lu√¥n **c√°ch c√†i thu·∫≠t to√°n b·∫±ng Python ho·∫∑c
# // Java** ƒë·ªÉ b·∫°n hi·ªÉu logic s√¢u h∆°n kh√¥ng?
# // R·∫•t hay! üëè
# // ƒêo·∫°n code b·∫°n ƒë∆∞a l√† **m·ªôt l·ªùi gi·∫£i n√¢ng cao v√† c·ª±c k·ª≥ t·ªëi ∆∞u** cho b√†i
# // **LeetCode 1488 ‚Äì Avoid Flood in The City**, s·ª≠ d·ª•ng **Disjoint Set Union
# // (DSU)** hay c√≤n g·ªçi l√† **Union-Find**, ƒë·ªÉ t√¨m **ng√†y kh√¥ h·ª£p l·ªá g·∫ßn nh·∫•t**
# // m·ªôt c√°ch nhanh ch√≥ng.

# // B√¢y gi·ªù m√¨nh s·∫Ω **gi·∫£i th√≠ch chi ti·∫øt t·ª´ng ph·∫ßn**, k√®m **t∆∞ duy thu·∫≠t to√°n**
# // ph√≠a sau.

# // ---

# // ## üß© **M·ª•c ti√™u c·ªßa b√†i**

# // Ta c√≥ m·∫£ng `rains[]`:

# // * `rains[i] > 0` ‚Üí ng√†y i **m∆∞a v√†o h·ªì** `rains[i]`
# // * `rains[i] == 0` ‚Üí ng√†y i **kh√¥**, ta c√≥ th·ªÉ **x·∫£ n∆∞·ªõc m·ªôt h·ªì** t√πy ch·ªçn

# // Ta ph·∫£i s·∫Øp x·∫øp vi·ªác **x·∫£ n∆∞·ªõc h·ª£p l√Ω**, ƒë·ªÉ **kh√¥ng c√≥ h·ªì n√†o b·ªã m∆∞a hai l·∫ßn
# // m√† ch∆∞a k·ªãp x·∫£**.

# // ---

# // ## ‚öôÔ∏è **√ù t∆∞·ªüng ch√≠nh c·ªßa thu·∫≠t to√°n**

# // Khi m∆∞a v√†o h·ªì `lake`:

# // * N·∫øu h·ªì `lake` ƒë√£ **ƒë·∫ßy tr∆∞·ªõc ƒë√≥ (full)**, ta **ph·∫£i t√¨m m·ªôt ng√†y kh√¥ sau
# // ng√†y ƒë√≥ nh∆∞ng tr∆∞·ªõc ng√†y hi·ªán t·∫°i** ƒë·ªÉ **x·∫£ h·ªì n√†y**.
# // * N·∫øu **kh√¥ng t√¨m ƒë∆∞·ª£c ng√†y kh√¥ n√†o** trong kho·∫£ng ƒë√≥ ‚Üí flood ‚ùå.

# // ---

# // ## üí° **C√°ch ti·∫øp c·∫≠n (DSU / Union-Find)**

# // B√¨nh th∆∞·ªùng, ng∆∞·ªùi ta d√πng `TreeSet` ƒë·ªÉ t√¨m "ng√†y kh√¥ g·∫ßn nh·∫•t".
# // ·ªû ƒë√¢y, d√πng **Union-Find** (hay c√≤n g·ªçi l√† **Disjoint Set**) ƒë·ªÉ tƒÉng t·ªëc:
# // ‚Üí t√¨m nhanh **ng√†y kh√¥ ti·∫øp theo ch∆∞a ƒë∆∞·ª£c d√πng**.

# // ---

# // ## üß† **Gi·∫£i th√≠ch t·ª´ng ph·∫ßn code**

# // ### 1Ô∏è‚É£ Kh·ªüi t·∫°o m·∫£ng `fa[]` (Union-Find)

# // ```java
# // int[] fa = new int[n + 1];
# // for (int i = 0; i <= n; i++) {
# // fa[i] = i;
# // }
# // ```

# // * `fa[i]` l√† **cha (parent)** c·ªßa node i.
# // * N·∫øu `fa[i] == i` nghƒ©a l√† ng√†y `i` **ch∆∞a b·ªã d√πng ƒë·ªÉ x·∫£ n∆∞·ªõc**.
# // * Sau khi d√πng ng√†y `i` (ƒë√£ x·∫£ n∆∞·ªõc), ta **h·ª£p nh·∫•t n√≥ v·ªõi ng√†y i+1**:

# // ```java
# // fa[i] = find(i + 1, fa);
# // ```

# // ‚Üí ƒêi·ªÅu n√†y nghƒ©a l√†: ‚Äúng√†y i ƒë√£ ƒë∆∞·ª£c d√πng r·ªìi, h√£y nh·∫£y ƒë·∫øn ng√†y k·∫ø ti·∫øp c√≤n
# // tr·ªëng.‚Äù

# // ---

# // ### 2Ô∏è‚É£ K·∫øt qu·∫£ v√† b·∫£ng l∆∞u

# // ```java
# // int[] ans = new int[n];
# // Map<Integer, Integer> fullDay = new HashMap<>(); // lake -> ng√†y n√≥ ƒë·∫ßy n∆∞·ªõc
# // ```

# // * `ans[i]` l√† k·∫øt qu·∫£ (ng√†y i l√†m g√¨)

# // * `-1` ‚Üí ng√†y m∆∞a
# // * `x` ‚Üí ng√†y kh√¥, x·∫£ h·ªì `x`
# // * `1` ‚Üí n·∫øu ng√†y kh√¥ ch∆∞a d√πng (t·∫°m)
# // * `fullDay` ghi nh·ªõ h·ªì n√†o ƒë√£ ƒë·∫ßy, v√† ng√†y n√≥ b·ªã m∆∞a l·∫ßn tr∆∞·ªõc.

# // ---

# // ### 3Ô∏è‚É£ V√≤ng l·∫∑p ch√≠nh

# // ```java
# // for (int i = 0; i < n; i++) {
# // int lake = rains[i];
# // if (lake == 0) {
# // ans[i] = 1;
# // continue;
# // }
# // ```

# // * N·∫øu l√† ng√†y kh√¥ ‚Üí t·∫°m ƒëi·ªÅn `1`, s·∫Ω thay b·∫±ng h·ªì th·∫≠t sau.
# // * N·∫øu l√† ng√†y m∆∞a (`lake > 0`) ‚Üí x·ª≠ l√Ω logic ti·∫øp theo.

# // ---

# // ### 4Ô∏è‚É£ Khi g·∫∑p h·ªì **ƒë√£ t·ª´ng ƒë·∫ßy**

# // ```java
# // Integer j = fullDay.get(lake);
# // if (j != null) {
# // int dryDay = find(j + 1, fa);
# // if (dryDay >= i) {
# // return new int[]{}; // kh√¥ng t√¨m ƒë∆∞·ª£c ng√†y kh√¥ h·ª£p l·ªá
# // }
# // ans[dryDay] = lake;
# // fa[dryDay] = find(dryDay + 1, fa); // ƒë√°nh d·∫•u dryDay ƒë√£ d√πng
# // }
# // ```

# // üß© Di·ªÖn gi·∫£i:

# // * `j` = ng√†y **tr∆∞·ªõc ƒë√≥** h·ªì `lake` b·ªã m∆∞a (ƒë·∫ßy).
# // * Ta c·∫ßn **t√¨m m·ªôt ng√†y kh√¥ sau j nh∆∞ng tr∆∞·ªõc i** ƒë·ªÉ x·∫£ h·ªì n√†y.

# // ‚Üí D√πng `find(j + 1, fa)` ƒë·ªÉ **t√¨m ng√†y kh√¥ ƒë·∫ßu ti√™n ‚â• j+1 m√† ch∆∞a b·ªã d√πng**.

# // * N·∫øu `dryDay >= i` ‚Üí t·ª©c kh√¥ng c√≥ ng√†y kh√¥ n√†o gi·ªØa hai l·∫ßn m∆∞a ‚Üí flood ‚ùå.
# // * Ng∆∞·ª£c l·∫°i:

# // * `ans[dryDay] = lake` ‚Üí t·∫°i ng√†y kh√¥ ƒë√≥, ta x·∫£ h·ªì n√†y.
# // * `fa[dryDay] = find(dryDay + 1, fa)` ‚Üí ƒë√°nh d·∫•u ng√†y kh√¥ n√†y **ƒë√£ d√πng
# // r·ªìi**, nh·∫£y t·ªõi ng√†y kh√¥ k·∫ø ti·∫øp.

# // ---

# // ### 5Ô∏è‚É£ C·∫≠p nh·∫≠t sau khi m∆∞a

# // ```java
# // ans[i] = -1; // m∆∞a ng√†y i
# // fa[i] = i + 1; // ng√†y i b·ªã "x√≥a" (ƒë√£ d√πng)
# // fullDay.put(lake, i); // l∆∞u h·ªì ƒë√£ ƒë·∫ßy ·ªü ng√†y i
# // ```

# // ---

# // ### 6Ô∏è‚É£ **H√†m `find()`**

# // ```java
# // private int find(int x, int[] fa) {
# // if (fa[x] != x) {
# // fa[x] = find(fa[x], fa); // n√©n ƒë∆∞·ªùng (path compression)
# // }
# // return fa[x];
# // }
# // ```

# // ƒê√¢y l√† thu·∫≠t to√°n **DSU chu·∫©n**:

# // * N·∫øu `fa[x] != x`, th√¨ truy ng∆∞·ª£c cha ƒë·∫øn khi g·∫∑p g·ªëc.
# // * √Åp d·ª•ng **path compression** ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô truy v·∫•n.

# // ---

# // ## üìä V√≠ d·ª• minh h·ªça

# // ### Input:

# // ```
# // rains = [1, 2, 0, 1, 2]
# // ```

# // ### Di·ªÖn gi·∫£i t·ª´ng b∆∞·ªõc:

# // | i | rains[i] | fullDay | fa | H√†nh ƒë·ªông | ans |
# // | - | -------- | --------- | ----- |
# // ------------------------------------------------------------- | ------------
# // |
# // | 0 | 1 | {1‚Üí0} | [0‚Üí1] | m∆∞a h·ªì 1 | [-1] |
# // | 1 | 2 | {1‚Üí0,2‚Üí1} | [1‚Üí2] | m∆∞a h·ªì 2 | [-1,-1] |
# // | 2 | 0 | {1‚Üí0,2‚Üí1} | [2‚Üí2] | ng√†y kh√¥ (t·∫°m 1) | [-1,-1,1] |
# // | 3 | 1 | {1‚Üí0,2‚Üí1} | | h·ªì 1 ƒë√£ ƒë·∫ßy ‚Üí t√¨m dryDay sau 0: dryDay=2 ‚Üí x·∫£ h·ªì 1
# // t·∫°i ng√†y 2 | [-1,-1,1,-1] |
# // | 4 | 2 | {1‚Üí3,2‚Üí1} | | h·ªì 2 ƒë√£ ƒë·∫ßy ‚Üí kh√¥ng c√≤n ng√†y kh√¥ sau 1 ‚Üí flood ‚ùå | |

# // ‚Üí Kh√¥ng tr√°nh ƒë∆∞·ª£c flood ‚Üí tr·∫£ v·ªÅ `[]`.

# // ---

# // ## ‚ö° **ƒê·ªô ph·ª©c t·∫°p**

# // | Lo·∫°i | ƒê·ªô ph·ª©c t·∫°p |
# // | --------- | ------------------------------------- |
# // | Th·ªùi gian | **O(n Œ±(n))** ‚âà O(n) (g·∫ßn tuy·∫øn t√≠nh) |
# // | B·ªô nh·ªõ | O(n) |

# // > Œ±(n): h√†m ngh·ªãch ƒë·∫£o Ackermann, c·ª±c nh·ªè (‚âà1)

# // ---

# // ## ‚úÖ **T√≥m t·∫Øt logic**

# // | B∆∞·ªõc | M√¥ t·∫£ |
# // | ---- | ----------------------------------------------------- |
# // | 1 | Duy·ªát t·ª´ng ng√†y |
# // | 2 | N·∫øu m∆∞a h·ªì `x`: ki·ªÉm tra h·ªì ƒë√≥ ƒë√£ ƒë·∫ßy ch∆∞a |
# // | 3 | N·∫øu ƒë√£ ƒë·∫ßy ‚Üí t√¨m ng√†y kh√¥ h·ª£p l·ªá g·∫ßn nh·∫•t (DSU) ƒë·ªÉ x·∫£ |
# // | 4 | N·∫øu kh√¥ng c√≥ ng√†y kh√¥ ‚Üí flood |
# // | 5 | N·∫øu tr·ªùi kh√¥ ‚Üí ghi t·∫°m 1 |
# // | 6 | C·∫≠p nh·∫≠t Union-Find sau m·ªói thao t√°c |

# // ---

# // N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ **v·∫Ω s∆° ƒë·ªì lu·ªìng d·ªØ li·ªáu c·ªßa DSU** (fa[]) ƒë·ªÉ th·∫•y
# // r√µ c√°ch n√≥ ‚Äúnh·∫£y‚Äù qua c√°c ng√†y ƒë√£ d√πng ‚Äî gi√∫p b·∫°n hi·ªÉu c∆° ch·∫ø ‚Äút√¨m ng√†y kh√¥
# // ti·∫øp theo‚Äù nhanh nh∆∞ th·∫ø n√†o.
# // B·∫°n mu·ªën m√¨nh v·∫Ω kh√¥ng?
