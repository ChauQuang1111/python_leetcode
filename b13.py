# 3197. Find the Minimum Area to Cover All Ones II(23/08/2025)
from typing import List
from math import inf

class Solution:
    def minimumSum(self, grid: List[List[int]]) -> int:
        # Tr·∫£ v·ªÅ min gi·ªØa 2 h∆∞·ªõng: nguy√™n b·∫£n v√† xoay 90 ƒë·ªô
        return min(self.f(grid), self.f(rotate(grid)))

    def f(self, a: List[List[int]]) -> int:
        m, n = len(a), len(a[0])
        
        # L∆∞u c·ªôt tr√°i - ph·∫£i c√≥ s·ªë 1 ·ªü m·ªói h√†ng
        lr = []
        for i in range(m):
            l, r = -1, 0
            for j in range(n):
                if a[i][j] > 0:
                    if l < 0:
                        l = j
                    r = j
            lr.append((l, r))

        # ---------------------------
        # H√†m ph·ª•: t√≠nh di·ªán t√≠ch h√¨nh ch·ªØ nh·∫≠t nh·ªè nh·∫•t
        # ch·ª©a t·∫•t c·∫£ s·ªë 1 trong v√πng (0,0) ‚Üí (i,j)
        # ---------------------------
        def minimumArea(a: List[List[int]]) -> List[List[int]]:
            m, n = len(a), len(a[0])
            f = [[0] * (n + 1) for _ in range(m + 1)]
            border = [(-1, 0, 0)] * n  # l∆∞u [h√†ng_ƒë·∫ßu, c·ªôt_tr√°i, c·ªôt_ph·∫£i]
            for i, row in enumerate(a):
                left, right = -1, 0
                for j, x in enumerate(row):
                    if x:
                        if left < 0:
                            left = j
                        right = j
                    pre_top, pre_left, pre_right = border[j]
                    if left < 0:  
                        # H√†ng n√†y ch∆∞a c√≥ 1 ‚Üí copy k·∫øt qu·∫£ t·ª´ h√†ng tr√™n
                        f[i + 1][j + 1] = f[i][j + 1]
                    elif pre_top < 0:  
                        # H√†ng n√†y c√≥ 1, ph√≠a tr√™n to√†n 0
                        f[i + 1][j + 1] = right - left + 1
                        border[j] = (i, left, right)
                    else:  
                        # H√†ng n√†y c√≥ 1, tr√™n c≈©ng c√≥ 1
                        l = min(pre_left, left)
                        r = max(pre_right, right)
                        f[i + 1][j + 1] = (r - l + 1) * (i - pre_top + 1)
                        border[j] = (pre_top, l, r)
            return f

        # T√≠nh 4 h∆∞·ªõng di·ªán t√≠ch nh·ªè nh·∫•t (lt, lb, rb, rt)
        lt = minimumArea(a)                           # tr√™n tr√°i
        a = rotate(a)
        lb = rotate(rotate(rotate(minimumArea(a))))   # d∆∞·ªõi tr√°i
        a = rotate(a)
        rb = rotate(rotate(minimumArea(a)))           # d∆∞·ªõi ph·∫£i
        a = rotate(a)
        rt = rotate(minimumArea(a))                   # tr√™n ph·∫£i

        ans = inf

        # -------------------------------
        # 1) Tr∆∞·ªùng h·ª£p chia th√†nh 3 kh·ªëi ngang (tr√™n ‚Äì gi·ªØa ‚Äì d∆∞·ªõi)
        # -------------------------------
        if m >= 3:
            for i in range(1, m):
                left, right, top, bottom = n, 0, m, 0
                for j in range(i + 1, m):
                    l, r = lr[j - 1]
                    if l >= 0:
                        left = min(left, l)
                        right = max(right, r)
                        top = min(top, j - 1)
                        bottom = j - 1
                    # Di·ªán t√≠ch = kh·ªëi tr√™n + kh·ªëi gi·ªØa + kh·ªëi d∆∞·ªõi
                    ans = min(ans, lt[i][n] + (right - left + 1) * (bottom - top + 1) + lb[j][n])

        # -------------------------------
        # 2) Tr∆∞·ªùng h·ª£p chia theo h√¨nh ch·ªØ L
        # -------------------------------
        if m >= 2 and n >= 2:
            for i in range(1, m):
                for j in range(1, n):
                    # ch·ªØ L ki·ªÉu tr√™n ‚Äì gi·ªØa ‚Äì d∆∞·ªõi
                    ans = min(ans, lt[i][n] + lb[i][j] + rb[i][j])
                    # ch·ªØ L ki·ªÉu tr√™n tr√°i ‚Äì tr√™n ph·∫£i ‚Äì d∆∞·ªõi
                    ans = min(ans, lt[i][j] + rt[i][j] + lb[i][n])

        return ans


# H√†m xoay ma tr·∫≠n 90¬∞
def rotate(a: List[List[int]]) -> List[List[int]]:
    # zip(*reversed(a)) = xoay 90 ƒë·ªô theo chi·ªÅu kim ƒë·ªìng h·ªì
    return list(zip(*reversed(a)))







# B·∫°n c√≥ m·ªôt ma tr·∫≠n nh·ªã ph√¢n `grid` (g·ªìm **0** v√† **1**).
# B·∫°n c·∫ßn **ch·ªçn t·ªëi ƒëa 3 h√¨nh ch·ªØ nh·∫≠t** sao cho:

# * M·ªói h√¨nh ch·ªØ nh·∫≠t bao ph·ªß c√°c √¥ li√™n ti·∫øp nhau.
# * T·∫•t c·∫£ c√°c √¥ ch·ª©a **1** trong `grid` ƒë·ªÅu ƒë∆∞·ª£c bao ph·ªß b·ªüi √≠t nh·∫•t m·ªôt h√¨nh ch·ªØ nh·∫≠t.
# * T·ªïng di·ªán t√≠ch c·ªßa c√°c h√¨nh ch·ªØ nh·∫≠t l√† **nh·ªè nh·∫•t**.

# üëâ K·∫øt qu·∫£ c·∫ßn tr·∫£ v·ªÅ ch√≠nh l√† di·ªán t√≠ch t·ªëi thi·ªÉu ƒë√≥.

# ---

# ### üìå 2. √ù t∆∞·ªüng ch√≠nh

# N·∫øu ch·ªâ c√≥ **1 h√¨nh ch·ªØ nh·∫≠t**, th√¨ ta ch·ªâ c·∫ßn:

# * T√¨m **h√†ng nh·ªè nh·∫•t (minRow), h√†ng l·ªõn nh·∫•t (maxRow)** c√≥ ch·ª©a `1`.
# * T√¨m **c·ªôt nh·ªè nh·∫•t (minCol), c·ªôt l·ªõn nh·∫•t (maxCol)** c√≥ ch·ª©a `1`.
# * Di·ªán t√≠ch = `(maxRow - minRow + 1) * (maxCol - minCol + 1)`.

# ‚ö° Nh∆∞ng v√¨ ta ƒë∆∞·ª£c ph√©p d√πng **t·ªëi ƒëa 3 h√¨nh ch·ªØ nh·∫≠t**, n√™n b√†i to√°n ph·ª©c t·∫°p h∆°n:

# * C√≥ th·ªÉ t√°ch `grid` theo **h√†ng** ho·∫∑c **c·ªôt** th√†nh 2 ho·∫∑c 3 v√πng nh·ªè.
# * V·ªõi m·ªói v√πng, ta t√≠nh h√¨nh ch·ªØ nh·∫≠t nh·ªè nh·∫•t bao ph·ªß t·∫•t c·∫£ `1` trong v√πng ƒë√≥.
# * T·ªïng di·ªán t√≠ch = t·ªïng di·ªán t√≠ch c·ªßa c√°c h√¨nh ch·ªØ nh·∫≠t con.

# Sau ƒë√≥ l·∫•y **min** trong t·∫•t c·∫£ c√°c c√°ch chia.

# ---

# ### üìå 3. C√°ch chia h√¨nh ch·ªØ nh·∫≠t

# C√≥ 2 ki·ªÉu chia:

# 1. **Theo h√†ng (horizontal cut)**
#    V√≠ d·ª•: chia ma tr·∫≠n th√†nh 2 ho·∫∑c 3 ph·∫ßn theo chi·ªÅu ngang.
#    M·ªói ph·∫ßn ‚Üí t√≠nh di·ªán t√≠ch ch·ªØ nh·∫≠t bao ph·ªß c√°c `1` trong ph·∫ßn ƒë√≥.

# 2. **Theo c·ªôt (vertical cut)**
#    T∆∞∆°ng t·ª±, chia theo chi·ªÅu d·ªçc th√†nh 2 ho·∫∑c 3 ph·∫ßn.

# üëâ V·ªõi m·ªói c√°ch chia, ta t√≠nh t·ªïng di·ªán t√≠ch r·ªìi ch·ªçn nh·ªè nh·∫•t.

# ---

# ### üìå 4. V√≠ d·ª• minh h·ªça

# #### V√≠ d·ª• 1:

# ```
# grid = [[1,0,1],
#         [1,1,1]]
# ```

# * N·∫øu ch·ªâ d√πng 1 h√¨nh ch·ªØ nh·∫≠t:
#   Bao ph·ªß t·ª´ `(0,0)` ƒë·∫øn `(1,2)` ‚Üí di·ªán t√≠ch = `2 * 3 = 6`.

# * Nh∆∞ng ta c√≥ th·ªÉ chia th√†nh 2 ph·∫ßn **theo c·ªôt**:

#   * C·ªôt tr√°i: bao ph·ªß `[[1],[1]]` ‚Üí di·ªán t√≠ch = `2 * 1 = 2`.
#   * C·ªôt ph·∫£i: bao ph·ªß `[[1],[1]]` ‚Üí di·ªán t√≠ch = `2 * 1 = 2`.
#   * Gi·ªØa (c·ªôt 1): bao ph·ªß `[[0],[1]]` ‚Üí di·ªán t√≠ch = `2 * 1 = 2`.

#   Nh∆∞ng n·∫øu nh√≥m l·∫°i th√¥ng minh h∆°n:

#   * L·∫•y **c·ªôt tr√°i (0..1)**: bao ph·ªß t·ª´ `(0,0)` ‚Üí `(1,1)` ‚Üí di·ªán t√≠ch = `2 * 2 = 4`.
#   * L·∫•y **c·ªôt ph·∫£i (2..2)**: bao ph·ªß t·ª´ `(0,2)` ‚Üí `(1,2)` ‚Üí di·ªán t√≠ch = `2 * 1 = 2`.

#   T·ªïng = `4 + 1 = 5` ‚úÖ (ƒë√°p √°n ƒë√∫ng).

# ---

# ### üìå 5. K·∫øt lu·∫≠n v·ªÅ thu·∫≠t to√°n

# * Thu·∫≠t to√°n s·∫Ω:

#   1. Th·ª≠ t·∫•t c·∫£ c√°ch chia theo h√†ng.
#   2. Th·ª≠ t·∫•t c·∫£ c√°ch chia theo c·ªôt.
#   3. V·ªõi m·ªói v√πng chia, t√≠nh h√¨nh ch·ªØ nh·∫≠t nh·ªè nh·∫•t bao ph·ªß `1`.
#   4. L·∫•y k·∫øt qu·∫£ nh·ªè nh·∫•t.


# D∆∞·ªõi ƒë√¢y l√† gi·∫£i th√≠ch chi ti·∫øt v·ªÅ thu·∫≠t to√°n trong ƒëo·∫°n m√£ Python b·∫°n ƒë√£ cung c·∫•p.

# ### Ph√¢n t√≠ch t·ªïng quan

# Thu·∫≠t to√°n n√†y gi·∫£i quy·∫øt b√†i to√°n "T√¨m di·ªán t√≠ch nh·ªè nh·∫•t ƒë·ªÉ bao ph·ªß t·∫•t c·∫£ c√°c s·ªë 1 b·∫±ng hai h√¨nh ch·ªØ nh·∫≠t" b·∫±ng c√°ch s·ª≠ d·ª•ng **quy ho·∫°ch ƒë·ªông (Dynamic Programming)** v√† k·ªπ thu·∫≠t **xoay ma tr·∫≠n**.

# √ù t∆∞·ªüng ch√≠nh l√†:

# 1.  **Chia b√†i to√°n l·ªõn th√†nh c√°c b√†i to√°n con:** Thay v√¨ t√¨m hai h√¨nh ch·ªØ nh·∫≠t bao ph·ªß t·∫•t c·∫£ c√°c s·ªë 1 m·ªôt c√°ch tr·ª±c ti·∫øp, thu·∫≠t to√°n t√¨m c√°ch chia ma tr·∫≠n th√†nh hai ho·∫∑c ba ph·∫ßn b·∫±ng c√°c ƒë∆∞·ªùng c·∫Øt ngang ho·∫∑c d·ªçc.
# 2.  **S·ª≠ d·ª•ng quy ho·∫°ch ƒë·ªông ƒë·ªÉ t√≠nh di·ªán t√≠ch ti·ªÅn t·ªë:** X√¢y d·ª±ng c√°c ma tr·∫≠n con ƒë·ªÉ l∆∞u tr·ªØ di·ªán t√≠ch bao ph·ªß t·ªëi thi·ªÉu t·ª´ m·ªôt g√≥c c·ªßa ma tr·∫≠n ƒë·∫øn m·ªôt ƒëi·ªÉm b·∫•t k·ª≥.
# 3.  **Xoay ma tr·∫≠n:** B·∫±ng c√°ch xoay ma tr·∫≠n 90 ƒë·ªô, ta c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng h√†m quy ho·∫°ch ƒë·ªông ƒë·ªÉ t√≠nh di·ªán t√≠ch t·ª´ c√°c g√≥c kh√°c (tr√™n-ph·∫£i, d∆∞·ªõi-tr√°i, d∆∞·ªõi-ph·∫£i) m√† kh√¥ng c·∫ßn vi·∫øt th√™m h√†m m·ªõi.
# 4.  **K·∫øt h·ª£p c√°c di·ªán t√≠ch:** Cu·ªëi c√πng, k·∫øt h·ª£p c√°c di·ªán t√≠ch ƒë√£ t√≠nh to√°n ƒë·ªÉ t√¨m ra t·ªïng di·ªán t√≠ch nh·ªè nh·∫•t cho c√°c tr∆∞·ªùng h·ª£p chia ma tr·∫≠n th√†nh 2 ho·∫∑c 3 ph·∫ßn.

### Gi·∫£i th√≠ch chi ti·∫øt c√°c h√†m


### `minimumSum(self, grid: List[List[int]]) -> int`

# ƒê√¢y l√† h√†m ch√≠nh c·ªßa ch∆∞∆°ng tr√¨nh.

#   * `return min(self.f(grid), self.f(rotate(grid)))`:
#       * H√†m n√†y g·ªçi `f(grid)` ƒë·ªÉ t√≠nh to√°n c√°c tr∆∞·ªùng h·ª£p chia ngang v√† d·ªçc tr√™n ma tr·∫≠n ban ƒë·∫ßu.
#       * Sau ƒë√≥, n√≥ g·ªçi `f(rotate(grid))` ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p t∆∞∆°ng t·ª± nh∆∞ng tr√™n ma tr·∫≠n ƒë√£ xoay 90 ƒë·ªô.
#       * Vi·ªác xoay ma tr·∫≠n cho ph√©p bao ph·ªß c√°c tr∆∞·ªùng h·ª£p m√† hai h√¨nh ch·ªØ nh·∫≠t ƒë∆∞·ª£c t·∫°o th√†nh b·ªüi c√°c ƒë∆∞·ªùng c·∫Øt ch√©o, v√¨ m·ªôt ƒë∆∞·ªùng c·∫Øt ch√©o tr√™n ma tr·∫≠n g·ªëc s·∫Ω tr·ªü th√†nh m·ªôt ƒë∆∞·ªùng c·∫Øt ngang ho·∫∑c d·ªçc tr√™n ma tr·∫≠n ƒë√£ xoay.



### `f(self, a: List[List[int]]) -> int`

# H√†m n√†y l√† trung t√¢m c·ªßa thu·∫≠t to√°n, n∆°i t·∫•t c·∫£ c√°c ph√©p t√≠nh ƒë∆∞·ª£c th·ª±c hi·ªán.

#   * `lr`: M·∫£ng n√†y l∆∞u tr·ªØ t·ªça ƒë·ªô c·ªôt c·ªßa s·ªë 1 ·ªü **c·ª±c tr√°i** v√† **c·ª±c ph·∫£i** cho **m·ªói h√†ng**.

#       * `l, r = lr[j-1]` trong v√≤ng l·∫∑p c√≥ v·∫ª nh∆∞ l√† m·ªôt l·ªói ch√≠nh t·∫£, c√≥ th·ªÉ √Ω ƒë·ªì l√† `lr[j - 1]`.

#   * **C√°c ma tr·∫≠n DP:**

    #   * `lt`: `lt[i+1][j+1]` l∆∞u tr·ªØ di·ªán t√≠ch nh·ªè nh·∫•t ƒë·ªÉ bao ph·ªß t·∫•t c·∫£ c√°c s·ªë 1 trong v√πng **tr√™n-tr√°i** (t·ª´ `(0,0)` ƒë·∫øn `(i,j)`).
    #   * `lb`: T∆∞∆°ng t·ª±, bao ph·ªß v√πng **d∆∞·ªõi-tr√°i**.
    #   * `rb`: Bao ph·ªß v√πng **d∆∞·ªõi-ph·∫£i**.
    #   * `rt`: Bao ph·ªß v√πng **tr√™n-ph·∫£i**.
    #   * C√°c ma tr·∫≠n n√†y ƒë∆∞·ª£c t·∫°o ra b·∫±ng c√°ch g·ªçi h√†m `minimumArea` v√† xoay ma tr·∫≠n ban ƒë·∫ßu.

#   * **C√°c tr∆∞·ªùng h·ª£p chia:** Thu·∫≠t to√°n n√†y d·ª±a tr√™n m·ªôt quan s√°t quan tr·ªçng: m·ªôt c√°ch chia 2 h√¨nh ch·ªØ nh·∫≠t b·∫•t k·ª≥ c√≥ th·ªÉ ƒë∆∞·ª£c bi·ªÉu di·ªÖn b·∫±ng c√°ch chia ma tr·∫≠n th√†nh 3 ph·∫ßn. C√°c tr∆∞·ªùng h·ª£p ƒë∆∞·ª£c x√©t l√†:

#       * **Chia th√†nh 3 ph·∫ßn ngang (`m >= 3`)**: M·ªôt h√¨nh ch·ªØ nh·∫≠t ·ªü tr√™n, m·ªôt ·ªü gi·ªØa, v√† m·ªôt ·ªü d∆∞·ªõi.
#         ```python
#         ans = min(ans, lt[i][n] + (right - left + 1) * (bottom - top + 1) + lb[j][n])
#         ```
#           * `lt[i][n]` l√† di·ªán t√≠ch bao ph·ªß ph·∫ßn tr√™n c√πng.
#           * `(right - left + 1) * (bottom - top + 1)` l√† di·ªán t√≠ch h√¨nh ch·ªØ nh·∫≠t ·ªü gi·ªØa (ƒë∆∞·ª£c t√≠nh t·ª´ m·∫£ng `lr`).
#           * `lb[j][n]` l√† di·ªán t√≠ch bao ph·ªß ph·∫ßn d∆∞·ªõi c√πng.
#       * **Chia th√†nh 3 ph·∫ßn k·∫øt h·ª£p (`m >= 2, n >= 2`)**:
#           * **Tr∆∞·ªùng h·ª£p 1**: M·ªôt h√¨nh ch·ªØ nh·∫≠t ·ªü tr√™n, v√† hai h√¨nh ch·ªØ nh·∫≠t ·ªü d∆∞·ªõi (d∆∞·ªõi-tr√°i v√† d∆∞·ªõi-ph·∫£i).
#             ```python
#             ans = min(ans, lt[i][n] + lb[i][j] + rb[i][j])
#             ```
#           * **Tr∆∞·ªùng h·ª£p 2**: Hai h√¨nh ch·ªØ nh·∫≠t ·ªü tr√™n (tr√™n-tr√°i v√† tr√™n-ph·∫£i), v√† m·ªôt h√¨nh ch·ªØ nh·∫≠t ·ªü d∆∞·ªõi.
#             ```python
#             ans = min(ans, lt[i][j] + rt[i][j] + lb[i][n])
#             ```

# -----

# ### `minimumArea(a: List[List[int]]) -> List[List[int]]`

# ƒê√¢y l√† h√†m quy ho·∫°ch ƒë·ªông ch√≠nh ƒë·ªÉ t√≠nh **di·ªán t√≠ch bao ph·ªß ti·ªÅn t·ªë**.

#   * `f[i+1][j+1]` bi·ªÉu th·ªã di·ªán t√≠ch nh·ªè nh·∫•t bao ph·ªß t·∫•t c·∫£ c√°c s·ªë 1 trong v√πng t·ª´ `(0,0)` ƒë·∫øn `(i,j)`.
#   * N√≥ duy·ªát qua t·ª´ng √¥ c·ªßa ma tr·∫≠n v√† c·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa `f`.
#   * `border`: M·ªôt m·∫£ng ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin v·ªÅ ƒë∆∞·ªùng bao hi·ªán t·∫°i (h√†ng tr√™n c√πng, c·ªôt tr√°i nh·∫•t, c·ªôt ph·∫£i nh·∫•t).
#       * N·∫øu h√†ng hi·ªán t·∫°i kh√¥ng c√≥ s·ªë 1, di·ªán t√≠ch v·∫´n b·∫±ng di·ªán t√≠ch c·ªßa h√†ng tr√™n.
#       * N·∫øu h√†ng hi·ªán t·∫°i c√≥ s·ªë 1, nh∆∞ng c√°c h√†ng tr√™n ch∆∞a c√≥, di·ªán t√≠ch l√† h√¨nh ch·ªØ nh·∫≠t nh·ªè nh·∫•t bao ph·ªß c√°c s·ªë 1 tr√™n h√†ng hi·ªán t·∫°i.
#       * N·∫øu c·∫£ h√†ng hi·ªán t·∫°i v√† c√°c h√†ng tr√™n ƒë·ªÅu c√≥ s·ªë 1, di·ªán t√≠ch m·ªõi ƒë∆∞·ª£c t√≠nh b·∫±ng c√°ch m·ªü r·ªông h√¨nh ch·ªØ nh·∫≠t hi·ªán c√≥ ƒë·ªÉ bao g·ªìm c·∫£ c√°c s·ªë 1 tr√™n h√†ng hi·ªán t·∫°i.

# -----

# ### `rotate(a: List[List[int]]) -> List[List[int]]`

# H√†m n√†y xoay ma tr·∫≠n ƒë·∫ßu v√†o 90 ƒë·ªô theo chi·ªÅu kim ƒë·ªìng h·ªì. C·ª• th·ªÉ, n√≥ th·ª±c hi·ªán c√°c b∆∞·ªõc sau:

# 1.  `reversed(a)`: ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± c√°c h√†ng.
# 2.  `zip(...)`: Chuy·ªÉn ƒë·ªïi h√†ng th√†nh c·ªôt.
# 3.  `list(...)`: Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh m·ªôt danh s√°ch (list) ƒë·ªÉ t·∫°o ma tr·∫≠n ƒë√£ xoay.




