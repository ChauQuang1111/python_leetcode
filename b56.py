# 11. Container With Most Water (04/10/2025)
# T·ªët l·∫Øm üëç ƒê√¢y l√† phi√™n b·∫£n **Python code c√≥ ch√∫ th√≠ch chi ti·∫øt t·ª´ng d√≤ng** cho b√†i **11. Container With Most Water**, k√®m **gi·∫£i th√≠ch thu·∫≠t to√°n** ·ªü cu·ªëi üëá

# ---

# ### üêç **Code c√≥ ch√∫ th√≠ch chi ti·∫øt**

# ```python
from typing import List
class Solution:
    def maxArea(self, height: List[int]) -> int:
        ans = i = 0                 # ans l√† di·ªán t√≠ch l·ªõn nh·∫•t; i l√† con tr·ªè b√™n tr√°i
        j = len(height) - 1         # j l√† con tr·ªè b√™n ph·∫£i (cu·ªëi m·∫£ng)

        while j > i:                # l·∫∑p khi 2 con tr·ªè ch∆∞a g·∫∑p nhau
            # T√≠nh di·ªán t√≠ch n∆∞·ªõc gi·ªØa 2 c·ªôt i v√† j
            temp = (j - i) * min(height[i], height[j])

            # N·∫øu di·ªán t√≠ch hi·ªán t·∫°i l·ªõn h∆°n max -> c·∫≠p nh·∫≠t
            if temp > ans:
                ans = temp
            else:
                # N·∫øu c·ªôt b√™n tr√°i cao h∆°n c·ªôt b√™n ph·∫£i
                if height[i] > height[j]:
                    temp = j        # L∆∞u l·∫°i v·ªã tr√≠ c·ªôt ph·∫£i hi·ªán t·∫°i
                    # D·ªãch con tr·ªè ph·∫£i sang tr√°i ƒë·ªÉ t√¨m c·ªôt cao h∆°n
                    while j != i:
                        j -= 1
                        # N·∫øu g·∫∑p c·ªôt cao h∆°n c·ªôt c≈© -> d·ª´ng
                        if height[j] > height[temp]:
                            break
                else:
                    temp = i        # L∆∞u l·∫°i v·ªã tr√≠ c·ªôt tr√°i hi·ªán t·∫°i
                    # D·ªãch con tr·ªè tr√°i sang ph·∫£i ƒë·ªÉ t√¨m c·ªôt cao h∆°n
                    while j != i:
                        i += 1
                        # N·∫øu g·∫∑p c·ªôt cao h∆°n c·ªôt c≈© -> d·ª´ng
                        if height[i] > height[temp]:
                            break

        return ans                  # Tr·∫£ v·ªÅ di·ªán t√≠ch l·ªõn nh·∫•t t√¨m ƒë∆∞·ª£c

# ### üß† **Gi·∫£i th√≠ch thu·∫≠t to√°n**

# Thu·∫≠t to√°n n√†y l√† **bi·∫øn th·ªÉ c·ªßa Two Pointer Optimization**, √Ω t∆∞·ªüng nh∆∞ sau:

# 1. **Hai con tr·ªè `i` (tr√°i) v√† `j` (ph·∫£i):**

#    * Ban ƒë·∫ßu, ƒë·ª©ng ·ªü hai ƒë·∫ßu c·ªßa m·∫£ng `height`.
#    * Di·ªán t√≠ch n∆∞·ªõc gi·ªØa hai c·ªôt = `(kho·∫£ng c√°ch) √ó (chi·ªÅu cao th·∫•p h∆°n)`
#      üëâ `area = (j - i) * min(height[i], height[j])`

# 2. **C·∫≠p nh·∫≠t k·∫øt qu·∫£:**

#    * Gi·ªØ l·∫°i di·ªán t√≠ch l·ªõn nh·∫•t `ans`.

# 3. **D·ªãch con tr·ªè th·∫•p h∆°n:**

#    * N·∫øu `height[i] < height[j]`, ta di chuy·ªÉn `i` sang ph·∫£i ƒë·ªÉ t√¨m c·ªôt cao h∆°n ‚Üí **hy v·ªçng tƒÉng chi·ªÅu cao**.
#    * Ng∆∞·ª£c l·∫°i, n·∫øu `height[j] < height[i]`, ta di chuy·ªÉn `j` sang tr√°i.
#    * Trong code n√†y, n√≥ **d·ªãch con tr·ªè nhi·ªÅu b∆∞·ªõc li·ªÅn m·ªôt l√∫c** (b·ªè qua c√°c c·ªôt th·∫•p h∆°n c·ªôt c≈© ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian).

# 4. **D·ª´ng khi hai con tr·ªè g·∫∑p nhau.**

# ---

# ### üß© **V√≠ d·ª• minh h·ªça**

# ```
# height = [1,8,6,2,5,4,8,3,7]
# ```

# * B·∫Øt ƒë·∫ßu: i=0 (1), j=8 (7)
#   ‚Üí min=1, width=8 ‚Üí area=8
# * D·ªãch i v√¨ 1<7
#   ‚Üí i=1 (8), j=8 (7) ‚Üí min=7, width=7 ‚Üí area=49 ‚úÖ
# * Sau ƒë√≥ d·ªãch j sang tr√°i khi g·∫∑p c·ªôt th·∫•p h∆°n...
#   ‚Üí k·∫øt qu·∫£ cu·ªëi c√πng: **49**

# ---

# üëâ **T√≥m g·ªçn:**

# * D√πng 2 con tr·ªè ƒë·ªÉ t√¨m di·ªán t√≠ch t·ªëi ƒëa.
# * Lu√¥n d·ªãch con tr·ªè ·ªü ph√≠a c√≥ c·ªôt th·∫•p h∆°n.
# * Phi√™n b·∫£n code c·ªßa b·∫°n l√† b·∫£n **t·ªëi ∆∞u h∆°n**, v√¨ n√≥ b·ªè qua c√°c c·ªôt kh√¥ng c√≥ kh·∫£ nƒÉng t·∫°o di·ªán t√≠ch l·ªõn h∆°n.

# ---

# B·∫°n c√≥ mu·ªën m√¨nh v·∫Ω **s∆° ƒë·ªì minh h·ªça tr·ª±c quan t·ª´ng b∆∞·ªõc di chuy·ªÉn c·ªßa con tr·ªè (i, j)** kh√¥ng?
# R·∫•t d·ªÖ hi·ªÉu khi nh√¨n b·∫±ng h√¨nh.

# T·∫•t nhi√™n üëç
# ƒê·ªÅ b√†i **‚Äú11. Container With Most Water‚Äù** (LeetCode 11) l√† m·ªôt b√†i **kinh ƒëi·ªÉn v·ªÅ hai con tr·ªè (two pointers)**.
# Gi·∫£i th√≠ch chi ti·∫øt nh∆∞ sau üëá

# ---

# ### üß© **ƒê·ªÅ b√†i (phi√™n b·∫£n d·ªÖ hi·ªÉu)**

# B·∫°n ƒë∆∞·ª£c cho m·ªôt **m·∫£ng s·ªë nguy√™n `height[]`**, trong ƒë√≥ m·ªói ph·∫ßn t·ª≠ bi·ªÉu th·ªã **chi·ªÅu cao c·ªßa m·ªôt c·ªôt**.
# Hai c·ªôt n√†y v√† tr·ª•c ho√†nh (x-axis) t·∫°o th√†nh **m·ªôt c√°i ‚Äúcontainer‚Äù ch·ª©a n∆∞·ªõc**.

# M·ª•c ti√™u l√†:
# üëâ **Ch·ªçn hai c·ªôt sao cho container gi·ªØa ch√∫ng ch·ª©a ƒë∆∞·ª£c nhi·ªÅu n∆∞·ªõc nh·∫•t.**

# ---

# ### üìä **V√≠ d·ª•**

# Gi·∫£ s·ª≠:

# ```python
# height = [1,8,6,2,5,4,8,3,7]
# ```

# N·∫øu ta ch·ªçn:

# * c·ªôt th·ª© 2 (cao 8)
# * v√† c·ªôt th·ª© 9 (cao 7)

# ‚Üí chi·ªÅu r·ªông gi·ªØa hai c·ªôt l√† `9 - 2 = 7`
# ‚Üí chi·ªÅu cao b·ªã gi·ªõi h·∫°n b·ªüi c·ªôt th·∫•p h∆°n: `min(8,7) = 7`

# => **Di·ªán t√≠ch n∆∞·ªõc ch·ª©a ƒë∆∞·ª£c = 7 * 7 = 49**

# ƒê√¢y c≈©ng l√† **k·∫øt qu·∫£ l·ªõn nh·∫•t** trong v√≠ d·ª• n√†y.

# ---

# ### üìê **C√¥ng th·ª©c t√≠nh di·ªán t√≠ch n∆∞·ªõc gi·ªØa hai c·ªôt**

# N·∫øu ch·ªçn hai c·ªôt ·ªü v·ªã tr√≠ `i` v√† `j` (v·ªõi `i < j`):

# [
# \text{Area} = (j - i) \times \min(height[i], height[j])
# ]

# ---

# ### ‚öôÔ∏è **T∆∞ duy thu·∫≠t to√°n (Two pointers)**

# 1. ƒê·∫∑t hai con tr·ªè:

#    * `left = 0` (ƒë·∫ßu m·∫£ng)
#    * `right = n - 1` (cu·ªëi m·∫£ng)

# 2. T√≠nh di·ªán t√≠ch:

#    ```java
#    area = (right - left) * min(height[left], height[right])
#    ```

#    C·∫≠p nh·∫≠t `maxArea` n·∫øu l·ªõn h∆°n.

# 3. **Di chuy·ªÉn con tr·ªè th·∫•p h∆°n**:

#    * N·∫øu `height[left] < height[right]`, tƒÉng `left++`
#    * Ng∆∞·ª£c l·∫°i, gi·∫£m `right--`

# ‚û°Ô∏è V√¨ ch·ªâ c√≥ vi·ªác **di chuy·ªÉn c·ªôt th·∫•p h∆°n m·ªõi c√≥ kh·∫£ nƒÉng tƒÉng di·ªán t√≠ch** (chi·ªÅu cao gi·ªõi h·∫°n s·∫Ω tƒÉng).

# 4. L·∫∑p ƒë·∫øn khi `left >= right`.

# ---

# ### üí° **V√≠ d·ª• minh h·ªça ng·∫Øn**

# | left | right | height[left] | height[right] | width | minHeight | area | max    |
# | ---- | ----- | ------------ | ------------- | ----- | --------- | ---- | ------ |
# | 0    | 8     | 1            | 7             | 8     | 1         | 8    | 8      |
# | 1    | 8     | 8            | 7             | 7     | 7         | 49   | **49** |
# | ...  | ...   | ...          | ...           | ...   | ...       | ...  | ...    |

# K·∫øt qu·∫£ cu·ªëi c√πng: **49**

# ---

# ### üß† **ƒê·ªô ph·ª©c t·∫°p**

# * **Th·ªùi gian:** O(n)
# * **B·ªô nh·ªõ:** O(1)

# ---

# B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n **code Java** cho b√†i n√†y k√®m **ch√∫ th√≠ch t·ª´ng d√≤ng** kh√¥ng?
