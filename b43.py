# 3005. Count Elements With Maximum Frequency(22/09/2025)
from collections import Counter

class Solution:
    def maxFrequencyElements(self, nums: list[int]) -> int:
        # B1: ƒê·∫øm t·∫ßn su·∫•t c·ªßa t·ª´ng ph·∫ßn t·ª≠ trong nums
        freq = Counter(nums)   # vd: [1,2,2,3,1,4] -> {1:2, 2:2, 3:1, 4:1}
        
        # B2: T√¨m t·∫ßn su·∫•t l·ªõn nh·∫•t
        max_freq = max(freq.values())   # vd: max_freq = 2
        
        # B3: C·ªông t·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa t·∫•t c·∫£ ph·∫ßn t·ª≠ c√≥ t·∫ßn su·∫•t = max_freq
        result = sum(count for count in freq.values() if count == max_freq)
        # vd: freq = {1:2, 2:2, 3:1, 4:1} -> result = 2+2 = 4
        
        return result

# Ok üëç m√¨nh s·∫Ω gi·∫£i th√≠ch ƒë·ªÅ **LeetCode 3005 - Count Elements With Maximum Frequency**.

# ---

# ## üìå ƒê·ªÅ b√†i

# Cho m·ªôt m·∫£ng s·ªë nguy√™n `nums`, b·∫°n c·∫ßn:

# 1. T√¨m **t·∫ßn su·∫•t xu·∫•t hi·ªán l·ªõn nh·∫•t** trong m·∫£ng (m·ªôt s·ªë xu·∫•t hi·ªán nhi·ªÅu nh·∫•t).
# 2. Tr·∫£ v·ªÅ **t·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa t·∫•t c·∫£ c√°c s·ªë c√≥ t·∫ßn su·∫•t b·∫±ng t·∫ßn su·∫•t l·ªõn nh·∫•t**.

# ---

# ## üöÄ V√≠ d·ª•

# ### V√≠ d·ª• 1

# ```
# Input: nums = [1,2,2,3,1,4]
# ```

# * T·∫ßn su·∫•t:

#   * 1 ‚Üí xu·∫•t hi·ªán 2 l·∫ßn
#   * 2 ‚Üí xu·∫•t hi·ªán 2 l·∫ßn
#   * 3 ‚Üí xu·∫•t hi·ªán 1 l·∫ßn
#   * 4 ‚Üí xu·∫•t hi·ªán 1 l·∫ßn
# * T·∫ßn su·∫•t l·ªõn nh·∫•t = **2**
# * C√≥ 2 s·ªë ƒë·∫°t t·∫ßn su·∫•t n√†y: `1` v√† `2`.
# * T·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán = 2 (cho 1) + 2 (cho 2) = **4**.

# üëâ Output:

# ```
# 4
# ```

# ---

# ### V√≠ d·ª• 2

# ```
# Input: nums = [1,2,3,4,5]
# ```

# * T·∫ßn su·∫•t:

#   * 1,2,3,4,5 ‚Üí m·ªói s·ªë ch·ªâ xu·∫•t hi·ªán 1 l·∫ßn.
# * T·∫ßn su·∫•t l·ªõn nh·∫•t = 1
# * C√≥ 5 s·ªë ƒë·∫°t t·∫ßn su·∫•t n√†y
# * T·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán = 5 √ó 1 = **5**

# üëâ Output:

# ```
# 5
# ```

# ---

# ## üìä √ù t∆∞·ªüng thu·∫≠t to√°n

# 1. D√πng **hashmap (map ho·∫∑c dictionary)** ƒë·ªÉ ƒë·∫øm t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa t·ª´ng s·ªë.
# 2. T√¨m gi√° tr·ªã t·∫ßn su·∫•t l·ªõn nh·∫•t `max_freq`.
# 3. Duy·ªát l·∫°i hashmap, c·ªông t·∫•t c·∫£ c√°c s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa nh·ªØng ph·∫ßn t·ª≠ c√≥ `freq == max_freq`.

# ---

# ## ‚è±Ô∏è ƒê·ªô ph·ª©c t·∫°p

# * Th·ªùi gian: **O(n)** (duy·ªát m·∫£ng v√† map).
# * B·ªô nh·ªõ: **O(n)** (l∆∞u t·∫ßn su·∫•t).

# ---

# üëâ B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n **code Java + Python c√≥ ch√∫ th√≠ch** cho b√†i n√†y kh√¥ng?
