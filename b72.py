# // 2011. Final Value of Variable After Performing Operations(20/10/2025)
from typing import List

class Solution:
    def finalValueAfterOperations(self, operations: List[str]) -> int:
        X = 0  # Gi√° tr·ªã ban ƒë·∫ßu c·ªßa bi·∫øn X l√† 0

        # Duy·ªát qua t·ª´ng thao t√°c trong danh s√°ch operations
        for op in operations:
            # N·∫øu chu·ªói ch·ª©a "++", tƒÉng X l√™n 1
            if "++" in op:
                X += 1
            else:  # Ng∆∞·ª£c l·∫°i l√† "--", gi·∫£m X ƒëi 1
                X -= 1

        return X  # Tr·∫£ v·ªÅ gi√° tr·ªã cu·ªëi c√πng c·ªßa X










# import java.util.*;

# public class b73 {
#     static Scanner sc = new Scanner(System.in);

#     public static void main(String[] args) {
#         int n = sc.nextInt();
#         sc.nextLine();

#         String[] operations = new String[n];
#         for (int i = 0; i < n; i++) {
#             operations[i] = sc.nextLine().trim();
#         }

#         int result = finalValueAfterOperations(operations);

#         System.out.println(result);

#         sc.close();
#     }

#     public static int finalValueAfterOperations(String[] operations) {
#         int X = 0; // Kh·ªüi t·∫°o gi√° tr·ªã ban ƒë·∫ßu c·ªßa X l√† 0

#         // Duy·ªát qua t·ª´ng chu·ªói trong m·∫£ng operations
#         for (String op : operations) {
#             // N·∫øu chu·ªói ch·ª©a "++" ‚Üí tƒÉng X l√™n 1
#             if (op.contains("++")) {
#                 X++;
#             } else { // Ng∆∞·ª£c l·∫°i l√† "--" ‚Üí gi·∫£m X ƒëi 1
#                 X--;
#             }
#         }

#         // Tr·∫£ v·ªÅ gi√° tr·ªã cu·ªëi c√πng c·ªßa X sau t·∫•t c·∫£ c√°c thao t√°c
#         return X;
#     }
# }

# // T·∫•t nhi√™nüòä‚Äîm√¨nh s·∫Ω gi·∫£i th√≠ch**thu·∫≠t to√°n trong code**n√†y m·ªôt c√°ch th·∫≠t d·ªÖ
# // hi·ªÉuüëá

# // ---

# // ##üß†**M·ª•c ti√™u c·ªßa b√†i**

# // T√≠nh**gi√° tr·ªã cu·ªëi c√πng c·ªßa bi·∫øn`X`**sau khi th·ª±c hi·ªán m·ªôt lo·∫°t thao t√°c
# // tƒÉng(`++`)ho·∫∑c gi·∫£m(`--`)theo danh s√°ch`operations`.Ban ƒë·∫ßu:`X=0`.

# // ---

# // ##üîç**Gi·∫£i th√≠ch t·ª´ng d√≤ng trong code**

# // ```java
# // class Solution {
# // public int finalValueAfterOperations(String[] operations) {
# // int X = 0;
# // ```

# // * Kh·ªüi t·∫°o bi·∫øn `X = 0`
# // ‚Üí ƒê√¢y l√† gi√° tr·ªã ban ƒë·∫ßu m√† ƒë·ªÅ b√†i cho.

# // ---

# // ```java
# // for (String op : operations) {
# // ```

# // * Duy·ªát qua **t·ª´ng chu·ªói** trong m·∫£ng `operations`.
# // M·ªói chu·ªói `op` l√† m·ªôt thao t√°c, v√≠ d·ª• `"++X"`, `"X++"`, `"--X"`, `"X--"`.

# // ---

# // ```java
# // if (op.contains("++")) {
# // X++;
# // } else {
# // X--;
# // }
# // ```

# // * ·ªû ƒë√¢y, n·∫øu chu·ªói `op` **ch·ª©a ‚Äú++‚Äù**, c√≥ nghƒ©a l√† ƒë√¢y l√† **thao t√°c tƒÉng**
# // ‚Üí ta th·ª±c hi·ªán `X++` (tƒÉng gi√° tr·ªã X l√™n 1).

# // * Ng∆∞·ª£c l·∫°i, n·∫øu kh√¥ng ch·ª©a `"++"`, th√¨ ch·∫Øc ch·∫Øn l√† `"--"`
# // ‚Üí ta th·ª±c hi·ªán `X--` (gi·∫£m gi√° tr·ªã X ƒëi 1).

# // ‚úÖ C√°ch n√†y **ƒë∆°n gi·∫£n v√† hi·ªáu qu·∫£**, v√¨ ta ch·ªâ c·∫ßn ki·ªÉm tra `"++"` thay v√¨ so
# // s√°nh to√†n b·ªô chu·ªói.

# // ---

# // ```java
# // return X;
# // ```

# // * Sau khi duy·ªát h·∫øt t·∫•t c·∫£ thao t√°c, tr·∫£ v·ªÅ **gi√° tr·ªã cu·ªëi c√πng c·ªßa X**.

# // ---

# // ## ‚öôÔ∏è **ƒê·ªô ph·ª©c t·∫°p**

# // * **Th·ªùi gian:** O(n), v·ªõi `n` l√† s·ªë ph·∫ßn t·ª≠ trong m·∫£ng `operations`.
# // ‚Üí M·ªói thao t√°c ch·ªâ c·∫ßn ki·ªÉm tra chu·ªói `"++"` ƒë√∫ng 1 l·∫ßn.
# // * **B·ªô nh·ªõ:** O(1) ‚Äî ch·ªâ d√πng 1 bi·∫øn `X`.

# // ---

# // ## üéØ **V√≠ d·ª• minh h·ªça**

# // Input:

# // ```java
# // operations = ["--X", "X++", "X++"];
# // ```

# // B∆∞·ªõc th·ª±c hi·ªán:

# // | Thao t√°c | Tr∆∞·ªõc | Sau |
# // | -------- | ----- | --- |
# // | `--X` | 0 | -1 |
# // | `X++` | -1 | 0 |
# // | `X++` | 0 | 1 |

# // üëâ **K·∫øt qu·∫£ cu·ªëi c√πng:** `X = 1`

# // ---

# // ### ‚úÖ **T√≥m t·∫Øt √Ω t∆∞·ªüng**

# // > Thu·∫≠t to√°n duy·ªát t·ª´ng thao t√°c trong m·∫£ng.
# // > N·∫øu thao t√°c l√† tƒÉng (`++`) ‚Üí c·ªông 1.
# // > N·∫øu thao t√°c l√† gi·∫£m (`--`) ‚Üí tr·ª´ 1.
# // > Cu·ªëi c√πng tr·∫£ v·ªÅ k·∫øt qu·∫£.

# // ---


