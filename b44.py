# // 165. Compare Version Numbers(23/09/2025)
# Ok üëç m√¨nh gi·∫£i th√≠ch chi ti·∫øt thu·∫≠t to√°n trong code Python n√†y cho b·∫°n nh√©:

# ---

### Thu·∫≠t to√°n: **So s√°nh hai phi√™n b·∫£n**

#### √ù t∆∞·ªüng ch√≠nh:

# * Chu·ªói phi√™n b·∫£n c√≥ d·∫°ng `"x1.x2.x3....xn"` ‚Üí m·ªói ƒëo·∫°n ngƒÉn c√°ch b·ªüi `.` g·ªçi l√† **revision**.
# * Ta s·∫Ω so s√°nh t·ª´ng c·∫∑p revision t·ª´ tr√°i sang ph·∫£i:

#   * N·∫øu revision c·ªßa version1 > version2 ‚Üí tr·∫£ v·ªÅ `1`.
#   * N·∫øu revision c·ªßa version1 < version2 ‚Üí tr·∫£ v·ªÅ `-1`.
#   * N·∫øu b·∫±ng nhau ‚Üí ti·∫øp t·ª•c so s√°nh revision ti·∫øp theo.
# * N·∫øu duy·ªát h·∫øt m√† v·∫´n b·∫±ng nhau ‚Üí tr·∫£ v·ªÅ `0`.

# ---

# ### Code c√≥ ch√∫ th√≠ch:

# ```python
class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        i, j = 0, 0   # 2 con tr·ªè ƒë·ªÉ duy·ªát version1 v√† version2
        n, m = len(version1), len(version2)

        # ti·∫øp t·ª•c duy·ªát cho ƒë·∫øn khi c·∫£ 2 version ƒë·ªÅu h·∫øt
        while i < n or j < m:
            num1, num2 = 0, 0

            # l·∫•y s·ªë t·ª´ version1 cho t·ªõi d·∫•u '.'
            while i < n and version1[i] != '.':
                num1 = num1 * 10 + int(version1[i])   # c·ªông d·ªìn t·∫°o s·ªë
                i += 1

            # l·∫•y s·ªë t·ª´ version2 cho t·ªõi d·∫•u '.'
            while j < m and version2[j] != '.':
                num2 = num2 * 10 + int(version2[j])
                j += 1

            # so s√°nh 2 s·ªë ·ªü c√πng m·ªôt "revision"
            if num1 > num2:
                return 1
            if num1 < num2:
                return -1

            # b·ªè qua d·∫•u '.' n·∫øu c√≥
            i += 1
            j += 1

        # n·∫øu t·∫•t c·∫£ ƒë·ªÅu b·∫±ng nhau
        return 0
# ```

# ---

# ### V√≠ d·ª• ch·∫°y:

# So s√°nh `"1.0.1"` v·ªõi `"1"`

# * B1: so s√°nh `1` v√† `1` ‚Üí b·∫±ng nhau.
# * B2: so s√°nh `0` v√† (m·∫∑c ƒë·ªãnh `0` v√¨ version2 ƒë√£ h·∫øt) ‚Üí b·∫±ng nhau.
# * B3: so s√°nh `1` v√† `0` ‚Üí `1 > 0` ‚Üí tr·∫£ v·ªÅ `1`.

# üëâ K·∫øt qu·∫£: `"1.0.1" > "1"`.

# ---

# B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt th√™m **c√°ch gi·∫£i ng·∫Øn h∆°n** (d√πng `split(".")` v√† duy·ªát song song) ƒë·ªÉ d·ªÖ nh·ªõ kh√¥ng?

# import java.util.*;

# public class b45 {

#     // H√†m main ƒë·ªÉ test b·∫±ng Scanner
#     public static void main(String[] args) {

#         Scanner sc = new Scanner(System.in);
#         String v1 = sc.nextLine(); // nh·∫≠p version1
#         String v2 = sc.nextLine(); // nh·∫≠p version2

#         int result = compareVersion(v1, v2);

#         // In ra ƒë√∫ng format LeetCode (-1, 0, 1)
#         System.out.println(result);

#         sc.close();
#     }

#     public static int compareVersion(String version1, String version2) {
#         int i = 0, j = 0;
#         int n = version1.length(), m = version2.length();

#         // Duy·ªát song song c·∫£ 2 chu·ªói version
#         while (i < n || j < m) {
#             long num1 = 0, num2 = 0; // long ƒë·ªÉ tr√°nh tr√†n s·ªë n·∫øu version r·∫•t l·ªõn

#             // ƒê·ªçc 1 segment t·ª´ version1 cho ƒë·∫øn khi g·∫∑p '.' ho·∫∑c h·∫øt chu·ªói
#             while (i < n && version1.charAt(i) != '.') {
#                 num1 = num1 * 10 + (version1.charAt(i) - '0');
#                 i++;
#             }

#             // ƒê·ªçc 1 segment t·ª´ version2 cho ƒë·∫øn khi g·∫∑p '.' ho·∫∑c h·∫øt chu·ªói
#             while (j < m && version2.charAt(j) != '.') {
#                 num2 = num2 * 10 + (version2.charAt(j) - '0');
#                 j++;
#             }

#             // So s√°nh 2 segment
#             if (num1 > num2)
#                 return 1;
#             if (num1 < num2)
#                 return -1;

#             // B·ªè qua d·∫•u '.'
#             if (i < n && version1.charAt(i) == '.')
#                 i++;
#             if (j < m && version2.charAt(j) == '.')
#                 j++;
#         }

#         // N·∫øu ƒëi h·∫øt m√† kh√¥ng kh√°c bi·ªát -> b·∫±ng nhau
#         return 0;
#     }
# }

# // R·ªìi üëç m√¨nh s·∫Ω gi·∫£i th√≠ch chi ti·∫øt thu·∫≠t to√°n trong code b·∫°n ƒë∆∞a ra:

# // ---

# // ### üìå √ù t∆∞·ªüng ch√≠nh

# // Thay v√¨ t√°ch `version1` v√† `version2` th√†nh m·∫£ng (nh∆∞ c√°ch d√πng `split`), ta
# // **duy·ªát tr·ª±c ti·∫øp t·ª´ng k√Ω t·ª±** trong chu·ªói v√† **x√¢y d·ª±ng s·ªë** c·ªßa m·ªói ph·∫ßn
# // (segment) gi·ªØa c√°c d·∫•u `.`.

# // V√≠ d·ª•:

# // * `version1 = "1.01"`,
# // * `version2 = "1.001"`.

# // Thu·∫≠t to√°n s·∫Ω l·∫ßn l∆∞·ª£t l·∫•y:

# // * `num1 = 1`, `num2 = 1` ‚Üí b·∫±ng nhau ‚Üí b·ªè qua.
# // * `num1 = 1`, `num2 = 1` (ph·∫ßn sau) ‚Üí b·∫±ng nhau ‚Üí b·ªè qua.
# // * H·∫øt chu·ªói ‚Üí tr·∫£ v·ªÅ `0`.

# // ---

# // ### üìå Gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc

# // 1. **Kh·ªüi t·∫°o con tr·ªè**

# // ```java
# // int i = 0, j = 0;
# // int n = version1.length(), m = version2.length();
# // ```

# // * `i` duy·ªát chu·ªói `version1`, `j` duy·ªát chu·ªói `version2`.
# // * `n, m` l√† ƒë·ªô d√†i hai chu·ªói.

# // ---

# // 2. **Duy·ªát song song**

# // ```java
# // while (i < n || j < m) {
# // long num1 = 0, num2 = 0;
# // ```

# // * D√πng v√≤ng `while` v√¨ ƒë·ªô d√†i hai chu·ªói c√≥ th·ªÉ kh√°c nhau.
# // * M·ªói l·∫ßn l·∫∑p l·∫•y ra **m·ªôt ph·∫ßn s·ªë** (t√°ch b·∫±ng d·∫•u ch·∫•m).

# // ---

# // 3. **ƒê·ªçc s·ªë t·ª´ version1**

# // ```java
# // while (i < n && version1.charAt(i) != '.') {
# // num1 = num1 * 10 + (version1.charAt(i) - '0');
# // i++;
# // }
# // ```

# // * Duy·ªát li√™n t·ª•c cho ƒë·∫øn khi g·∫∑p d·∫•u `.` ho·∫∑c h·∫øt chu·ªói.
# // * `num1 = num1 * 10 + (digit)` ƒë·ªÉ gh√©p s·ªë t·ª´ c√°c k√Ω t·ª±.
# // * V√≠ d·ª• `"123"` ‚Üí `num1 = 123`.

# // T∆∞∆°ng t·ª± v·ªõi `version2`:

# // ```java
# // while (j < m && version2.charAt(j) != '.') {
# // num2 = num2 * 10 + (version2.charAt(j) - '0');
# // j++;
# // }
# // ```

# // ---

# // 4. **So s√°nh hai s·ªë v·ª´a ƒë·ªçc**

# // ```java
# // if (num1 > num2) return 1;
# // if (num1 < num2) return -1;
# // ```

# // * N·∫øu kh√°c nhau ‚Üí tr·∫£ k·∫øt qu·∫£ ngay.
# // * N·∫øu b·∫±ng nhau ‚Üí ti·∫øp t·ª•c v√≤ng l·∫∑p.

# // ---

# // 5. **B·ªè qua d·∫•u ch·∫•m**

# // ```java
# // if (i < n && version1.charAt(i) == '.') i++;
# // if (j < m && version2.charAt(j) == '.') j++;
# // ```

# // * Sau khi x·ª≠ l√Ω xong m·ªôt segment, nh·∫£y qua d·∫•u `.` ƒë·ªÉ b·∫Øt ƒë·∫ßu ph·∫ßn ti·∫øp theo.

# // ---

# // 6. **K·∫øt qu·∫£ cu·ªëi c√πng**

# // ```java
# // return 0;
# // ```

# // * N·∫øu duy·ªát h·∫øt c·∫£ hai chu·ªói m√† kh√¥ng t√¨m th·∫•y kh√°c bi·ªát ‚Üí hai version b·∫±ng
# // nhau.

# // ---

# // ### üìå ∆Øu ƒëi·ªÉm c·ªßa c√°ch n√†y

# // * Kh√¥ng c·∫ßn d√πng `split`, ti·∫øt ki·ªám b·ªô nh·ªõ.
# // * X·ª≠ l√Ω tr·ª±c ti·∫øp t·ª´ng k√Ω t·ª± ‚Üí nhanh h∆°n.
# // * D√πng `long` ƒë·ªÉ tr√°nh tr√†n s·ªë n·∫øu version qu√° l·ªõn.

# // ---

# // üëâ T√≥m l·∫°i: Thu·∫≠t to√°n s·∫Ω duy·ªát t·ª´ng segment c·ªßa 2 phi√™n b·∫£n, so s√°nh s·ªë
# // nguy√™n c·ªßa t·ª´ng segment. N·∫øu c√≥ s·ª± kh√°c bi·ªát ‚Üí tr·∫£ k·∫øt qu·∫£ ngay. N·∫øu kh√¥ng ‚Üí
# // ti·∫øp t·ª•c ƒë·∫øn h·∫øt chu·ªói. N·∫øu kh√¥ng ph√°t hi·ªán kh√°c bi·ªát n√†o ‚Üí hai phi√™n b·∫£n
# // b·∫±ng nhau.

# // ---

# // B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt th√™m **h√†m main d√πng Scanner** ƒë·ªÉ nh·∫≠p v√†o 2 version v√†
# // so s√°nh k·∫øt qu·∫£ kh√¥ng?

# // m√¨nh gi·∫£i
# // th√≠ch ƒë·ªÅ**LeetCode 165.
# // Compare Version Numbers**nh√©üöÄ

# // ---

# // ###üìå
# // ƒê·ªÅ b√†i

# // B·∫°n ƒë∆∞·ª£c cho**
# // hai chu·ªói
# // phi√™n b·∫£n**`version1`v√†`version2`.

# // *
# // M·ªói chu·ªói
# // phi√™n b·∫£n
# // ƒë∆∞·ª£c chia
# // th√†nh nhi·ªÅu

# // ph·∫ßn (revision), c√°ch nhau b·ªüi d·∫•u `"."`.
# // * M·ªói ph·∫ßn l√† m·ªôt s·ªë nguy√™n **kh√¥ng √¢m** (c√≥ th·ªÉ c√≥ s·ªë 0 ·ªü ƒë·∫ßu).

# // üëâ Nhi·ªám v·ª•:
# // So s√°nh `version1` v√† `version2`.

# // * N·∫øu `version1 > version2` ‚Üí tr·∫£ v·ªÅ `1`.
# // * N·∫øu `version1 < version2` ‚Üí tr·∫£ v·ªÅ `-1`.
# // * N·∫øu b·∫±ng nhau ‚Üí tr·∫£ v·ªÅ `0`.

# // ---

# // ### üìå V√≠ d·ª•

# // 1.

# // ```
# // version1 = "1.01", version2 = "1.001"
# // ‚Üí Output: 0
# // ```

# // V√¨ `01 == 1` v√† `001 == 1`.

# // ---

# // 2.

# // ```
# // version1 = "1.0", version2 = "1.0.0"
# // ‚Üí Output: 0
# // ```

# // V√¨ `"1.0"` th·ª±c ra l√† `[1, 0]` c√≤n `"1.0.0"` l√† `[1, 0, 0]` ‚Üí hai m·∫£ng b·∫±ng
# // nhau.

# // ---

# // 3.

# // ```
# // version1 = "0.1", version2 = "1.1"
# // ‚Üí Output: -1
# // ```

# // V√¨ so s√°nh t·ª´ tr√°i sang ph·∫£i:

# // * `0 < 1` ‚Üí version1 nh·ªè h∆°n.

# // ---

# // 4.

# // ```
# // version1 = "1.2", version2 = "1.10"
# // ‚Üí Output: -1
# // ```

# // V√¨ `2 < 10`.

# // ---

# // ### üìå √ù t∆∞·ªüng gi·∫£i

# // 1. T√°ch 2 chu·ªói `version1` v√† `version2` th√†nh c√°c ph·∫ßn b·∫±ng `"."`.
# // ‚Üí ta ƒë∆∞·ª£c 2 m·∫£ng s·ªë nguy√™n.

# // 2. So s√°nh t·ª´ng c·∫∑p ph·∫ßn t·ª≠ t·ª´ tr√°i sang ph·∫£i:

# // * N·∫øu m·ªôt b√™n l·ªõn h∆°n ‚Üí return ngay `1` ho·∫∑c `-1`.
# // * N·∫øu b·∫±ng ‚Üí ti·∫øp t·ª•c.

# // 3. N·∫øu m·ªôt chu·ªói ng·∫Øn h∆°n, coi c√°c ph·∫ßn thi·∫øu l√† `0`.

# // 4. N·∫øu h·∫øt v√≤ng l·∫∑p m√† kh√¥ng t√¨m ƒë∆∞·ª£c s·ª± kh√°c bi·ªát ‚Üí return `0`.

# // ---

# // üëâ B·∫£n ch·∫•t l√† **so s√°nh 2 m·∫£ng s·ªë nguy√™n theo th·ª© t·ª± t·ª´ tr√°i sang ph·∫£i**,
# // trong ƒë√≥ c√°c ph·∫ßn thi·∫øu coi nh∆∞ `0`.

# // ---

# // B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n code **Python** v√† **Java** cho b√†i n√†y kh√¥ng?
