# 3539. Find Sum of Array Product of Magical Sequences(12/10/2025)


# D∆∞·ªõi ƒë√¢y l√† **gi·∫£i th√≠ch ƒë·ªÅ b√†i 3539 ‚Äî Find Sum of Array Product of Magical Sequences** (tr√≠ch t·ª´ LeetCode) c√πng c√°c kh√°i ni·ªám v√† c√°ch hi·ªÉu. N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ ti·∫øp t·ª•c h∆∞·ªõng d·∫´n c√°ch gi·∫£i (thu·∫≠t to√°n) sau khi b·∫°n n·∫Øm ƒë·ªÅ nh√©.
# R·∫•t hay ‚Äî ƒëo·∫°n code b·∫°n ƒë∆∞a l√† **l·ªùi gi·∫£i n√¢ng cao** (r·∫•t kh√°c so v·ªõi c√°ch brute-force th√¥ng th∆∞·ªùng).
# N√≥ d√πng **l·∫≠p tr√¨nh ƒë·ªông (DFS c√≥ memoization)**, **t·ªï h·ª£p**, **ph√©p to√°n tr√™n bit**, v√† **modular arithmetic**.
# ƒê√¢y l√† m·ªôt b√†i to√°n ‚Äúbi·∫øn th·ªÉ m·ªü r·ªông‚Äù c·ªßa *Find Sum of Array Product of Magical Sequences* ‚Äî ch·ª© kh√¥ng ph·∫£i ch·ªâ duy·ªát t·ª´ng d√£y con ƒë∆°n gi·∫£n.
# M√¨nh s·∫Ω **gi·∫£i th√≠ch chi ti·∫øt t·ª´ng ph·∫ßn + th√™m ch√∫ th√≠ch ƒë·∫ßy ƒë·ªß v√†o code** cho b·∫°n üëá

# ---

# ### üß† √ù t∆∞·ªüng t·ªïng qu√°t

# B√†i to√°n n√†y kh√¥ng c√≤n l√† duy·ªát d√£y con n·ªØa, m√† tr·ªü th√†nh **b√†i to√°n ƒë·∫øm/t√≠nh t·ªïng d·ª±a tr√™n c·∫•u tr√∫c bit v√† t·ªï h·ª£p**.

# * `m`: t·ªïng s·ªë ph·∫ßn t·ª≠ c·∫ßn ch·ªçn
# * `k`: s·ªë ph·∫ßn t·ª≠ ‚Äúth·ªèa ƒëi·ªÅu ki·ªán ƒë·∫∑c bi·ªát‚Äù (v√≠ d·ª• bit b·∫±ng 1)
# * `nums`: danh s√°ch c√°c gi√° tr·ªã
# * Thu·∫≠t to√°n s·ª≠ d·ª•ng **DFS c√≥ cache** ƒë·ªÉ duy·ªát m·ªçi c√°ch ph√¢n ph·ªëi `m` ph·∫ßn t·ª≠ v√†o `n` v·ªã tr√≠.

# V√¨ s·ªë l∆∞·ª£ng t·ªï h·ª£p r·∫•t l·ªõn, n√™n code:

# * D√πng `fac` (factorial) v√† `inv_f` (modular inverse factorial)
# * D√πng `pow_v[i][j]` ƒë·ªÉ l∆∞u `nums[i]**j % MOD`
#   ‚Üí gi√∫p gi·∫£m th·ªùi gian t√≠nh to√°n l·∫∑p l·∫°i.

# ---

# ### üß© Gi·∫£i th√≠ch t·ª´ng ƒëo·∫°n code

# ```python
# MOD = 1_000_000_007  # S·ªë nguy√™n l·ªõn ƒë·ªÉ tr√°nh tr√†n s·ªë khi t√≠nh modulo
# MX = 31              # Gi·ªõi h·∫°n factorial (t·ªëi ƒëa m = 30)
# ```

# #### 1Ô∏è‚É£ T√≠nh giai th·ª´a v√† ngh·ªãch ƒë·∫£o modular

# ```python
# fac = [0] * MX
# fac[0] = 1
# for i in range(1, MX):
#     fac[i] = fac[i - 1] * i % MOD  # fac[i] = i! mod MOD

# inv_f = [0] * MX
# inv_f[-1] = pow(fac[-1], -1, MOD)  # Ngh·ªãch ƒë·∫£o modular c·ªßa fac[MX-1]
# for i in range(MX - 1, 0, -1):
#     inv_f[i - 1] = inv_f[i] * i % MOD  # inv_f[i] = 1 / fac[i]
# ```

# ‚Üí ƒê√¢y l√† k·ªπ thu·∫≠t t·ªï h·ª£p chu·∫©n:
# ( inv_f[i] = (fac[i])^{-1} \mod MOD )

# ---

# #### 2Ô∏è‚É£ Ti·ªÅn t√≠nh m≈© c·ªßa t·ª´ng ph·∫ßn t·ª≠

# ```python
# pow_v = [[1] * (m + 1) for _ in range(n)]
# for i in range(n):
#     for j in range(1, m + 1):
#         pow_v[i][j] = pow_v[i][j - 1] * nums[i] % MOD
# ```

# ‚Üí `pow_v[i][j]` = `nums[i] ** j % MOD`
# Gi√∫p t√≠nh nhanh khi c·∫ßn nh√¢n nhi·ªÅu l·∫ßn c√πng m·ªôt s·ªë.

# ---

# #### 3Ô∏è‚É£ DFS c√≥ memoization

# ```python
# @cache
# def dfs(i: int, left_m: int, x: int, left_k: int) -> int:
#     c1 = x.bit_count()  # ƒë·∫øm s·ªë bit 1 trong x
    
#     # N·∫øu s·ªë bit 1 hi·ªán t·∫°i + s·ªë ph·∫ßn t·ª≠ c√≤n l·∫°i < s·ªë k c·∫ßn ƒë·∫°t ‚Üí kh√¥ng th·ªÉ th·ªèa
#     if c1 + left_m < left_k:
#         return 0

#     # N·∫øu ƒë√£ x√©t h·∫øt n ph·∫ßn t·ª≠
#     if i == n:
#         # Ch·ªâ h·ª£p l·ªá n·∫øu ƒë√£ ch·ªçn ƒë·ªß m ph·∫ßn t·ª≠ v√† s·ªë bit 1 == k
#         return 1 if left_m == 0 and c1 == left_k else 0
# ```

# ---

# #### 4Ô∏è‚É£ Duy·ªát t·∫•t c·∫£ c√°ch ch·ªçn j ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ i

# ```python
#     res = 0
#     for j in range(left_m + 1):
#         bit = (x + j) & 1  # bit m·ªõi sinh ra khi c·ªông x+j
#         if bit <= left_k:
#             r = dfs(i + 1, left_m - j, (x + j) >> 1, left_k - bit)
#             res += r * pow_v[i][j] * inv_f[j]
#     return res % MOD
# ```

# üîç Gi·∫£i th√≠ch:

# * `j`: s·ªë ph·∫ßn t·ª≠ ch·ªçn t·∫°i v·ªã tr√≠ `i`
# * `(x + j) & 1`: ki·ªÉm tra bit m·ªõi sinh ra
# * `(x + j) >> 1`: d·ªãch bit ƒë·ªÉ t√≠nh ti·∫øp ·ªü c·∫•p ti·∫øp theo
# * `r * pow_v[i][j] * inv_f[j]`:

#   * `r`: s·ªë c√°ch t·ª´ ph·∫ßn c√≤n l·∫°i
#   * `pow_v[i][j]`: nh√¢n gi√° tr·ªã `nums[i]**j`
#   * `inv_f[j]`: chia cho ho√°n v·ªã tr√πng l·∫∑p (t·ªï h·ª£p)

# ---

# #### 5Ô∏è‚É£ K·∫øt qu·∫£ cu·ªëi c√πng

# ```python
# return dfs(0, m, 0, k) * fac[m] % MOD
# ```

# ‚Üí Nh√¢n `fac[m]` ƒë·ªÉ ho√†n t·∫•t nh√¢n ho√°n v·ªã (ƒë·∫£o l·∫°i chia tr∆∞·ªõc ƒë√≥).
# K·∫øt qu·∫£ cu·ªëi c√πng ƒë∆∞·ª£c t√≠nh modulo `1e9+7`.

# ---

# ### üí° T√≥m t·∫Øt √Ω t∆∞·ªüng

# | Th√†nh ph·∫ßn                  | √ù nghƒ©a                                                |
# | --------------------------- | ------------------------------------------------------ |
# | `fac`, `inv_f`              | D√πng ƒë·ªÉ t√≠nh to√°n t·ªï h·ª£p nhanh                         |
# | `pow_v`                     | L∆∞u gi√° tr·ªã `nums[i]^j` ƒë·ªÉ tr√°nh t√≠nh l·∫°i              |
# | `dfs(i, left_m, x, left_k)` | H√†m ƒë·ªá quy t√≠nh s·ªë c√°ch ch·ªçn ph·∫ßn t·ª≠ ƒë·ªÉ th·ªèa ƒëi·ªÅu ki·ªán |
# | `x`                         | Tr·∫°ng th√°i bit ƒë·ªÉ ki·ªÉm tra ƒëi·ªÅu ki·ªán ‚Äúmagical‚Äù         |
# | `bit_count`                 | S·ªë l∆∞·ª£ng bit 1 ƒë√£ sinh ra                              |
# | `MOD`                       | D√πng ƒë·ªÉ tr√°nh tr√†n s·ªë nguy√™n                           |

# ---

# ### üìò Code c√≥ ch√∫ th√≠ch ƒë·∫ßy ƒë·ªß

# ```python
# MOD = 1_000_000_007
# MX = 31

# # Ti·ªÅn t√≠nh giai th·ª´a v√† ngh·ªãch ƒë·∫£o modular
# fac = [0] * MX
# fac[0] = 1
# for i in range(1, MX):
#     fac[i] = fac[i - 1] * i % MOD

# inv_f = [0] * MX
# inv_f[-1] = pow(fac[-1], -1, MOD)
# for i in range(MX - 1, 0, -1):
#     inv_f[i - 1] = inv_f[i] * i % MOD


MOD = 1_000_000_007
MX = 31

# Ti·ªÅn t√≠nh giai th·ª´a v√† ngh·ªãch ƒë·∫£o modular
fac = [0] * MX
fac[0] = 1
for i in range(1, MX):
    fac[i] = fac[i - 1] * i % MOD

inv_f = [0] * MX
inv_f[-1] = pow(fac[-1], -1, MOD)
for i in range(MX - 1, 0, -1):
    inv_f[i - 1] = inv_f[i] * i % MOD


from functools import cache

class Solution:
    def magicalSum(self, m: int, k: int, nums: list[int]) -> int:
        n = len(nums)

        # pow_v[i][j] = nums[i]^j mod MOD
        pow_v = [[1] * (m + 1) for _ in range(n)]
        for i in range(n):
            for j in range(1, m + 1):
                pow_v[i][j] = pow_v[i][j - 1] * nums[i] % MOD

        @cache
        def dfs(i: int, left_m: int, x: int, left_k: int) -> int:
            c1 = x.bit_count()
            if c1 + left_m < left_k:
                return 0
            if i == n:
                return 1 if left_m == 0 and c1 == left_k else 0

            res = 0
            for j in range(left_m + 1):
                bit = (x + j) & 1
                if bit <= left_k:
                    r = dfs(i + 1, left_m - j, (x + j) >> 1, left_k - bit)
                    res += r * pow_v[i][j] * inv_f[j]
            return res % MOD

        # K·∫øt qu·∫£ cu·ªëi c√πng
        return dfs(0, m, 0, k) * fac[m] % MOD

# ```

# ---

# N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ **v·∫Ω s∆° ƒë·ªì ƒë·ªá quy (DFS tree)** ƒë·ªÉ b·∫°n th·∫•y r√µ c√°ch c√°c tr·∫°ng th√°i `(i, left_m, x, left_k)` ƒë∆∞·ª£c m·ªü r·ªông nh∆∞ th·∫ø n√†o ‚Äî b·∫°n c√≥ mu·ªën kh√¥ng?

# ---

# ## üìÑ ƒê·ªÅ b√†i (t√≥m l∆∞·ª£c)

# B·∫°n ƒë∆∞·ª£c cho:

# * M·ªôt s·ªë nguy√™n **m** ‚Äî ƒë·ªô d√†i c·ªßa m·ªói **sequence** (chu·ªói) b·∫°n s·∫Ω t·∫°o.
# * M·ªôt s·ªë nguy√™n **k**.
# * M·ªôt m·∫£ng `nums` (c√≥ ƒë·ªô d√†i ‚â• m).

# B·∫°n ƒë·ªãnh nghƒ©a:

# * M·ªôt **magical sequence** (chu·ªói ma thu·∫≠t) l√† m·ªôt sequence `seq` c·ªßa ƒë·ªô d√†i **m**, trong ƒë√≥ m·ªói ph·∫ßn t·ª≠ `seq[i]` l√† m·ªôt ch·ªâ s·ªë trong `nums` (t·ª©c ch·ªçn c√°c v·ªã tr√≠).

# * V·ªõi m·ªói sequence `seq`, b·∫°n t√≠nh **array product**:
#   [
#   \text{prod(seq)} = nums[,seq[0],] \times nums[,seq[1],] \times \cdots \times nums[,seq[m-1],]
#   ]

# * Ngo√†i ra, sequence ƒë∆∞·ª£c g·ªçi l√† **magical** n·∫øu n√≥ th·ªèa ƒëi·ªÅu ki·ªán n√†o ƒë√≥ li√™n quan ƒë·∫øn **k** (theo m√¥ t·∫£ ƒë·ªÅ).
#   (Trong m√¥ t·∫£ m·ªü r·ªông, c√≥ n√≥i v·ªÅ ‚Äúset bit‚Äù c·ªßa t·ªïng 2^seq[i] v√† ƒë·∫øm s·ªë bit set, nh∆∞ng t√≥m l·∫°i l√† c√≥ m·ªôt ƒëi·ªÅu ki·ªán ƒë·ªÉ sequence ƒë∆∞·ª£c xem l√† magical.)

# Y√™u c·∫ßu:

# > T√≠nh t·ªïng (sum) c·ªßa t·∫•t c·∫£ c√°c **array product** c·ªßa m·ªçi sequence `seq` h·ª£p l·ªá (magical).
# > V√¨ k·∫øt qu·∫£ c√≥ th·ªÉ r·∫•t l·ªõn, tr·∫£ k·∫øt qu·∫£ mod (10^9 + 7). ([Hello, World! System Design Newsletter][1])

# V√≠ d·ª•:

# * N·∫øu `m = 5, k = 5, nums = [1, 10, 100, 10000, 1000000]`, output l√† `991600007`. ([Hello, World! System Design Newsletter][1])
# * N·∫øu `m = 2, k = 2, nums = [5,4,3,2,1]`, output l√† `170`. ([Hello, World! System Design Newsletter][1])

# ---

# ## üß© Ph√¢n t√≠ch v√† c√°ch hi·ªÉu chi ti·∫øt

# ƒê·ªÉ hi·ªÉu ƒë·ªÅ, ta c·∫ßn l√†m r√µ c√°c ph·∫ßn:

# 1. **Sequence & array product**

#    * `seq` l√† m·ªôt d√£y ƒë·ªô d√†i **m** ch·ª©a c√°c ch·ªâ s·ªë t·ª´ `0` ƒë·∫øn `nums.length - 1`.
#    * `prod(seq)` = t√≠ch c√°c `nums[seq[i]]`.

# 2. **ƒêi·ªÅu ki·ªán magical**

#    * C√≥ li√™n quan ƒë·∫øn vi·ªác t√≠nh (2^{seq[0]} + 2^{seq[1]} + \cdots + 2^{seq[m-1]}).
#    * ƒê·∫øm s·ªë bit set (s·ªë bit 1) trong t·ªïng ƒë√≥.
#    * N·∫øu s·ªë bit set = k th√¨ sequence ƒë√≥ l√† magical. ([Hello, World! System Design Newsletter][1])

# 3. **T·ªïng c√°c s·∫£n ph·∫©m**

#    * V·ªõi m·ªói sequence h·ª£p l·ªá, t√≠nh `prod(seq)`, sau ƒë√≥ c·ªông v√†o t·ªïng (mod (10^9 + 7)).
#    * C·∫ßn x√©t **m·ªçi sequence** nh∆∞ng ch·ªâ l·∫•y nh·ªØng c√°i ‚Äúmagical‚Äù.

# 4. **T√≠nh to√°n l·ªõn**

#    * V√¨ s·ªë sequence c√≥ th·ªÉ r·∫•t nhi·ªÅu (combinatorial), b·∫°n kh√¥ng th·ªÉ li·ªát k√™ t·∫•t c·∫£. Ph·∫£i t√¨m c√¥ng th·ª©c, t·ªëi ∆∞u b·∫±ng DP / to√°n t·ªï h·ª£p / bitmasking / k·ªπ thu·∫≠t nh√∫ng mod.
#    * ƒê·ªÅ nh·∫•n l√† ‚Äúreturn modulo (10^9 + 7)‚Äù. ([LeetCode][2])

# ---

