# 3003. Maximize the Number of Partitions After Operations(17/10/2025)
# D∆∞·ªõi ƒë√¢y l√† **gi·∫£i th√≠ch chi ti·∫øt** v√† **code c√≥ ch√∫ th√≠ch t·ª´ng d√≤ng** cho b√†i **LeetCode 3003 ‚Äî Maximize the Number of Partitions After Operations** üëá

# ---

# ### üéØ **Y√™u c·∫ßu ƒë·ªÅ b√†i t√≥m t·∫Øt**

# Cho m·ªôt chu·ªói k√Ω t·ª± `s` (g·ªìm ch·ªØ th∆∞·ªùng `a-z`) v√† m·ªôt s·ªë nguy√™n `k`.
# Ta mu·ªën chia chu·ªói th√†nh **nhi·ªÅu ƒëo·∫°n nh·∫•t c√≥ th·ªÉ**, sao cho **m·ªói ƒëo·∫°n c√≥ ‚â§ k k√Ω t·ª± kh√°c nhau**.

# üëâ Tuy nhi√™n, ta **ƒë∆∞·ª£c ph√©p thay ƒë·ªïi ƒë√∫ng 1 k√Ω t·ª± b·∫•t k·ª≥ trong chu·ªói `s`** th√†nh b·∫•t k·ª≥ ch·ªØ c√°i n√†o kh√°c.
# ‚Üí H·ªèi: sau khi thay ƒë·ªïi k√Ω t·ª± ƒë√≥ t·ªëi ∆∞u nh·∫•t, c√≥ th·ªÉ chia ƒë∆∞·ª£c **nhi·ªÅu ƒëo·∫°n nh·∫•t l√† bao nhi√™u**?

# ---

# ### üß© **√ù t∆∞·ªüng ch√≠nh c·ªßa thu·∫≠t to√°n**

# 1. M·ªói k√Ω t·ª± ƒë∆∞·ª£c bi·ªÉu di·ªÖn b·∫±ng m·ªôt **bitmask** ‚Äî bit th·ª© `i` th·ªÉ hi·ªán k√Ω t·ª± `'a' + i` c√≥ xu·∫•t hi·ªán hay kh√¥ng.
#    ‚Üí Gi√∫p ki·ªÉm tra s·ªë k√Ω t·ª± kh√°c nhau b·∫±ng `.bit_count()`.

# 2. Duy·ªát qua chu·ªói, chia th√†nh c√°c nh√≥m (partition) sao cho m·ªói nh√≥m c√≥ ‚â§ `k` k√Ω t·ª± kh√°c nhau.

#    * L√†m vi·ªác n√†y **t·ª´ tr√°i sang ph·∫£i (prefix)**.
#    * V√† l√†m l·∫°i **t·ª´ ph·∫£i sang tr√°i (suffix)**.

# 3. Sau ƒë√≥, th·ª≠ ‚Äúthay ƒë·ªïi 1 k√Ω t·ª±‚Äù ·ªü **m·ªói v·ªã tr√≠ `i`**, r·ªìi gh√©p **prefix tr√°i + suffix ph·∫£i** quanh v·ªã tr√≠ ƒë√≥, xem:

#    * N·∫øu thay ƒë·ªïi gi√∫p g·ªôp ho·∫∑c t√°ch nh√≥m ‚Üí s·ªë l∆∞·ª£ng nh√≥m c√≥ th·ªÉ tƒÉng.

# ---

# ### üß† **Chi ti·∫øt code c√≥ ch√∫ th√≠ch**
from typing import List
class Solution:
    def maxPartitionsAfterOperations(self, s: str, k: int) -> int:
        n = len(s)

        # ‚úÖ M·ªói k√Ω t·ª± ƒë∆∞·ª£c chuy·ªÉn th√†nh bitmask (bit 0 -> 'a', bit 25 -> 'z')
        # V√≠ d·ª•: 'a' -> 1 (000001), 'b' -> 2 (000010), ...
        set_bits = [1 << (ord(letter) - ord("a")) for letter in s]

        # -----------------------------
        # H√†m t·∫°o prefix ho·∫∑c suffix partition
        # -----------------------------
        def make_prefix(set_bits: List[int]):
            prefix = [0]          # s·ªë l∆∞·ª£ng nh√≥m tr∆∞·ªõc v·ªã tr√≠ i
            prefix_mask = [0]     # mask ch·ª©a c√°c k√Ω t·ª± c·ªßa nh√≥m hi·ªán t·∫°i
            mask = 0
            groups = 0
            for current_index_set_bits in set_bits:
                # th√™m k√Ω t·ª± hi·ªán t·∫°i v√†o nh√≥m
                mask |= current_index_set_bits
                # n·∫øu v∆∞·ª£t qu√° k k√Ω t·ª± kh√°c nhau, ph·∫£i t√°ch nh√≥m
                if mask.bit_count() > k:
                    groups += 1
                    mask = current_index_set_bits  # nh√≥m m·ªõi b·∫Øt ƒë·∫ßu
                prefix.append(groups)
                prefix_mask.append(mask)
            return prefix, prefix_mask

        # ‚úÖ prefix t·ª´ tr√°i sang ph·∫£i
        prefix, prefix_mask = make_prefix(set_bits)
        # ‚úÖ suffix t·ª´ ph·∫£i sang tr√°i (ƒë·∫£o ng∆∞·ª£c m·∫£ng)
        suffix, suffix_mask = make_prefix(set_bits[::-1])

        max_partitions_after_operations = 0

        # -----------------------------
        # Th·ª≠ thay ƒë·ªïi k√Ω t·ª± t·∫°i m·ªói v·ªã tr√≠ index
        # -----------------------------
        for index in range(n):
            # T·ªïng s·ªë nh√≥m ·ªü 2 ph√≠a (tr√°i + ph·∫£i)
            candidate = prefix[index] + suffix[-(index + 2)]

            # H·ª£p k√Ω t·ª± c·ªßa 2 ph√≠a
            mask = prefix_mask[index] | suffix_mask[-(index + 2)]

            # Gi·ªù x√©t xem thay ƒë·ªïi k√Ω t·ª± t·∫°i v·ªã tr√≠ index gi√∫p ƒë∆∞·ª£c m·∫•y nh√≥m:
            if min(mask.bit_count() + 1, 26) <= k:
                # ‚úÖ N·∫øu sau khi ƒë·ªïi, t·ªïng k√Ω t·ª± kh√°c nhau <= k
                # => c√≥ th·ªÉ th√™m 1 nh√≥m m·ªõi
                candidate += 1
            elif (
                prefix_mask[index].bit_count() == k
                and suffix_mask[-(index + 2)].bit_count() == k
                and mask.bit_count() < 26
            ):
                # ‚úÖ N·∫øu c·∫£ 2 ph√≠a ƒë·ªÅu ƒë·ªß k k√Ω t·ª± kh√°c nhau
                # nh∆∞ng v·∫´n c√≤n ch·ªó (t·ªïng < 26) ‚Üí c√≥ th·ªÉ th√™m 3 nh√≥m
                candidate += 3
            else:
                # ‚úÖ Ng∆∞·ª£c l·∫°i, ch·ªâ th√™m 2 nh√≥m t·ªëi ƒëa
                candidate += 2

            # C·∫≠p nh·∫≠t k·∫øt qu·∫£ l·ªõn nh·∫•t
            max_partitions_after_operations = max(
                max_partitions_after_operations, candidate
            )

        return max_partitions_after_operations


### üîç **T√≥m t·∫Øt l·∫°i lu·ªìng ho·∫°t ƒë·ªông**

# 1. **Bi·ªÉu di·ªÖn** t·ª´ng k√Ω t·ª± b·∫±ng bitmask.
# 2. **T√≠nh prefix & suffix**: chia chu·ªói th√†nh nh√≥m h·ª£p l·ªá ‚â§ `k` k√Ω t·ª± kh√°c nhau.
# 3. **Th·ª≠ ƒë·ªïi t·ª´ng k√Ω t·ª±** v√† ki·ªÉm tra xem c√≥ th·ªÉ tƒÉng ƒë∆∞·ª£c s·ªë nh√≥m kh√¥ng.
# 4. **Ch·ªçn k·∫øt qu·∫£ l·ªõn nh·∫•t** sau khi duy·ªát h·∫øt.

# ---

# N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ v·∫Ω **s∆° ƒë·ªì tr·ª±c quan** ƒë·ªÉ th·∫•y r√µ c√°ch ‚Äúchia nh√≥m tr∆∞·ªõc/sau khi ƒë·ªïi k√Ω t·ª±‚Äù ‚Äî b·∫°n c√≥ mu·ªën m√¨nh v·∫Ω kh√¥ng?

# ---

# ## üìù ƒê·ªÅ b√†i:

# B·∫°n ƒë∆∞·ª£c cho:

# * M·ªôt **chu·ªói k√≠ t·ª± `s`** (ch·ªâ g·ªìm c√°c ch·ªØ c√°i th∆∞·ªùng)
# * M·ªôt s·ªë nguy√™n `k`

# B·∫°n c√≥ th·ªÉ th·ª±c hi·ªán c√°c ph√©p sau:

# 1. Tr∆∞·ªõc khi l√†m g√¨ kh√°c, **b·∫°n ƒë∆∞·ª£c ph√©p ƒë·ªïi t·ªëi ƒëa 1 k√≠ t·ª±** trong `s` th√†nh m·ªôt k√≠ t·ª± kh√°c n√†o ƒë√≥ (c·∫£ ch·ªØ c√°i th∆∞·ªùng).
# 2. Sau ƒë√≥, b·∫°n th·ª±c hi·ªán c√°c b∆∞·ªõc ph√¢n ƒëo·∫°n (`partitioning operations`) l·∫∑p l·∫°i cho ƒë·∫øn khi `s` b·ªã r·ªóng:

#    * M·ªói l·∫ßn, b·∫°n ch·ªçn **prefix d√†i nh·∫•t** c·ªßa `s` m√† prefix ƒë√≥ c√≥ **t·ªëi ƒëa `k` k√≠ t·ª± ph√¢n bi·ªát** (distinct characters).
#    * Xo√° (delete) prefix ƒë√≥ kh·ªèi ƒë·∫ßu chu·ªói `s`.
#    * TƒÉng s·ªë ph√¢n ƒëo·∫°n l√™n 1.
#    * Ph·∫ßn c√≤n l·∫°i c·ªßa chu·ªói gi·ªØ nguy√™n th·ª© t·ª± ban ƒë·∫ßu.

# Tr·∫£ v·ªÅ **s·ªë ph√¢n ƒëo·∫°n t·ªëi ƒëa** c√≥ th·ªÉ ƒë∆∞·ª£c t·∫°o ra, n·∫øu b·∫°n ch·ªçn c√°ch **thay ƒë·ªïi t·ªëi ∆∞u nh·∫•t** (ho·∫∑c kh√¥ng thay ƒë·ªïi n·∫øu t·ªët nh·∫•t).

# ---

# ## üîç V√≠ d·ª•:

# * V√≠ d·ª• 1:

#   ```
#   s = "accca", k = 2
#   ```

#   B·∫°n c√≥ th·ªÉ thay `s[2]` (k√Ω t·ª± th·ª© 3, ‚Äòc‚Äô) th√†nh ‚Äòb‚Äô. Khi ƒë√≥ `s` tr·ªü th√†nh `"acbca"`.
#   Th·ª±c hi·ªán ph√¢n ƒëo·∫°n:

#   1. Prefix c√≥ ‚â§2 k√≠ t·ª± ph√¢n bi·ªát ‚Üí `"acbca"` (to√†n chu·ªói), XO√Å h·∫øt ‚Üí 1 ph√¢n ƒëo·∫°n
#      C√≥ th·ªÉ l√†m theo c√°c prefix nh·ªè h∆°n n·∫øu mu·ªën theo greedy l√¢u h∆°n? C√≥ th·ªÉ ch·ªçn `"ac"`, xo√° r·ªìi `"bc"`, r·ªìi `"a"`, t·ªïng l√† 3 ph√¢n ƒëo·∫°n.

#   K·∫øt qu·∫£ t·ªëi ƒëa = **3**.

# * V√≠ d·ª• 2:

#   ```
#   s = "aabaab", k = 3
#   ```

#   V√¨ `k = 3` qu√° l·ªõn so v·ªõi s·ªë k√≠ t·ª± ph√¢n bi·ªát c√≥ th·ªÉ c√≥, cho d√π ƒë·ªïi k√≠ t·ª± hay kh√¥ng, b·∫°n v·∫´n c√≥ th·ªÉ cho prefix to√†n b·ªô chu·ªói m·ªói l·∫ßn, n√™n s·ªë ph√¢n ƒëo·∫°n = **1**.

# ---

# ## üí° √ù t∆∞·ªüng/chi·∫øn l∆∞·ª£c

# ƒê·ªÉ t·ªëi ƒëa ho√° s·ªë ph√¢n ƒëo·∫°n, ta mu·ªën l√†m sao ƒë·ªÉ khi m√¨nh c·ª© l·∫•y prefix ‚Äúl·ªõn nh·∫•t c√≥ ‚â§ k k√≠ t·ª± ph√¢n bi·ªát‚Äù th√¨ prefix ƒë√≥ **kh√¥ng qu√° l·ªõn**, v√¨ nh·ªØng prefix nh·ªè h∆°n = x√≥a nhi·ªÅu l·∫ßn h∆°n = nhi·ªÅu ph√¢n ƒëo·∫°n h∆°n.

# Vi·ªác ƒë∆∞·ª£c ph√©p thay ƒë·ªïi **1 k√≠ t·ª±** cho ph√©p b·∫°n:

# * Thay v√†o m·ªôt v·ªã tr√≠ th√≠ch h·ª£p ƒë·ªÉ l√†m gi·∫£m s·ª± ƒëa d·∫°ng k√≠ t·ª± trong ph·∫ßn ƒë·∫ßu chu·ªói, ƒë·ªÉ c√°c prefix nh·ªè h∆°n ph·∫£i d·ª´ng l·∫°i t·ª´ s·ªõm h∆°n ‚Üí ra ƒë∆∞·ª£c nhi·ªÅu ph√¢n ƒëo·∫°n h∆°n.

# Chi·∫øn l∆∞·ª£c:

# * Gi·∫£ s·ª≠ b·∫°n kh√¥ng thay ƒë·ªïi g√¨, th√¨ qu√° tr√¨nh ph√¢n ƒëo·∫°n l√† **greedy**: m·ªói l·∫ßn l·∫•y prefix d√†i nh·∫•t c√≥ ‚â§ k distinct, xo√°, ti·∫øp t·ª•c v·ªõi ph·∫ßn c√≤n l·∫°i.
# * Xem x√©t thay ƒë·ªïi m·ªói v·ªã tr√≠ trong s (ho·∫∑c kho·∫£ng n√†o ƒë√≥) th√†nh m·ªôt k√Ω t·ª± c√≥ √≠ch ƒë·ªÉ l√†m cho ph√¢n ƒëo·∫°n c√≥ th·ªÉ nhi·ªÅu h∆°n. Th∆∞·ªùng b·∫°n mu·ªën g√¢y ·∫£nh h∆∞·ªüng m·∫°nh cho c√°c prefix ƒë·∫ßu, v√¨ ƒë√≥ l√† nh·ªØng l·∫ßn m√† ph√¢n ƒëo·∫°n c√≥ th·ªÉ tƒÉng nhi·ªÅu n·∫øu prefix s·ªõm b·ªã ‚Äúngh·∫Ωn‚Äù b·ªüi s·ªë l∆∞·ª£ng k√≠ t·ª± ph√¢n bi·ªát v∆∞·ª£t k.

# ---

# ## ‚úÖ T√≥m t·∫Øt:

# * Chu·ªói `s`, s·ªë `k`
# * Tr∆∞·ªõc khi ph√¢n ƒëo·∫°n, b·∫°n ƒë∆∞·ª£c quy·ªÅn thay ƒë·ªïi **t·ªëi ƒëa 1 k√≠ t·ª±**
# * Sau ƒë√≥ th·ª±c hi·ªán: m·ªói l·∫ßn ch·ªçn prefix d√†i nh·∫•t c√≥ ‚â§ k k√Ω t·ª± ph√¢n bi·ªát, xo√° prefix ƒë√≥, tƒÉng count ph√¢n ƒëo·∫°n
# * M·ª•c ti√™u: thay ƒë·ªïi ƒë√¢u ho·∫∑c kh√¥ng thay ƒë·ªïi sao cho s·ªë ph√¢n ƒëo·∫°n ra ƒë∆∞·ª£c l√† **l·ªõn nh·∫•t**

# ---

# N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ gi·∫£i r√µ m·ªôt v√≠ d·ª• t·ª´ng b∆∞·ªõc (t·ª©c l√† ch·ªçn v·ªã tr√≠ thay ƒë·ªïi + b∆∞·ªõc ph√¢n ƒëo·∫°n) v√† sau ƒë√≥ vi·∫øt code minh ho·∫° b·∫±ng Java hay Python v·ªõi ch√∫ th√≠ch r√µ r√†ng?
# T√≥m g·ªçn l·∫°i cho b·∫°n ‚Äî ƒë√¢y l√† **y√™u c·∫ßu ch√≠nh c·ªßa ƒë·ªÅ b√†i LeetCode 3003 ‚Äì ‚ÄúMaximize the Number of Partitions After Operations‚Äù** üëá

# ---

# ## üß© **Y√™u c·∫ßu ƒë·ªÅ b√†i:**

# > Cho m·ªôt chu·ªói k√Ω t·ª± `s` v√† m·ªôt s·ªë nguy√™n `k`, b·∫°n ƒë∆∞·ª£c ph√©p **thay ƒë·ªïi t·ªëi ƒëa 1 k√Ω t·ª± trong chu·ªói**.
# > Sau ƒë√≥, h√£y chia chu·ªói `s` th√†nh **nhi·ªÅu ph·∫ßn nh·∫•t c√≥ th·ªÉ** (partition count t·ªëi ƒëa), sao cho **m·ªói ph·∫ßn** c√≥ **t·ªëi ƒëa `k` k√Ω t·ª± ph√¢n bi·ªát (distinct characters)**.

# üëâ **Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng ph·∫ßn t·ªëi ƒëa** m√† b·∫°n c√≥ th·ªÉ t·∫°o ra sau khi th·ª±c hi·ªán ph√©p thay ƒë·ªïi t·ªëi ∆∞u (ho·∫∑c kh√¥ng thay ƒë·ªïi n·∫øu kh√¥ng c·∫ßn).

# ---

# ## üîπ C√°ch chia chu·ªói:

# * B·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu chu·ªói.
# * M·ªói l·∫ßn ch·ªçn **prefix d√†i nh·∫•t** (ƒëo·∫°n ƒë·∫ßu) m√† **c√≥ ‚â§ k k√Ω t·ª± kh√°c nhau**.
# * Xo√° ƒëo·∫°n ƒë√≥ kh·ªèi chu·ªói v√† ti·∫øp t·ª•c l√†m v·ªõi ph·∫ßn c√≤n l·∫°i.
# * M·ªói l·∫ßn nh∆∞ v·∫≠y t√≠nh l√† **m·ªôt partition (m·ªôt ph·∫ßn)**.

# ---

# ## üîπ M·ª•c ti√™u:

# > T√¨m s·ªë partition **nhi·ªÅu nh·∫•t c√≥ th·ªÉ** n·∫øu b·∫°n ƒë∆∞·ª£c ph√©p thay ƒë·ªïi **t·ªëi ƒëa 1 k√Ω t·ª±** trong chu·ªói.

# ---

# ## üîπ V√≠ d·ª• minh h·ªça:

# ### üß† V√≠ d·ª• 1:

# ```
# s = "accca", k = 2
# ```

# Kh√¥ng ƒë·ªïi g√¨:

# * Ph√¢n ƒëo·∫°n ƒë·∫ßu ti√™n c√≥ th·ªÉ l√† `"acc"` (v√¨ ch·ªâ c√≥ `a, c`)
# * Sau khi x√≥a `"acc"`, c√≤n l·∫°i `"ca"` ‚Üí th√™m 1 ph√¢n ƒëo·∫°n n·ªØa
#   ‚Üí T·ªïng = 2 partitions.

# N·∫øu ƒë·ªïi k√Ω t·ª± th·ª© 3 (`c`) th√†nh `b`, ta ƒë∆∞·ª£c `"acbca"`
# ‚Üí Ph√¢n ƒëo·∫°n 1: `"ac"` (a, c)
# ‚Üí Ph√¢n ƒëo·∫°n 2: `"bc"` (b, c)
# ‚Üí Ph√¢n ƒëo·∫°n 3: `"a"`
# ‚Üí T·ªïng = **3 partitions** ‚úÖ (nhi·ªÅu h∆°n)

# ---

# ### ‚úÖ K·∫øt lu·∫≠n:

# **ƒê·ªÅ y√™u c·∫ßu:**
# T√¨m **s·ªë partition t·ªëi ƒëa** c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c t·ª´ chu·ªói `s`
# üëâ khi ƒë∆∞·ª£c ph√©p **thay ƒë·ªïi t·ªëi ƒëa 1 k√Ω t·ª±**
# üëâ v√† m·ªói partition c√≥ **‚â§ k k√Ω t·ª± ph√¢n bi·ªát**.

# ---

# N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ minh h·ªça quy tr√¨nh chia c·ª• th·ªÉ cho t·ª´ng b∆∞·ªõc (v·ªõi b·∫£ng k√Ω t·ª± v√† ƒë·∫øm distinct) ƒë·ªÉ b·∫°n th·∫•y r√µ c√°ch t√≠nh partition. B·∫°n mu·ªën m√¨nh minh h·ªça v√≠ d·ª• `"accca", k=2"` t·ª´ng b∆∞·ªõc kh√¥ng?
